по одной из классификаций языки неформально делятся на сильно слабо типизированные обладающие сильной или слабой системой типов эти термины не являются однозначно трактуемыми чаще всего используются для указания на достоинства недостатки конкретного языка существуют более конкретные понятия которые приводят называнию тех или иных систем типов сильными или слабыми примечание русскоязычной литературе часто встречается некорректный перевод термина strong typing как строгая типизация корректный вариант сильная типизация используется лишь при слабой типизации следует иметь виду что использование термина строгий отношении системы типов языка может вызвать путаницу со строгой семантикой вычислений языка история году лисков зиллес назвали сильно типизированными те языки которых при передаче объекта из вызывающей функции вызываемую тип этого объекта должен быть совместим типом определённым вызываемой функции джексон писал сильно типизированном языке всякая ячейка данных будет иметь уникальный тип всякий процесс будет провозглашать свои требования по взаимосвязи терминах этих типов статье полнотиповое система типов называется сильной если она исключает возможность возникновения ошибки согласования типов времени выполнения иначе говоря отсутствие ошибок времени выполнения называется ранние работы хоара называют это свойство безопасностью определение сильной слабой типизации сильной слабой типизацией называется продукт множества решений принятых при разработке языка более точно языки характеризуются наличием или отсутствием безопасности согласования типов безопасности доступа памяти также характерным временем осуществления такого контроля статике или динамике например яркими примерами слабой системы типов являются те что лежат основе языков си их характерными атрибутами являются понятия приведения типов каламбуров типизации эти операции поддерживаются на уровне компилятора часто вызываются неявно операция позволяет представить элемент данных любого типа как принадлежащий любому другому типу при условии равенства длины их низкоуровневой реализации битового представления изменить его состояние образом недопустимым для исходного типа неосторожное использование таких операций нередко является источником крахов программ несмотря на это учебной литературе по его система типов описывается как сильная что учётом тезисов луки карделли других следует понимать как более сильная чем си этому языках типизированных по хиндли милнеру понятие приведении типов отсутствует принципе единственным способом преобразовать тип является написание функции которая алгоритмически строит значение требуемого типа на основе значения исходного типа для тривиальных случаев таких как преобразование целого без знака целое со знаком наоборот такие функции обычно входят состав стандартных библиотек наиболее часто используемым случаем такого рода функций являются специальные определяемые функции пустым телом называемые конструирующими функциями или просто конструкторами при этом система типов хиндли милнера обеспечивает чрезвычайно высокий показатель повторного использования кода за счёт полиморфизма сильная но не полиморфная система типов может затруднить решение многих алгоритмических задач как это было отмечено отношении языка pascal теории сильная типизация является непременным элементом обеспечения надёжности разрабатываемых программных средств при правильном применении подразумевающем что программе объявляются используются отдельные типы данных для логически несовместимых значений она защищает программиста от простых но ошибок связанных совместным использованием логически несовместимых значений возникающих иногда просто из за элементарной опечатки подобные ошибки выявляются ещё на этапе компиляции программы тогда как при возможности неявного приведения практически любых типов друг другу как например классическом языке си эти ошибки выявляются только при тестировании причём не все не сразу что порой очень дорого обходится на этапе промышленной эксплуатации python является одним из примеров языка сильной динамической типизацией см также тип данных статическая типизация динамическая типизация каламбур типизации примечания литература перевод на русский язык категория информатика категория теория типов категория концепции языков