limbo язык операционной системе inferno созданный разработчиками unix особенности язык limbo близок си java результатом компиляции является байт код что обеспечивает переносимость переносимость же лежит основании самой ос inferno наследницы plan доведенной до состояния приложения запускаемого поверх хост операционной системы plan freebsd irix linux mac os solaris windows nt limbo имеет встроенный механизм межпроцессного взаимодействия под названием channels среди встроенных типов byte разрядное целое беззнаковое число int разрядное целое число со знаком big разрядное целое число со знаком real разрядное число плавающей запятой array массив со слайсами string adt абстрактный тип данных tuple кортеж module типы данных помимо обычных числовых типов структур union limbo поддерживает строки несколько более специфических типов данных списки массивы tuples каналы ещё есть специальный тип модуль но точки зрения особенностей языка он интереса не представляет все эти типы данных это first class variables их можно сохранять переменных передавать через каналы обычные числовые типы можно преобразовывать друг друга кроме того строки тоже можно преобразовывать числа наоборот но все преобразования должны указываться явно неявных преобразований типов нет строки строки можно преобразовывать массивы байт наоборот кроме этого строки поддерживают срезы можно обратиться конкретному символу или символов например my_string списки list это элементов одного типа для стеко подобных операций добавить элемент начало списка получить первый элемент списка получить остаток списка кроме первого элемента для работы со списками есть три оператора создание нового списка левый операнд это один элемент правый это список элементов того же типа hd возвращает первый элемент списка не меняя сам список tl возвращает список состоящий из второго последующих элементов заданного списка выкусывает первый элемент пример list of int nil создаём список из элементов добавляем начало ещё один hd получаем int равный список не изменился tl получаем новый список nil tl удаляем из него первый элемент массивы array содержит фиксированное кол во элементов одного типа размер массива указывается при его создании инициализации не при объявлении типа переменной массивы можно динамически создавать любой момент когда стал известен требуемый размер массива фактически limbo только два способа динамически выделить память создать array указав требуемый размер через переменную добавить новый элемент начало list естественно массивы тоже поддерживают срезы tuples tuple это список из более элементов любых типов это не просто список такой же тип данных как другие тип самого tuple фактически определяется по тому каких типов элементы каком порядке он содержит пример i_s int string i_s five тип i_r_s_s это int real string string i_r_s_s five comment tuple можно раскладывать на составляющие присваивая его список обычных переменных создаёт переменные типа int типа string инициализирует их значениями five i_s обмен значений двух переменных на limbo каналы каналы chan позволяют организовывать ipc между локальными процессами передавая атомарно объекты заданного типа чтение запись канала это блокирующая операция chan of int создаёт канал каналы бывают размер буфера вы указываете примерно так же как размер массива запись буферизованные каналы не блокируется пока не будет заполнен буфер буфер работает как fifo очередь для каналов limbo есть целых два средства можно читать из массива каналов можно использовать специальный оператор alt для выбора канала alt sys print received outchan sys print message sent составные типы array of chan of int list of string это массив хранящий каналы по которым передаются tuple состоящие из int списка строк размер массива здесь не определяется он будет задан процессе выполнения при инициализации массива unicode limbo использует utf для utf для представления строк памяти например при считывании исходника модуля диска нём может использоваться utf комментариях строках символьных константах если есть массив байт array of byte он конвертируется строку то байты из массива обрабатываются как utf конвертируются строке utf при преобразовании строки массив байт происходит обратное преобразование массиве оказывается utf функции функциям можно передавать параметрами ссылки на функции ооп привычном понимании концепции ооп нет однако абстрактные типы данных adt помимо обычных типов данных качестве элементов могут содержать связанные функции нити для запуска заданной функции отдельной нити limbo используется встроенный оператор spawn ошибки исключения поддержка исключений есть как обычных строковых так типов большинство системных библиотечных функций вместо исключений для возврата ошибок используют tuple errcode result пример программы программа выводящая hello world implement command include sys include draw sys sys command module init fn ctxt ref draw context argv list of string init ctxt ref draw context argv list of string sys load sys sys path sys print hello world for argv nil argv tl argv sys print hd argv sys print примечания ссылки http doc cat org inferno th_edition limbo_language the limbo programming language описание языка категория языки семейства категория inferno