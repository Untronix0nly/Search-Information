регрессио нное тести рование от движение назад собирательное название для всех видов тестирования программного обеспечения направленных на обнаружение ошибок уже участках исходного кода такие ошибки когда после внесения изменений программу перестаёт работать то что должно было продолжать работать называют регрессионными ошибками регрессионное тестирование по некоторым источникам включает new bug fix проверка исправления вновь найденного дефекта old bug fix проверка что исправленный ранее дефект не воспроизводится системе снова также side effect проверка того что не нарушилась работающей ранее если её код мог быть затронут при исправлении некоторых дефектов другой обычно используемые методы регрессионного тестирования включают повторные прогоны предыдущих тестов также проверки не попали ли регрессионные ошибки очередную версию результате слияния кода из опыта разработки по известно что повторное появление одних тех же ошибок случай достаточно частый иногда это происходит из за слабой техники управления версиями или по причине человеческой ошибки при работе системой управления версиями но настолько же часто решение проблемы бывает недолго живущим после следующего изменения программе решение перестаёт работать наконец при переписывании какой либо части кода часто всплывают те же ошибки что были предыдущей реализации поэтому считается хорошей практикой при исправлении ошибки создать тест на неё регулярно прогонять его при последующих изменениях программы хотя регрессионное тестирование может быть выполнено вручную но чаще всего это делается помощью программ позволяющих выполнять все регрессионные тесты автоматически некоторых проектах даже используются инструменты для автоматического прогона регрессионных тестов через заданный интервал времени обычно это выполняется после каждой удачной компиляции небольших проектах либо каждую ночь или каждую неделю регрессионное тестирование является неотъемлемой частью экстремального этой методологии проектная документация заменяется на расширяемое повторяемое тестирование всего программного пакета на каждой стадии процесса разработки программного обеспечения использование регрессионное тестирование может быть использовано не только для проверки корректности программы часто оно также используется для оценки качества полученного результата так при разработке компилятора при прогоне регрессионных тестов рассматривается размер получаемого кода скорость его выполнения время компиляции каждого из тестовых примеров классификация своей статье yoo and harman предоставляют следующую классификацию регрессионного тестирования тест минимизации наборов стремится уменьшить размер тестового набора за счёт устранения избыточных тестовых примеров из тестового набора тестовая задача на определение приоритетов её цели заключаются выполнении заказанных тестов на основе какого либо критерия например на основе истории базы или требований которые как ожидается приведут более раннему выявлению неисправностей или помогут максимизировать некоторые другие полезные свойства тестовая задача выбора связана проблемой выбора подмножества тестов которые будут использоваться для проверки изменённых частей программного обеспечения для этого требуется выбрать подмножество тестов из предыдущей версии которые могут обнаруживать неисправности основываясь на различных стратегиях большинство методов регрессионного тестирования сосредоточены именно на этой технике обычная стратегия состоит том чтобы сосредоточить внимание на отождествления частей sut для выбора тестовых случаев имеющих отношение ним например техника полного повторного тестирования один из наивных типов выбора регрессивного теста путём повторного выполнения всех видов тестов от предыдущей версии на новой она часто используется промышленности из за её простого быстрого внедрения тем не менее её способность обнаружения неисправностей ограничена таким образом значительный объём работ связан разработкой эффективных масштабируемых селективных методов гибридный тест является сочетанием задач на определение приоритетов выбора задача минимизации наборов тест минимизации наборов стремится уменьшить размер тестового набора путём устранения тестовых случаев из набора тестов на основе данного критерия существует три подхода первый из которых применяет тестирование безопасности для обнаружения уязвимостей путём изучения неисправностей приложений которые могут выявлять известные вредоносные программы как вирусы или черви этот подход учитывает только проваленные тесты из предыдущей версии для повторного запуска новой версии системы после устранения неисправности другой же подход предназначен для обнаружения устранения уязвимостей второстепенных релизов веб приложений нём настраивается жёсткая связь со страницами предыдущей версии при помощи итераторов которые выбираются для изучения веб страниц которые содержат уязвимости наконец третий подход предлагает тестирование самоадаптацией системы для уже известных неудач авторы избегают воспроизведения уже известных ошибок рассматривая только те тесты для выполнения которые выявили известные неудачи предыдущих версиях задача определением приоритетов тестовая задача на определение приоритетов касается правильного упорядочения тестов что максимизирует желаемые свойства такие как раннее выявление неисправностей кроме того настоящее время подходы расстановке приоритетов рассматривают только уязвимости один из методов предлагает основанные на ошибках приоритетные тесты которые непосредственно используют знание об их способности обнаруживать неисправности другой же предлагает изменяемую систему записи воспроизведения которая позволяет переписать записанную исполненную версию приложения новую их выполнение является приоритетным из за определения оптимального изменяемого переписывания на основе функции затрат измерения разности между первоначальным исполнением изменённым при повторе задача выбора тестов метод выбора позволяет выбрать подмножество или все тестовые случаи чтобы проверить изменённые части программного обеспечения следующие подходы тестируют механизмы безопасности уязвимости подход основанный на диаграмме состояния uml based регрессионного тестирования для требований безопасности аутентификации доступности авторизации целостность тесты представленные виде диаграммы выбираются на основе теста изменения требований подход улучшению регрессионного тестирования на основе требований онтологий тесты выбираются на основе изменений воздействий анализа требований таких как безопасность надёжность каждый тест связан изменённым требованием которое выбирается для регрессивного тестирования подход для обеспечения проверки дополнительных доказательств для сертификации требований безопасности услуг этот подход основан на обнаружении изменений тестовой модели обслуживания которая будет определять должны ли быть созданы новые тестовые случаи или существующие будут отобраны для повторного выполнения на выделенном сервисе подход разработке безопасных систем оцениваемых по общим критериям этом подходе тестовые задания по требованиям безопасности создаются вручную представлены виде диаграммы случае изменения при необходимости пишутся новые тесты затем все тесты выполняются на новой версии подход требованиям тестирования безопасности веб сервиса релизов пользователь службы может периодически повторно выполнить набор тестов направленных против сервиса чтобы проверить что пользователь по прежнему обладает правильными правами coverage based метод отбора для эволюционного тестирования политик безопасности каждая из которых включает себя правил для определения какие кто имеет допуск ресурсу при каких условиях преимущества недостатки регрессионное тестирование выполняется при внесении изменений существующие функциональные возможности программного обеспечения или если есть ошибка исправления программном обеспечении регрессионное тестирование может быть реализовано за счёт нескольких подходов прохождение программой всех тестов успешно обеспечивает уверенность том что изменения внесённые программное обеспечение не повлияли на существующие функциональные возможности которые должны быть неизменными любом случае гибком процессе управления проектами где жизненный цикл разработки программного обеспечения очень короткий не хватает ресурсов изменения программное обеспечение вносятся очень часто регрессионное тестирование может ввести много ненужных накладных расходов как правило регрессионное тестирование осуществляется помощью средств автоматизации но нынешнее поколение инструментов регрессионного тестирования не предназначено для обработки приложений баз данных по этой причине при выполнении регрессионного теста на приложениях использующих базы данных могут возникнуть траты поскольку это потребует много ручного труда цитаты фундаментальная проблема при сопровождении программ состоит том что исправление одной ошибки большой вероятностью влечёт появление новой поэтому весь процесс идёт по принципу два шага вперёд шаг назад почему не удается устранять ошибки более аккуратно во первых даже скрытый дефект проявляет себя как отказ каком то одном месте же он часто имеет разветвления по всей системе обычно неочевидные всякая попытка исправить его минимальными усилиями приведет исправлению локального очевидного но если только структура не является очень ясной или документация очень хорошей отдалённые последствия этого исправления останутся незамеченными во вторых ошибки обычно исправляет не автор программы зачастую младший программист или стажёр вследствие внесения новых ошибок сопровождение программы требует значительно больше системной отладки на каждый оператор чем при любом другом виде теоретически после каждого исправления нужно прогнать весь набор контрольных примеров по которым система проверялась раньше чтобы убедиться что она каким нибудь непонятным образом не повредилась на практике такое возвратное регрессионное тестирование действительно должно приближаться этому теоретическому идеалу оно очень дорого стоит см также тестирование бета тестирование интеграционное тестирование модульное тестирование непрерывная интеграция разработка через тестирование система отслеживания ошибок системное тестирование тестирование программного обеспечения экстремальное юзабилити тестирование примечания ссылки регрессионное тестирование regression testing литература michael felderer matthias büchler martin johns security testing survey категория тестирование программного обеспечения