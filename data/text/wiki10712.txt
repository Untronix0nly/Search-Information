api программный интерфейс приложения интерфейс прикладного эй пи ай описание способов набор классов процедур функций структур или констант которыми одна компьютерная программа может другой программой обычно входит описание какого либо интернет протокола например rfc программного каркаса фреймворка или стандарта вызовов функций операционной системы часто реализуется отдельной программной библиотекой или сервисом операционной системы используется программистами при написании всевозможных приложений api как средство интеграции приложений api определяет которую предоставляет программа модуль библиотека при этом api позволяет от того как именно эта реализована если программу модуль библиотеку рассматривать как чёрный ящик то api это множество ручек которые доступны пользователю данного ящика которые он может вертеть дёргать программные компоненты взаимодействуют друг другом посредством api при этом обычно компоненты образуют иерархию высокоуровневые компоненты используют api низкоуровневых компонентов те свою очередь используют api ещё более низкоуровневых компонентов по такому принципу построены протоколы передачи данных по интернет стандартный стек протоколов сетевая модель osi содержит от физического уровня передачи бит до уровня протоколов приложений подобных протоколам http imap каждый уровень пользуется предыдущего нижележащего уровня передачи данных свою очередь предоставляет нужную следующему вышележащему уровню важно заметить что понятие протокола близко по смыслу понятию api то другое является абстракцией только первом случае речь идёт передаче данных во втором взаимодействии приложений api библиотеки функций классов включает себя описание сигнатур семантики функций сигнатура функции сигнатура функции часть общего объявления функции позволяющая средствам трансляции функцию среди других различных языках существуют разные представления сигнатуре функции что также тесно связано возможностями перегрузки функций этих языках иногда различают сигнатуру вызова сигнатуру реализации функции сигнатура вызова обычно составляется по синтаксической конструкции вызова функции учётом сигнатуры области видимости данной функции имени функции фактических типов аргументов вызове типе результата сигнатуре реализации обычно участвуют некоторые элементы из синтаксической конструкции объявления функции спецификатор области видимости функции её имя формальных типов аргументов например языке простая функция однозначно опознаётся компилятором по её имени типов её аргументов что составляет сигнатуру функции этом языке если функция является методом некоторого класса то сигнатуре будет участвовать имя класса языке java сигнатуру метода составляет его имя типов параметров тип возвращаемого значения сигнатуре не участвует семантика функции семантика функции это описание того что данная функция делает семантика функции включает себя описание того что является результатом вычисления функции как от чего этот результат зависит обычно результат выполнения зависит только от значений аргументов функции но некоторых модулях есть понятие состояния тогда результат функции может зависеть от этого состояния кроме того результатом может стать изменение состояния логика этих зависимостей изменений относится семантике функции полным описанием семантики функций является исполняемый код функции или математическое определение функции api операционных систем проблемы связанные многообразием api практически все операционные системы unix windows os имеют api помощью которого программисты могут создавать приложения для этой операционной системы главный api операционных систем это множество системных вызовов индустрии программного обеспечения общие стандартные api для стандартной играют важную роль так как они гарантируют что все программы использующие общий api будут работать одинаково хорошо или по крайней мере типичным привычным образом случае api графических интерфейсов это означает что программы будут иметь похожий интерфейс что облегчает процесс освоения новых программных продуктов другой стороны отличия api различных операционных систем существенно затрудняют перенос приложений между платформами существуют различные методы обхода этой сложности написание промежуточных api api графических интерфейсов wxwidgets gtk написание библиотек которые отображают системные вызовы одной ос системные вызовы другой ос такие среды исполнения как wine cygwin введение стандартов кодирования языках например стандартная библиотека языка написание языков реализуемых на разных платформах sh python perl php tcl java также необходимо отметить что распоряжении программиста часто находится несколько различных api позволяющих добиться одного того же результата при этом каждый api обычно реализован использованием api программных компонент более низкого уровня абстракции например для того чтобы увидеть браузере строчку hello world достаточно лишь создать html документ минимальным заголовком простейшим телом содержащим данную строку когда браузер откроет этот документ программа браузер передаст имя файла или уже открытый дескриптор файла библиотеке обрабатывающей html документы та свою очередь при помощи api операционной системы прочитает этот файл разберётся его устройстве затем последовательно вызовет через api библиотеки стандартных графических примитивов операции типа очистить окошко написать hello world выбранным шрифтом во время выполнения этих операций библиотека графических примитивов обратится библиотеке оконного интерфейса запросами уже эта библиотека обратится api операционной системы чтобы записать данные буфер видеокарты при этом практически на каждом из уровней реально существует несколько возможных альтернативных api например мы могли бы писать исходный документ не на html на latex для отображения могли бы использовать любой браузер различные браузеры вообще говоря используют различные html библиотеки кроме того всё это может быть собрано использованием различных библиотек примитивов на различных операционных системах основными сложностями существующих многоуровневых систем api таким образом являются сложность портирования программного кода одной системы api на другую например при смене ос потеря при переходе более низкого уровня на более высокий грубо говоря каждый слой api создаётся для облегчения выполнения некоторого стандартного набора операций но при этом реально затрудняется либо становится принципиально невозможным выполнение некоторых других операций которые предоставляет более низкий уровень api наиболее известные api операционных систем amiga rom kernel cocoa os api posix windows api графических интерфейсов directdraw direct часть directx gdi gdi gtk sfml motif opengl openvg qt sdl vulkan tk wxwidgets zune звуковых интерфейсов directmusic directsound часть directx openal систем bioapi pam web api используется веб разработке как правило определённый набор http запросов также определение структуры http ответов для выражения которых используют xml или json форматы web api является практически синонимом для веб службы хотя последнее время за счёт тенденции web осуществлён переход от soap rest типу коммуникации веб интерфейсы обеспечивающие сочетание нескольких сервисов новых приложениях известны как гибридные примеры mediawiki api см также двоичный интерфейс приложений абстрактный тип данных повторное использование кода примечания категория