сортировка вставками алгоритм сортировки котором элементы входной просматриваются по одному каждый новый поступивший элемент размещается подходящее место среди ранее упорядоченных элементов вычислительная сложность описание пример сортировки вставками на вход алгоритма подаётся чисел сортируемые числа также называют ключами входная на практике представляется виде массива элементами на выходе алгоритм должен вернуть перестановку исходной чтобы выполнялось следующее соотношение начальный момент отсортированная пуста на каждом шаге алгоритма выбирается один из элементов входных данных помещается на нужную позицию уже отсортированной до тех пор пока набор входных данных не будет исчерпан любой момент времени отсортированной элементы удовлетворяют требованиям выходным данным алгоритма данный алгоритм можно ускорить при помощи использования бинарного поиска для нахождения места текущему элементу отсортированной части проблема долгим сдвигом массива вправо решается при помощи смены указателей псевдокод на вход процедуре сортировки подаётся массив состоящий из элементов которые требуется отсортировать соответствует размеру исходного массива для сортировки не требуется привлечения дополнительной памяти кроме постоянной величины для одного элемента так как выполняется перестановка пределах массива результате работы процедуры во входном массиве оказывается требуемая выходная элементов псевдокод алгоритма for to length do key aj while and ai key do ai ai end while ai key end for for to do ai while and aj do aj aj end while aj end for for to do while and aj aj aj aj aj представлен операцией swap из за чего он немного медленнее значение введённого меньше любого значения остальных элементов анализ алгоритма время выполнения алгоритма зависит от входных данных чем большее множество нужно отсортировать тем большее время потребуется для выполнения сортировки также на время выполнения влияет исходная упорядоченность массива время работы алгоритма для различных входных данных одинакового размера зависит от элементарных операций или шагов которые потребуется выполнить для каждой инструкции алгоритма введём временную стоимость количество повторений где количество проверок условия во внутреннем цикле while код стоимость повторы for to length key aj while and ai key ai ai ai key время работы алгоритма сортировки вставками это сумма времён работы каждого шага самым благоприятным случаем является отсортированный массив при этом все внутренние циклы состоят всего из одной итерации то есть для всех тогда время работы алгоритма составит время работы линейно зависит от размера входных данных анализ наихудшего случая наихудшим случаем является массив отсортированный порядке обратном нужному при этом каждый новый элемент сравнивается со всеми отсортированной это означает что все внутренние циклы состоят из итераций то есть для всех тогда время работы алгоритма составит время работы является квадратичной функцией от размера входных данных анализ среднего случая для анализа среднего случая нужно посчитать среднее число сравнений необходимых для определения положения очередного элемента при добавлении нового элемента потребуется как минимум одно сравнение даже если этот элемент оказался правильной позиции добавляемый элемент может занимать одно из положений предполагая случайные входные данные новый элемент равновероятно может оказаться любой позиции среднее число сравнений для вставки го элемента для оценки среднего времени работы для элементов нужно просуммировать временная сложность алгоритма однако из за константных множителей членов более низкого порядка алгоритм более высоким порядком роста может выполняться для небольших входных данных быстрее чем алгоритм более низким порядком роста см также список алгоритмов сортировки сортировка пузырьком сортировка выбором гномья сортировка примечания литература ссылки сортировка вставками реализация сортировки вставками на pascal анимированное представление алгоритма сортировки вставками категория алгоритмы сортировки