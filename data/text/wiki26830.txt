система управления версиями от или программное обеспечение для облегчения работы изменяющейся информацией система управления версиями позволяет хранить несколько версий одного того же документа при необходимости возвращаться более ранним версиям определять кто когда сделал то или иное изменение многое другое такие системы наиболее широко используются при разработке программного обеспечения для хранения исходных кодов разрабатываемой программы однако они могут успехом применяться других областях которых ведётся работа большим количеством непрерывно изменяющихся электронных документов частности системы управления версиями применяются сапр обычно составе систем управления данными об изделии pdm управление версиями используется инструментах управления software configuration management tools программное обеспечение википедии ведёт историю изменений для всех её статей используя методы аналогичные тем которые применяются системах управления версиями общие сведения ситуация которой электронный документ за время своего существования претерпевает ряд изменений достаточно типична при этом часто бывает важно иметь не только последнюю версию но несколько предыдущих простейшем случае можно просто хранить несколько вариантов документа нумеруя их соответствующим образом такой способ неэффективен приходится хранить несколько практически идентичных копий требует повышенного внимания дисциплины часто ведёт ошибкам поэтому были разработаны средства для автоматизации этой работы традиционные системы управления версиями используют модель когда имеется единое хранилище документов управляемое специальным сервером который выполняет бо льшую часть функций по управлению версиями пользователь работающий документами должен сначала получить нужную ему версию документа из хранилища обычно создаётся локальная копия документа так называемая рабочая копия может быть получена последняя версия или любая из предыдущих которая может быть выбрана по номеру версии или дате создания иногда по другим признакам после того как документ внесены нужные изменения новая версия помещается хранилище отличие от простого сохранения файла предыдущая версия не стирается тоже остаётся хранилище может быть оттуда получена любое время сервер может использовать дельта компрессию такой способ хранения документов при котором сохраняются только изменения между версиями что позволяет уменьшить объём хранимых данных поскольку обычно наиболее востребованной является последняя версия файла система может при сохранении новой версии сохранять её целиком заменяя хранилище последнюю ранее сохранённую версию на разницу между этой последней версией некоторые системы например clearcase поддерживают сохранение версий обоих видов большинство версий сохраняется виде дельт но периодически по специальной команде администратора выполняется сохранение версий всех файлов полном виде такой подход обеспечивает максимально полное восстановление истории случае повреждения репозитория иногда создание новой версии выполняется незаметно для пользователя прозрачно либо прикладной программой имеющей встроенную поддержку такой функции либо за счёт использования специальной файловой системы этом случае пользователь просто работает файлом как обычно при сохранении файла автоматически создаётся новая версия часто бывает что над одним проектом одновременно работают несколько человек если два человека изменяют один тот же файл то один из них может случайно отменить изменения сделанные другим системы управления версиями отслеживают такие конфликты предлагают средства их решения большинство систем может автоматически объединить слить изменения сделанные разными разработчиками однако такое автоматическое объединение изменений обычно возможно только для текстовых файлов при условии что изменялись разные части этого файла такое ограничение связано тем что большинство систем управления версиями ориентированы на поддержку процесса разработки программного обеспечения исходные коды программ хранятся текстовых файлах если автоматическое объединение выполнить не удалось система может предложить решить проблему вручную часто выполнить слияние невозможно ни автоматическом ни ручном режиме например если формат файла неизвестен или слишком сложен некоторые системы управления версиями дают возможность заблокировать файл хранилище блокировка не позволяет другим пользователям получить рабочую копию или препятствует изменению рабочей копии файла например средствами файловой системы обеспечивает таким образом исключительный доступ только тому пользователю который работает документом многие системы управления версиями предоставляют ряд других возможностей позволяют создавать разные варианты одного документа ветки общей историей изменений до точки ветвления разными после неё дают возможность узнать кто когда добавил или изменил конкретный набор строк файле ведут журнал изменений который пользователи могут записывать пояснения том что почему они изменили данной версии контролируют права доступа пользователей разрешая или запрещая чтение или изменение данных зависимости от того кто запрашивает это действие типичный порядок работы системой каждая система управления версиями имеет свои специфические особенности наборе команд порядке работы пользователей тем не менее общий порядок работы для большинства vcs совершенно стереотипен здесь предполагается что проект каким бы он ни был уже существует на сервере размещён его репозиторий которому разработчик получает доступ начало работы проектом первым действием которое должен выполнить разработчик является извлечение рабочей копии проекта или той его части которой предстоит работать это действие выполняется помощью команды извлечения версии обычно checkout или clone разработчик задаёт версию которая должна быть скопирована по умолчанию обычно копируется последняя или выбранная администратором качестве основной версия по команде извлечения устанавливается соединение сервером проект или его часть один из каталогов подкаталогами виде дерева каталогов файлов копируется на компьютер разработчика обычной практикой является дублирование рабочей копии помимо основного каталога проектом на локальный диск либо отдельный специально выбранный каталог либо системные подкаталоги основного дерева проекта дополнительно записывается ещё одна его копия работая проектом разработчик изменяет только файлы основной рабочей копии вторая локальная копия хранится качестве эталона позволяя любой момент без обращения серверу определить какие изменения внесены конкретный файл или проект целом от какой версии была отпочкована рабочая копия как правило любая попытка ручного изменения этой копии приводит ошибкам работе программного обеспечения vcs ежедневный цикл работы при некоторых вариациях определяемых особенностями системы деталями принятого процесса обычный цикл работы разработчика течение рабочего дня выглядит следующим образом обновление рабочей копии по мере внесения изменений основную версию проекта рабочая копия на компьютере разработчика стареет расхождение её основной версией проекта увеличивается это повышает риск возникновения конфликтных изменений см ниже поэтому удобно поддерживать рабочую копию состоянии максимально близком текущей основной версии для чего разработчик выполняет операцию обновления рабочей копии update насколько возможно часто реальная частота обновлений определяется частотой внесения изменений зависящей от активности разработки числа разработчиков также временем затрачиваемым на каждое обновление если оно велико разработчик вынужден ограничивать частоту обновлений чтобы не терять время модификация проекта разработчик модифицирует проект изменяя входящие него файлы рабочей копии соответствии проектным заданием эта работа производится локально не требует обращений серверу vcs фиксация изменений завершив очередной этап работы над заданием разработчик фиксирует commit свои изменения передавая их на сервер либо основную ветвь если работа над заданием полностью завершена либо отдельную ветвь разработки данного задания vcs может требовать от разработчика перед фиксацией обязательно выполнить обновление рабочей копии при наличии системе поддержки отложенных изменений shelving изменения могут быть переданы на сервер без фиксации если утверждённая политика работы vcs это позволяет то фиксация изменений может проводиться не ежедневно только по завершении работы над заданием этом случае до завершения работы все связанные заданием изменения сохраняются только локальной рабочей копии разработчика ветвления делать мелкие исправления проекте можно путём правки рабочей копии последующей фиксации изменений прямо главной ветви стволе на сервере однако при выполнении объёмных работ такой порядок становится неудобным отсутствие фиксации промежуточных изменений на сервере не позволяет работать над чем либо групповом режиме кроме того повышается риск потери изменений при локальных авариях теряется возможность анализа возврата предыдущим вариантам кода пределах данной работы поэтому для таких изменений обычной практикой является создание ветвей branch то есть отпочковывание от ствола какой то версии нового варианта проекта или его части разработка котором ведётся параллельно изменениями основной версии ветвь создаётся специальной командой рабочая копия ветви может быть создана заново обычным образом командой извлечения рабочей копии указанием адреса или идентификатора ветви либо путём переключения имеющейся рабочей копии на заданную ветвь базовый рабочий цикл при использовании ветвей остаётся точно таким же как общем случае разработчик периодически обновляет рабочую копию если ветвью работает более одного человека фиксирует ней свою ежедневную работу иногда ветвь разработки так остаётся самостоятельной когда изменения порождают новый вариант проекта который далее развивается отдельно от основного но чаще всего когда работа для которой создана ветвь выполнена ветвь реинтегрируется ствол основную ветвь это может делаться командой слияния обычно merge либо путём создания патча patch содержащего внесённые ходе разработки ветви изменения применения этого патча текущей основной версии проекта слияние версий три вида операций выполняемых системе управления версиями могут приводить необходимости объединения изменений это обновление рабочей копии изменения сделанные основной версии сливаются локальными фиксация изменений локальные изменения сливаются изменениями уже основной версии слияние ветвей изменения сделанные одной ветви разработки сливаются изменениями сделанными другой во всех случаях ситуация принципиально одинакова имеет следующие характерные черты ранее была сделана копия дерева файлов каталогов репозитория или его части впоследствии оригинальное дерево копию были независимо внесены некоторые изменения требуется объединить изменения оригинале копии таким образом чтобы не нарушить логическую связность проекта не потерять данные совершенно очевидно что при невыполнении условия то есть если изменения были внесены только оригинал или только копию объединение элементарно достаточно скопировать изменённую часть туда где изменений не было противном случае слияние изменений превращается нетривиальную задачу во многих случаях требующую вмешательства разработчика целом механизм автоматического слияния изменений работает основываясь на следующих принципах изменения могут состоять модификации содержимого файла создании нового файла или каталога удалении или переименовании ранее существовавшего файла или каталога проекте если два изменения относятся разным не связанным между собой файлам или каталогам они всегда могут быть объединены автоматически их объединение состоит том что изменения сделанные каждой версии проекта копируются объединяемую версию создание удаление переименование файлов каталогах проекта могут быть объединены автоматически если только они не конфликтуют между собой этом случае изменения сделанные каждой версии проекта копируются объединяемую версию конфликтующими обычно являются удаление изменение одного того же файла или каталога удаление переименование одного того же файла или каталога случае если система поддерживает операцию переименования создание разных версиях файла одним тем же именем разным содержимым изменения пределах одного текстового файла сделанные разных версиях могут быть объединены если они находятся разных местах этого файла не пересекаются этом случае объединённую версию вносятся все сделанные изменения изменения пределах одного файла если он не является текстовым всегда являются конфликтующими не могут быть объединены автоматически во всех случаях базовой версией для слияния является версия которой было произведено разделение сливаемых версий если это операция фиксации изменений то базовой версией будет версия последнего обновления перед фиксацией если обновление то версия предыдущего обновления если слияние ветвей то версия которой была создана соответствующая ветвь соответственно сопоставляемыми наборами изменений будут наборы изменений сделанных от базовой до текущей версии во всех объединяемых вариантах абсолютное большинство современных систем управления версиями ориентировано первую очередь на проекты разработки программного обеспечения которых основным видом содержимого файла является текст соответственно механизмы автоматического слияния изменений ориентируются на обработку текстовых файлов то есть файлов содержащих текст состоящий из строк буквенно цифровых символов пробелов табуляций разделённых символами перевода строки при определении допустимости слияния изменений пределах одного того же текстового файла работает типовой механизм построчного сравнения текстов примером его реализации является системная утилита gnu diff который сравнивает объединяемые версии базовой строит список изменений то есть добавленных удалённых заменённых наборов строк минимальной единицей данных для этого алгоритма является строка даже самое малое отличие делает строки различными учётом того что символы разделители большинстве случаев не несут смысловой нагрузки механизм слияния может игнорировать эти символы при сравнении строк те найденные наборы изменённых строк которые не пересекаются между собой считаются совместимыми их слияние делается автоматически если сливаемых файлах находятся изменения затрагивающие одну ту же строку файла это приводит конфликту такие файлы могут быть объединены только вручную любые файлы кроме текстовых точки зрения vcs являются бинарными не допускают автоматического слияния конфликты их разрешение ситуацию когда при слиянии нескольких версий сделанные них изменения пересекаются между собой называют конфликтом при конфликте изменений система управления версиями не может автоматически создать объединённый проект вынуждена обращаться разработчику как уже говорилось выше конфликты могут возникать на этапах фиксации изменений обновления или слияния ветвей во всех случаях при обнаружении конфликта соответствующая операция прекращается до его разрешения для разрешения конфликта система общем случае предлагает разработчику три варианта конфликтующих файлов базовый локальный серверный конфликтующие изменения либо показываются разработчику специальном программном модуле объединения изменений этом случае там демонстрируются сливаемые варианты динамически изменяющийся зависимости от команд пользователя объединённый вариант файла либо просто помечаются специальной разметкой прямо тексте объединённого файла тогда разработчик должен сам сформировать желаемый текст спорных местах сохранить его конфликты файловой системе разрешаются проще там может конфликтовать только удаление файла одной из прочих операций порядок файлов каталоге не имеет значения так что разработчику остаётся лишь выбрать какую операцию нужно сохранить сливаемой версии блокировки механизм блокировки позволяет одному из разработчиков захватить монопольное использование файл или группу файлов для внесения них изменений на то время пока файл заблокирован он остаётся доступным всем остальным разработчикам только на чтение любая попытка внести него изменения отвергается сервером технически блокировка может быть организована по разному типичным для современных систем является следующий механизм файлы для работы которыми требуется блокировка помечаются специальным флагом блокируемый такая пометка может ставиться автоматически при добавлении файла проект обычно для этого предварительно создаётся список масок имён файлов которые при добавлении должны становиться блокируемыми если файл помечен как блокируемый то при извлечении рабочей копии сервера он получает локальной файловой системе атрибут только для чтения что препятствует его случайному редактированию разработчик желающий изменить файл вызывает специальную команду блокировки lock указанием имени этого файла результате работы этой команды происходит следующее сервер проверяет не заблокирован ли уже файл другим разработчиком если это так то команда блокировки завершается ошибкой файл заблокирован другим пользователем разработчик вызывавший её должен ожидать пока другой пользователь не снимет свою блокировку файл на сервере помечается как заблокированный сохранением идентификатора его разработчика времени блокировки если блокировка на сервере прошла удачно на локальной файловой системе файла рабочей копии снимается атрибут только для чтения что позволяет начать его редактировать разработчик работает заблокированным файлом если процессе работы выясняется что файл изменять не нужно он может вызвать команду снятия блокировки unlock release lock все изменения файла будут отменены локальный файл вернётся состояние только для чтения файла на сервере будет снят атрибут заблокирован другие разработчики получат возможность изменять этот файл по завершении работы блокируемым файлом разработчик фиксирует изменения обычно блокировка при этом снимается автоматически хотя некоторых системах блокировку требуется снимать вручную после фиксации либо указывать команде фиксации изменений соответствующий параметр так или иначе при этом файл после изменений теряет флаг заблокирован может быть изменён другими разработчиками массовое использование блокировок когда все или большинство файлов проекте являются блокируемыми для любых изменений необходимо заблокировать соответствующий набор файлов называется ещё стратегией блокированного извлечения ранние системы управления версиями поддерживали исключительно эту стратегию предотвращая таким способом появление конфликтов на корню современных vcs является использование неблокирующих извлечений блокировки же считаются скорее неизбежным злом которое нужно по возможности ограничивать недостатки использования блокировок очевидны блокировки просто мешают продуктивной работе поскольку вынуждают ожидать освобождения блокированных файлов хотя большинстве случаев даже совместные изменения одних тех же файлов которые делаются ходе разных по смыслу работ не пересекаются объединяются при слиянии автоматически частота возникновения конфликтов сложность их разрешения большинстве случаев не настолько велики чтобы создать серьёзные затруднения возникновение же серьёзного конфликта изменений чаще всего сигнализирует либо существенном расхождении во мнениях разных разработчиков относительно дизайна одного того же фрагмента либо неправильной организации работы когда два или более разработчиков делают одно то же блокировки создают проблемы типичный пример разработчик может забыть снять блокировку занятых им файлов уходя отпуск для разрешения подобных проблем приходится применять меры том числе включать систему технические средства для сброса неверных блокировок но при их наличии на приведение системы порядок расходуется время другой стороны некоторых случаях использование блокировок вполне оправданно очевидным примером является организация работы бинарными файлами для которых нет средств слияния изменений либо такое слияние принципиально невозможно как например для файлов изображений если автоматическое слияние невозможно то при обычном порядке работы любое параллельное изменение подобных файлов будет приводить конфликту данном случае гораздо удобнее сделать такой файл блокируемым чтобы гарантировать что любые изменения него будут вноситься только последовательно версии проекта теги система управления версиями обеспечивает хранение всех существовавших вариантов файлов как следствие всех вариантов проекта целом имевших место момента начала его разработки но само понятие версии разных системах может трактоваться двояко одни системы поддерживают версионность файлов это означает что любой файл появляющийся проекте получает собственный номер версии обычно номер условной нулевой версией файла считается пустой файл тем же именем при каждой фиксации разработчиком изменений затрагивающих файл соответствующая часть фиксируемых изменений применяется файлу файл получает новый обычно следующий по порядку номер версии поскольку фиксации обычно затрагивают только часть файлов репозитории номера версий файлов имеющиеся на один тот же момент времени со временем расходятся проект целом то есть весь набор файлов репозитория фактически никакого номера версии не имеет поскольку состоит из множества файлов различными номерами версий подобным образом работает например система управления версиями cvs для других систем понятие версия относится не отдельному файлу репозиторию целиком вновь созданный пустой репозиторий имеет версию или любая фиксация изменений приводит увеличению этого номера то есть даже при изменении одного файла на один байт весь репозиторий считается изменённым получает новый номер версии таким способом трактует номера версий например система subversion номера версии отдельного файла здесь фактически не существует условно можно считать таковым текущий номер версии репозитория то есть считать что при каждом изменении внесённом репозиторий все его файлы меняют номер версии даже те которые не менялись иногда говоря версии файла таких системах имеют виду ту версию репозитория которой файл был последний раз до интересующего нас момента изменён для практических целей обычно имеет значение не отдельный файл весь проект целиком системах поддерживающих версионность отдельных файлов для идентификации определённой версии проекта можно использовать дату время тогда версия проекта будет состоять из тех версий входящих него файлов которые имелись репозитории на указанный момент времени если поддерживается версионность репозитория целом номером версии проекта может выступать номер версии репозитория однако оба варианта не слишком удобны так как ни дата ни номер версии репозитория обычно не несут информации значимых изменениях проекте том насколько долго интенсивно над ним работали для более удобной пометки версий проекта или его частей системы управления версиями поддерживают понятие тегов тег tag это символическая метка которая может быть связана определённой версией файла или каталога репозитории помощью соответствующей команды всем или части файлов проекта отвечающим определённым условиям например входящим головную версию главной ветви проекта на определённый момент времени может быть присвоена заданная метка таким образом можно версию проекта версия xx xxx xxx это набор версий файлов репозитория имеющих тег xx xxx xxx зафиксировав таким образом его состояние на некоторый желаемый момент как правило система тегов достаточно гибкая позволяет пометить одним тегом не одновременные версии файлов каталогов это позволяет собрать версию проекта любым произвольным образом точки зрения пользователя системы пометка тегами может выглядеть по разному некоторых системах она изображается именно как пометка тег можно создать применить определённым версиям файлов каталогов снять других системах например subversion тег представляет собой просто отдельный каталог на файловом дереве репозитория куда из ствола ветвей проекта помощью команды копирования делаются копии нужных версий файлов так что визуально тег это просто вынесенная отдельный каталог копия определённых версий файлов репозитория по соглашению дерево каталогов соответствующее тегу запрещена фиксация изменений то есть версия проекта представляемая тегом является неизменной базовые принципы разработки по vcs порядок использования системы управления версиями каждом конкретном случае определяется техническими регламентами правилами принятыми конкретной фирме или организации разрабатывающей проект тем не менее общие принципы правильного использования vcs немногочисленны едины для любых разработок систем управления версиями любые рабочие тестовые или версии проекта собираются только из репозитория системы персональные сборки включающие ещё изменения могут делать только разработчики для целей промежуточного тестирования таким образом гарантируется что репозиторий содержит всё необходимое для создания рабочей версии проекта текущая версия главной ветви всегда корректна не допускается фиксация главной ветви неполных или не прошедших хотя бы предварительное тестирование изменений любой момент сборка проекта проведённая из текущей версии должна быть успешной любое значимое изменение должно оформляться как отдельная ветвь промежуточные результаты работы разработчика фиксируются эту ветвь после завершения работы над изменением ветвь объединяется со стволом исключения допускаются только для мелких изменений работа над которыми ведётся одним разработчиком течение не более чем одного рабочего дня версии проекта помечаются тегами выделенная помеченная тегом версия более никогда не изменяется распределённые системы управления версиями также известны как dvcs такие системы используют распределённую модель вместо традиционной клиент серверной они общем случае не нуждаются хранилище вся история изменения документов хранится на каждом компьютере локальном хранилище при необходимости отдельные фрагменты истории локального хранилища аналогичным хранилищем на другом компьютере некоторых таких системах локальное хранилище располагается непосредственно каталогах рабочей копии когда пользователь такой системы выполняет обычные действия такие как извлечение определённой версии документа создание новой версии тому подобное он работает со своей локальной копией хранилища по мере внесения изменений хранилища принадлежащие разным разработчикам начинают различаться возникает необходимость их синхронизации такая синхронизация может осуществляться помощью обмена патчами или так называемыми наборами изменений между пользователями описанная модель логически близка созданию отдельной ветки для каждого разработчика классической системе управления версиями некоторых распределённых системах перед началом работы локальным хранилищем нужно создать новую ветвь отличие состоит том что до момента синхронизации другие разработчики этой ветви не видят пока разработчик изменяет только свою ветвь его работа не влияет на других участников проекта наоборот по завершении обособленной части работы внесённые ветви изменения сливают основной общей ветвью как при слиянии ветвей так при синхронизации разных хранилищ возможны конфликты версий на этот случай во всех системах предусмотрены те или иные методы обнаружения разрешения конфликтов слияния точки зрения пользователя распределённая система отличается необходимостью создавать локальный репозиторий наличием командном языке двух дополнительных команд команды получения репозитория от удалённого компьютера pull передачи своего репозитория на удалённый компьютер push первая команда выполняет слияние изменений удалённого локального репозиториев помещением результата локальный репозиторий вторая наоборот выполняет слияние изменений двух репозиториев помещением результата удалённый репозиторий как правило команды слияния распределённых системах позволяют выбрать какие наборы изменений будут передаваться другой репозиторий или извлекаться из него исправлять конфликты слияния непосредственно ходе операции или после её неудачного завершения повторять или возобновлять неоконченное слияние обычно передача своих изменений чужой репозиторий push завершается удачно только при условии отсутствия конфликтов если конфликты возникают пользователь должен сначала слить версии своём репозитории выполнить pull лишь затем передавать их другим обычно рекомендуется организовывать работу системой так чтобы пользователи всегда или преимущественно выполняли слияние себя репозитории то есть отличие от систем где пользователи передают свои изменения на центральный сервер когда считают нужным распределённых системах более естественным является порядок когда слияние версий инициирует тот кому нужно получить его результат например разработчик управляющий сборочным сервером основные преимущества распределённых систем их гибкость значительно бо льшая по сравнению системами автономия отдельного рабочего места каждый компьютер разработчика является фактически самостоятельным сервером из таких компьютеров можно построить произвольную по структуре уровню сложности систему задав как техническими так мерами желаемый порядок синхронизации при этом каждый разработчик может вести работу независимо так как ему удобно изменяя сохраняя промежуточные версии документов пользуясь всеми возможностями системы том числе доступом истории изменений даже отсутствие сетевого соединения сервером связь сервером или другими разработчиками требуется исключительно для проведения синхронизации при этом обмен наборами изменений может осуществляться по различным схемам недостаткам распределённых систем можно отнести увеличение требуемого объёма дисковой памяти на каждом компьютере приходится хранить полную историю версий тогда как системе на компьютере разработчика обычно хранится лишь рабочая копия то есть срез репозитория на какой то момент времени внесённые изменения менее очевидным но неприятным недостатком является то что распределённой системе практически невозможно реализовать некоторые виды предоставляемые системами это блокировка файла или группы файлов для хранения признака блокировки нужен общедоступный постоянно находящийся онлайне центральный сервер это вынуждает применять специальные меры если приходится работать бинарными файлами непригодными для автоматического слияния слежение за определённым файлом или группой файлов изменения файлов происходят на разных серверах слияния выделения ветвей происходят локально об изменениях становится известно только при синхронизации причём не всем разработчикам только тем кто данной синхронизации участвует единая сквозная нумерация версий системы или файлов которой номер версии монотонно возрастает такая нумерация также требует наличия главного сервера задающего номера версий для всех остальных распределённых системах приходится обходиться локальными обозначениями версий применять теги назначение которых определяется соглашением между разработчиками или корпоративными стандартами фирмы локальная работа пользователя отдельной небольшой по объёму выборкой из значительного по размеру внутренней сложности хранилища на удалённом сервере можно выделить следующие типичные ситуации которых использование распределённой системы даёт заметные преимущества периодическая синхронизация нескольких компьютеров под управлением одного разработчика рабочего компьютера домашнего компьютера ноутбука так далее использование распределённой системы избавляет от необходимости выделять один из компьютеров качестве сервера синхронизация выполняется по необходимости обычно при пересадке разработчика одного устройства на другое совместная работа над проектом небольшой территориально распределённой группы разработчиков без выделения общих ресурсов как предыдущем случае реализуется схема работы без главного сервера актуальность репозиториев поддерживается периодическими синхронизациями по схеме каждый каждым крупный распределённый проект участники которого могут долгое время работать каждый над своей частью при этом не имеют постоянного подключения сети такой проект может использовать сервер которым копии всех его участников возможны более сложные варианты например созданием групп для работы по отдельным направлениям внутри более крупного проекта при этом могут быть выделены отдельные групповые серверы для синхронизации работы групп тогда процесс окончательного слияния изменения становится древовидным сначала отдельные разработчики синхронизируют изменения на групповых серверах затем обновлённые репозитории групп главным сервером возможна работа без групповых серверов тогда разработчики одной группы синхронизируют изменения между собой после чего любой из них например руководитель группы передаёт изменения на центральный сервер традиционной офисной разработке проектов когда группа разработчиков относительно невелика целиком находится на одной территории пределах единой локальной компьютерной сети постоянно доступными серверами система может оказаться лучшим выбором из за своей более жёсткой структуры наличия отсутствующей распределённых системах например уже упомянутой блокировки возможность фиксировать изменения без их слияния центральную ветвь таких условиях легко реализуется путём выделения незавершённых работ отдельные ветви разработки словарь общепринятой терминологии не существует разных системах могут использоваться различные названия для одних тех же действий ниже приводятся некоторые из наиболее часто используемых вариантов приведены английские термины литературе на русском языке используется тот или иной перевод или транслитерация amend внести изменения не создавая новой версии обычно когда разработчик ошибочно зафиксировал commit версию но не залил push её на сервер blame понять кто внёс изменение branch ветвь направление разработки независимое от других ветвь представляет собой копию части как правило одного каталога хранилища которую можно вносить свои изменения не влияющие на другие ветви документы разных ветвях имеют одинаковую историю до точки ветвления разные после неё changeset changelist activity набор изменений представляет собой поименованный набор правок сделанных локальной копии для какой то общей цели системах поддерживающих наборы правок разработчик может объединять локальные правки группы выполнять фиксацию логически связанных изменений одной командой указывая требуемый набор правок качестве параметра при этом прочие правки останутся типичный пример ведётся работа над добавлением новой этот момент обнаруживается критическая ошибка которую необходимо немедленно исправить разработчик создаёт набор изменений для уже сделанной работы новый для исправлений по завершении исправления ошибки отдаётся команда фиксации только второго набора правок check in commit submit создание новой версии фиксация изменений некоторых сув subversion новая версия автоматически переносится хранилище документов check out clone извлечение документа из хранилища создание рабочей копии conflict конфликт ситуация когда несколько пользователей сделали изменения одного того же участка документа конфликт обнаруживается когда один пользователь зафиксировал свои изменения второй пытается зафиксировать система сама не может корректно слить конфликтующие изменения поскольку программа может быть недостаточно разумна для того чтобы определить какое изменение является корректным второму пользователю нужно самому разрешить конфликт resolve graft backport cherry picking transplant использовать встроенный сув алгоритм слияния чтобы перенести отдельные изменения другую ветвь не сливая их например исправили ошибку ветви вносим эти же изменения стабильный ствол head основная версия самая свежая версия для ветви ствола находящаяся хранилище сколько ветвей столько основных версий merge integration слияние объединение независимых изменений единую версию документа осуществляется когда два человека изменили один тот же файл или при переносе изменений из одной ветки другую pull update получить новые версии из хранилища некоторых сув subversion происходит pull switch то есть загружаются изменения потом рабочая копия доводится до последнего состояния будьте внимательны понятие update двусмысленно subversion mercurial значит разное push залить новые версии хранилище многие распределённые сув git mercurial предполагают что commit надо давать каждый раз когда программист выполнил какую то законченную функцию залить когда есть интернет другие хотят ваши изменения commit обычно не требует ввода имени пароля push требует rebase перенос точки ветвления версии от которой начинается ветвь на более позднюю версию основной ветви например после выпуска версии проекта стволе продолжается доработка исправление ошибок доработка имеющейся одновременно начинается работа над новой новой ветви через какое то время основной ветви происходит выпуск версии исправлениями теперь желательно чтобы ветвь разработки новой включала изменения произошедшие стволе вообще это можно сделать базовыми средствами помощью слияния merge выделив набор изменений между версиями слив его ветвь но при наличии системе поддержки перебазирования ветви эта операция делается проще одной командой по команде rebase параметрами ветвью новой базовой версией система самостоятельно определяет нужные наборы изменений производит их слияние после чего для ветви базовой версией становится версия при последующем слиянии ветви со стволом система не рассматривает повторно изменения внесённые между версиями так как ветвь логически считается выделенной после версии repository depot хранилище документов место где система управления версиями хранит все документы вместе историей их изменения другой служебной информацией revision версия документа системы управления версиями различают версии по номерам которые назначаются автоматически shelving откладывание изменений предоставляемая некоторыми системами возможность создать набор изменений changeset сохранить его на сервере без фиксации commit отложенный набор изменений доступен на чтение другим участникам проекта но до специальной команды не входит основную ветвь поддержка откладывания изменений даёт возможность пользователям сохранять незавершённые работы на сервере не создавая для этого отдельных ветвей strip удалить целую ветвь из хранилища tag label метка которую можно присвоить определённой версии документа метка представляет собой символическое имя для группы документов причём метка описывает не только набор имён файлов но версию каждого файла версии включённых метку документов могут принадлежать разным моментам времени trunk mainline master ствол основная ветвь разработки проекта политика работы со стволом может отличаться от проекта проекту но целом она такова большинство изменений вносится ствол если требуется серьёзное изменение способное привести нестабильности создаётся ветвь которая сливается со стволом когда нововведение будет достаточной мере испытано перед выпуском очередной версии создаётся ветвь для последующего выпуска которую вносятся только исправления update sync switch синхронизация рабочей копии до некоторого заданного состояния хранилища чаще всего это действие означает обновление рабочей копии до самого свежего состояния хранилища однако при необходимости можно рабочую копию более старому состоянию чем текущее working copy рабочая локальная копия документов см также управление software configuration management инструменты управления software configuration management tools хранилище содержимого программные продукты прозрачным управлением версиями некоторые реализации webdav deltav операционная система openvms mediawiki большинство других вики движков примечания ссылки системы управления версиями для linux обзор архитектуры моделей примеров уровень сложности простой developerworks distributed version control systems not so quick guide through subversion or cvs bazaar or mercurial john ferguson smart javaworld com the risks of distributed version control бен коллинз сассман создатель subversion распределённых системах управления версиями maturity model for source control scmm сравнение систем управления версиями точки зрения завершённости процесса разработки по