smalltalk объектно ориентированный язык динамической типизацией основанный на идее посылки сообщений разработанный xerox parc аланом кэйем дэном ингаллсом тедом кэглером адель голдберг другими годах представляет собой интегрированную среду разработки исполнения объекты которой доступны для модификации через неё саму которой итоге сводится модификации её собственного поведения язык был представлен как smalltalk smalltalk является одним из многих объектно ориентированных языков основанных на языке симула который сам оказал большое влияние на развитие таких объектно ориентированных языков как objective actor java erlang groovy ruby многих других многие идеи по написанию программ появились сообществе smalltalk ним можно отнести рефакторинг шаблоны проектирования применительно по карты класс обязанности взаимодействие экстремальное целом основатель концепции вики уорд каннингем также входит сообщество smalltalk основные идеи основными идеями smalltalk являются всё объекты всё их взаимодействие через посылку сообщений строки целые числа логические значения определения классов блоки кода стеки память составляющие самой интегрированной среды разработки исполнения всё представляется виде объектов объектов есть методы состояние любому объекту может быть послано любое сообщение при отправке сообщения среда исполнения всегда ищет объекта получателя подходящий метод выполняет его если не находит выполняет объекта получателя специальный метод для неопознанных сообщений объект получатель сам определяет является ли полученное сообщение правильным что надо сделать чтобы его обработать всё доступно для изменения если вы хотите изменить саму интегрированную среду разработки исполнения вы можете сделать это работающей системе без остановки перекомпиляции перезапуска если вам необходима языке новая управляющая конструкция языка вы можете добавить её некоторых реализациях вы можете также изменить синтаксис языка или способ работы сборщика мусора динамическая типизация это означает что вы не указываете типы переменных программе что делает язык гораздо лаконичней как объяснено выше является ли операция правильной определяет объект получатель не компилятор smalltalk также использует другие современные идеи сборка мусора встроена язык незаметна разработчику dynamic translation современные коммерческие виртуальные машины компилируют байткоды машинные коды для быстрого выполнения выполнение кода виртуальной машине программы smalltalk обычно компилируются байткоды выполняются виртуальной машиной что позволяет выполнять их на любом оборудовании для которого существует виртуальная машина одной из особенностей smalltalk является то что даже такие традиционные конструкции как if then else for while не являются частью языка все они реализованы помощью объектов например решение принимается помощью посылки сообщения iftrue логическому объекту передаёт управление фрагменту текста если логическое значение истинно собственно встроенных синтаксических конструкций языке не много посылка сообщения объекту возможной передачей ему других объектов присваивание объекта переменной возвращение объекта из метода несколько синтаксических конструкций для определения объектов литералов временных переменных аналогом механизма обмена сообщениями smalltalk является сеть интернет можно представить каждый объект как веб сервер отвечающий на запросы при этом сервер на запросы может просто выдавать заранее ответ например веб страницу расположенную по определённому пути может перенаправить запрос сообщение другому объекту аналог прокси сервер может изменить запрос по определённым правилам аналог техника url rewriting конечно же может сформировать абсолютно новую страницу соответствующую данным переданным сообщением если для реакции на сообщение объекта нет метода то среда вызывает получателя метод так же как веб сервер возвращает страницу сообщением об ошибке если задан несуществующий путь веб странице краткий обзор синтаксических элементов отдельно стоящей парой символов окружается список имён переменных которые будут временными символ при передаче сообщения ставится после имени сообщения или его аргумента перед передаваемым ним значением символы ограничивают блок команд точнее литерал анонимной функции но их можно для начала воспринимать их как аналог фигурных скобок си подобных языках начале такой анонимной функции до символа можно перечислить требуемые ею аргументы её результатом будет последнее вычисленное ею выражение символ завершает отдельную команду символ разделяет сообщения которые нужно последовательно передать одному тому же объекту пара символов обозначает присваивание переменную имя которой расположено перед ней объекта литерала или объекта ответа на сообщение расположенного после неё следующий пример показывающий нахождение гласных строке иллюстрирует стиль smalltalk astring this is string vowels astring select acharacter isvowel последней строке примера объекту строке посылается сообщение select аргументом анонимным блоком кода принимающим один аргумент возвращающим то что вернёт обработчик события isvowel переданного этим аргументом объекта при обработке сообщения select вызывается метод select из класса collection одного из предков класса string которому относится объект создаваемый строковым литералом во второй строке примера текст этого метода показан ниже select ablock newcollection self species new self do each ablock value each iftrue newcollection add each newcollection он осуществляет принимает на вход анонимную функцию ablock создаёт новую коллекцию аналогичную себе вызывает перебор своих элементов это метод do выполняя переданный ему блок ablock для каждого элемента когда блок выполняется примере acharacter isvowel он создаёт логическое значение которому затем посылается сообщение iftrue если это значение true то буква добавляется возвращаемую строку конце созданная коллекция возвращается ответом на сообщение на что указывает символ возвращения качестве ответа из за того что select определён абстрактном классе collection мы также можем использовать его ещё так rectangles with rectangle left right top bottom with rectangle left right top bottom apoint point collisions rectangles select arect containspoint apoint история smalltalk был создан группой исследователей возглавляемой аланом кэйем центре xerox parc первая реализация известная как smalltalk была создана за несколько месяцев как результат спора том что язык основанный на идее посылки сообщений подсказанной симулой должен реализовываться на странице кода более поздняя версия действительно использованная для работы известна сейчас как smalltalk его синтаксис модель исполнения сильно отличались от современного smalltalk настолько что его надо рассматривать как другой язык после существенных переработок которые зафиксировали несколько сторон семантики выполнения для увеличения эффективности была создана версия известная как smalltalk этой версии добавились наследование синтаксис более близкий smalltalk среда разработки включающая большинство инструментов знакомых современным smalltalk разработчикам smalltalk были добавлены метаклассы что делало фразу всё объекты истинной путём связывания индивидуальными классами свойств поведения например поддержки различных способов создания экземпляров smalltalk был первой версией доступной за пределами parc сначала как smalltalk version розданный небольшому количеству компаний университетов для экспертной оценки позже году были выпущены общедоступная реализация известная как smalltalk version виде образа независимый от платформы файл содержащий объекты спецификации виртуальной машины сейчас существует две реализации smalltalk являющиеся прямыми потомками smalltalk squeak visualworks образ smalltalk version запущен на hobbes виртуальной машине st реализованной на visualworks hello world простой пример transcript show hello world этот пример показывает две стороны smalltalk во первых посылка сообщения smalltalk все действия производятся путём посылки сообщений объектам данном случае сообщение это show hello world оно посылается transcript для обработки этого сообщения будет вызван метод transcript show который должен рассмотреть свой аргумент строку hello world отобразить этот аргумент на transcript заметьте что вас должно быть открыто окно transcript чтобы увидеть результат во вторых этот пример показывает основной синтаксис посылки сообщения smalltalk отличие от нет точек после получателя нет скобок вокруг аргументов пример объекта определение класса object subclass category smalltalk examples это простое определение класса определением имени категории обычно среда разработки предоставляет заготовку большей частью текста этого примера определение метода publish transcript show hello world это определение метода именем publish тело метода такое же как простом примере вызов метода new publish данном примере создаётся экземпляр класса new затем ему посылается сообщение publish обратите внимание что для создания объекта не используется ключевое слово языка как java посылается обычное сообщение new классу сообщения для создания объектов иногда переопределяют например некий абстрактный класс может ответ на new возвращать экземпляр одного из своих конкретных подклассов реализации squeak современная открытая реализация smalltalk полноценной средой разработки окна редактор один из основателей алан кей pharo objectstudio ibm visualage for smalltalk smalltalk gnu smalltalk lsw vision smalltalk ambrai smalltalk huemul smalltalk примечания литература ссылки основной сайт книги smalltalk smalltalk россии squeaksource monticello репозиторий для squeak pharo смолток язык его реализация язык smalltalk перевод книги голдберг робсона стандарт ansi smalltalk an overview of the programming language smalltalk by john shoch the smalltalk programming system design and implementation by dan ingalls smalltalk концепция объектно иванов кремер компьютер пресс категория объектно ориентированные языки категория языки динамической типизацией категория языки автоматическим управлением памятью