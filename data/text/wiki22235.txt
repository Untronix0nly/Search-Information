рефа кторинг или кода переработка кода равносильное преобразование алгоритмов процесс изменения внутренней структуры программы не затрагивающий её внешнего поведения имеющий целью облегчить понимание её работы основе рефакторинга лежит небольших эквивалентных то есть сохраняющих поведение преобразований поскольку каждое преобразование маленькое программисту легче проследить за его правильностью то же время вся может привести существенной перестройке программы улучшению её согласованности чёткости цели рефакторинга цель рефакторинга сделать код программы более легким для понимания без этого рефакторинг нельзя считать успешным рефакторинг следует отличать от оптимизации как рефакторинг оптимизация обычно не изменяет поведение программы только ускоряет её работу но оптимизация часто затрудняет понимание кода что противоположно рефакторингу другой стороны нужно отличать рефакторинг от реинжиниринга который осуществляется для расширения программного обеспечения как правило крупные рефакторинги предваряют реинжиниринг причины применения рефакторинга рефакторинг нужно применять постоянно при разработке кода основными стимулами его проведения являются следующие задачи необходимо добавить новую функцию которая недостаточно укладывается принятое архитектурное решение необходимо исправить ошибку причины возникновения которой сразу не ясны преодоление трудностей командной разработке которые обусловлены сложной логикой программы признаки плохого кода во многом при рефакторинге лучше полагаться на интуицию основанную на опыте тем не менее имеются некоторые видимые проблемы коде требующие рефакторинга дублирование кода длинный метод большой класс длинный список параметров жадные функции это метод который чрезмерно обращается данным другого объекта избыточные временные переменные классы данных данные рефакторинг кода термин рефакторинг означает изменение исходного кода программы без изменения его внешнего поведения экстремальном других гибких методологиях рефакторинг является неотъемлемой частью цикла разработки по разработчики попеременно то создают новые тесты то выполняют рефакторинг кода для улучшения его логичности прозрачности автоматическое юнит тестирование позволяет убедиться что рефакторинг не разрушил существующую рефакторинг изначально не предназначен для исправления ошибок добавления новой он вообще не меняет поведение программного обеспечения это помогает избежать ошибок облегчить добавление он выполняется для улучшения понятности кода или изменения его структуры для удаления мёртвого кода всё это для того чтобы будущем код было легче поддерживать развивать частности добавление программу нового поведения может оказаться сложным существующей структурой этом случае разработчик может выполнить необходимый рефакторинг уже затем добавить новую это может быть перемещение поля из одного класса другой вынесение фрагмента кода из метода превращение его самостоятельный метод или даже перемещение кода по иерархии классов каждый отдельный шаг может показаться элементарным но совокупный эффект таких малых изменений состоянии радикально улучшить проект или даже предотвратить распад плохо программы методы рефакторинга наиболее употребимые методы рефакторинга изменение сигнатуры метода change method signature инкапсуляция поля encapsulate field выделение класса extract class выделение интерфейса extract interface выделение локальной переменной extract local variable выделение метода extract method генерализация типа generalize type встраивание inline введение фабрики introduce factory введение параметра introduce parameter подъём метода pull up method спуск метода push down method переименование метода rename method перемещение метода move method замена условного оператора полиморфизмом replace conditional with polymorphism замена наследования делегированием replace inheritance with delegation замена кода типа подклассами replace type code with subclasses изменение сигнатуры метода change method signature суть изменения сигнатуры метода заключается добавлении изменении или удалении параметра метода изменив сигнатуру метода необходимо скорректировать обращения нему коде всех клиентов это изменение может затронуть внешний интерфейс программы кроме того не всегда разработчику изменяющему интерфейс доступны все клиенты этого интерфейса поэтому может потребоваться та или иная форма регистрации изменений интерфейса для последующей передачи их вместе новой версией программы инкапсуляция поля encapsulate field случае если класса имеется открытое поле необходимо сделать его закрытым обеспечить методы доступа после инкапсуляции поля часто применяется перемещение метода выделение метода extract method выделение метода заключается выделении из длинного или требующего комментариев кода отдельных фрагментов преобразовании их отдельные методы подстановкой подходящих вызовов местах использования этом случае действует правило если фрагмент кода требует комментария том что он делает то он должен быть выделен отдельный метод также правило один метод не должен занимать более чем один экран строк зависимости от условий редактирования противном случае некоторые его фрагменты имеют самостоятельную ценность подлежат выделению из анализа связей выделяемого фрагмента окружающим контекстом делается вывод перечне параметров нового метода его локальных переменных перемещение метода move method перемещение метода применяется по отношению методу который чаще обращается другому классу чем тому котором сам располагается замена условного оператора полиморфизмом replace conditional with polymorphism условный оператор несколькими ветвями заменяется вызовом полиморфного метода некоторого базового класса имеющего подклассы для каждой ветви исходного оператора выбор ветви осуществляется неявно зависимости от того экземпляру какого из подклассов оказался адресован вызов основные принципы вначале следует создать базовый класс нужное число подклассов некоторых случаях следует провести оптимизацию условного оператора путём выделения метода возможно использование перемещения метода чтобы поместить условный оператор вершину иерархии наследования выбрав один из подклассов нужно нём полиморфный метод базового класса переместить него тело соответствующей ветви условного оператора повторить предыдущее действие для каждой ветви условного оператора заменить весь условный оператор вызовом полиморфного метода базового класса проблемы возникающие при проведении рефакторинга проблемы связанные базами данных проблемы изменения интерфейсов трудности при изменении дизайна средства автоматизации рефакторинга технические критерии для инструментов рефакторинга базы данных программы деревья синтаксического разбора точность практические критерии для инструментов рефакторинга скорость отмена модификаций интеграция другими инструментами см также шаблоны проектирования экстремальное просмотр кода рефакторинг баз данных примечания литература ссылки что такое рефакторинг домашняя страница мартина фаулера рефакторинге обзор программ для автоматического рефакторинга revisiting fowler video store refactoring code refining abstractions категория