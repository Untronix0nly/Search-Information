файл lisp machine jpg thumb первая лисп машина музее массачусетского института лисп lisp от язык обработки списков современное написание lisp семейство языков программы данные которых представляются системами линейных списков символов лисп был создан джоном маккарти для работ по искусственному интеллекту до сих пор остаётся одним из основных средств данной области применяется он как средство обычного промышленного от встроенных скриптов до веб приложений массового использования хотя популярным его назвать нельзя это один из старейших наряду фортраном коболом используемых по сей день высокоуровневых языков также первый из сохранившихся использовании языков использующих автоматическое управление памятью сборку мусора традиционный лисп имеет динамическую систему типов язык является функциональным но начиная уже ранних версий обладает также чертами императивности тому же имея полноценные средства символьной обработки позволяет реализовать объектно примером такой реализации является платформа clos является языком системного для так называемых лисп машин производившихся годы например фирмой наряду языком ада лисп прошёл процесс фундаментальной стандартизации для использования военном деле промышленности результате чего появился диалект common lisp впоследствии ansi его реализации существуют для большинства платформ архитектура синтаксис основные элементы языка лисп регистро независимый язык исходно алфавит языка ограничивался символьной таблицей ascii некоторые современные реализации поддерживают unicode базовыми элементами языка являются символы атомы построенные из них динамические списочные структуры выражения символ лиспе это объект машинной памяти представляющий собой совокупность слотов ячеек хранящих ссылки часть слотов имеет изначально определённое языком назначение имя строка знаков по которой программа может ссылаться на данный символ аристотелево из которого вырастает лямбда исчисление функциональный слот лямбда выражение связанное символом когда обращение символу программе синтаксически соответствует вызову функции результате вычисляется лямбда выражение связанное символом значение объект машинной памяти который можно трактовать как данные когда программа обращается символу как переменной она получает значение данного слота прочие системные слоты определяемые реализацией набор слотов является динамически расширяемым может вследствие этого использоваться как список произвольных свойств символа можно свободно расширить слотовую систему удобным для решения задачи способом такое представление позволяет рассматривать символы как узлы сети где каждая координата записана своём слоте атомы это символы числа числа не являются лисповскими символами поскольку могут иметь только собственное числовое значение никакого другого то же время числа наравне символами могут входить списки этим обусловлено объединение этих двух понятий одну общую категорию основная структура данных лиспа динамический список атомов определяемый рекурсивно как головной объект присоединённый нему список хвост поскольку голова списка тоже может быть списком список является формой представления произвольного дерева сам список верхнего уровня корень входящие него подсписки второго следующих уровней узлы атомы листья для атомов списков язык использует крайне примитивный скобочный синтаксис символ представляется своим именем число записью его значения список виде заключённой круглые скобки списков атомов которой идущие подряд атомы при необходимости разделены пробелами список является элементов любого рода том числе других списков например foo состоит из целого числа рациональной дроби символа foo указателя на функцию сложения выражения представляются списками префиксной записи первый элемент должен быть формой то есть функцией оператором макросом или специальным оператором прочие элементы аргументы этой формы передаваемые форме для обработки арифметические операторы записываются по тому же принципу например выдаёт инфиксной записи это синтаксис форме бэкуса наура s_expression atomic_symbol s_expression s_expression list list s_expression s_expression atomic_symbol letter atom_part atom_part empty letter atom_part number atom_part letter number empty характерная особенность программы на лиспе состоит том что абсолютно всё данные код любой сложности описывается этом примитивном синтаксисе результатов такого подхода два внешне программа на лиспе выглядит как гигантское нагромождение скобок имеющиеся любой современной системе средства вывода позволяющие отобразить список так чтобы была видна его структура несколько исправляют ситуацию но целом для восприятия программ на лиспе на глаз требуется определённый навык впрочем редактирование программ значительно упрощается использованием текстового редактора поддерживающего автоматическое выравнивание кода подсветку соответствующих пар скобок такие специальные команды как закрыть все открытые скобки перейти через список вправо первичный синтаксический разбор программы обрабатываемых ею данных может выполняться одним тем же простейшим кодом данные могут без каких либо трудностей обрабатываться качестве программы программа качестве данных вследствие этого лисп позволяет легко создавать мощные программы динамически порождающие код лисп машина способна воспринимать каждый поступающий на неё список на самом абстрактном уровне например как мета лисп машину модифицирующую воспринимающую машину такой динамичной среде можно реализовать как строго научные системы так неисчислимое множество программистских трюков генераторов всевозможных машин любая программа на языке лисп состоит из выражений форм результат работы программы состоит вычислении этих выражений все выражения записываются виде списков одной из основных структур лиспа поэтому они могут легко быть созданы посредством самого языка это позволяет создавать программы изменяющие другие программы или макросы позволяющие существенно расширить возможности языка базовые символы операторы функции развитые реализации лиспа содержат сотни системных функций макросов операторов здесь приводятся лишь те из них которые составляют базис работы со списками создания функциональных программ на лиспе nil встроенные символы константы лиспа обозначающие логическую истину ложь соответственно значения nil возвращаются логическими операторами операторами функциями сравнения помимо этого символа nil есть ещё одно значение он может обозначать пустой список car cdr функции возвращают соответственно голову хвост списка car здесь далее примерах означает что результате вычисления левой части интерпретатор лиспа выдаёт то что находится справа car cdr cdr следует обратить внимание что последнем случае возвращается список списке хвост аргумента является списком из одного элемента который свою очередь сам является списком из двух элементов формально чистом функциональном значение головы пустого списка является неопределённым но лиспе по крайней мере большинстве диалектов принято соглашение по которому голова хвост пустого списка равны nil car nil nil cdr nil nil системные функции car cdr получили такие необычные имена по историческим причинам машина ibm на которой маккарти создавал самую первую реализацию лиспа содержала инструкции позволяющие модифицировать части машинного слова машинное слово рассматривалось как структура полями префикса декремента тега адреса функции car сокращение от contents of the address part of register содержимое адресной части регистра cdr contents of the decrement part of register содержимое декрементной части регистра получили свои названия соответствии этими полями этой реализации поля адреса декремента использовались для хранения соответственно указателей на голову хвост списка некоторых новых реализациях лиспа традиционные имена заменены на first rest англ первый остаток соответственно или дополнены этими синонимами здесь на месте звёздочки имени функции может стоять от до букв любых комбинациях то есть возможны функции cddddr cadar caddr так далее вызов такой функции эквивалентен вложенному вызову набора функций car cdr например cadar соответствует car cdr car вернёт значение необходимость подобных странных функциях связана часто повторяющейся задачей извлечь из списка определённый элемент положение которого известно cons принимает качестве аргумента голову хвост создаёт из них список или точечную пару если аргументы являются атомами cons присоединение атома списку cons добавление списка голове другого списка cons создание точечной пары из двух атомов list эта функция возвращает список своих аргументов list foo foo если аргументов нет возвращается пустой список list nil если некоторые элементы являются выражениями то сначала вычисляется их значение list list quote системный оператор quote подавляет вычисление своего аргумента если он не используется то интерпретатор лиспа получив на входе список или символ пытается его вычислить для символа возвращается его значение для списка результат вызова функции имя которой находится голове списка параметрами хвостом списка если же нужно чтобы интерпретатор не вычислял значения взял символ или список как есть нему применяют quote list quote list list quote list list list list поскольку подавление вычислений очень частая операция имеется сокращающий её запись синтаксический сахар вместо полной формы вызова quote можно просто поставить перед выражением апостроф list list list eval эта функция по сути есть интерпретатор лиспа являясь quote она вычисляет значение своего аргумента eval list list list eval list eval list возможность прямого вызова интерпретатора вкупе идентичностью структуры программы данных позволяет без каких либо ограничений порождать непосредственно исполнять системе любые программы на лиспе cond обобщённая условная конструкция имеет вид cond условие выражение условие выражение последовательно вычисляются условие условие так далее до тех пор пока очередное условиеn не окажется истинным станет иметь значение тогда будет выполнено соответствующее выражениеn его значение будет возвращено качестве значения вызова cond если истинного условия не будет найдено cond вернёт значение nil обычной практикой является ставить качестве последнего условия cond значение гарантируя тем самым что при невыполнении всех остальных условий будет вычислено последнее из выражений так создаётся аналог ветви else условных операторов императивных языков defun конструкция позволяющая определить функцию общий упрощённый формат определения следующий defun имя параметр параметр выражение выражение здесь имя имя функции соответствующий символ если его ещё нет будет создан системе его функциональный слот запишется определение функции дальнейшем интерпретатор лиспа встретив имя голове вычисляемого списка интерпретирует его как вызов данной функции перечисленными хвосте параметрами параметр так далее имена формальных параметров функции выражение выражение так далее это вычислимых выражений которых могут использоваться параметры глобальные переменные системы при вызове функции выражения вычисляются последовательно качестве значения функции будет возвращено значение вычисленное последним по порядку выражением специальные операторы позволяют управлять вычислений их помощью реализуются ветвления циклы оператор if позволяет вычислить одно из двух выражений зависимости от выполнения условия которое тоже является выражением если его результат не ложь не nil то вычисляется первый аргумент иначе второй например if nil list foo list bar всегда возвращает bar типизация лисп не требует вообще говоря явно указывать типы переменных параметров функций но это не означает что типов лиспе нет лиспе используется динамическая типизация когда тип данных относится не переменной параметру функции значению это означает что переменная может отсутствие специальных уточнений содержать значение любого типа данных причём разные моменты времени иметь значения различных типов типы значений определяются тем как эти значения создаются например выражении cons cons cons cons abc nil одном том же первом параметре одна та же функция cons получает последовательно целое число число плавающей точкой атом строку развитые современные лисп системы том числе стандартный common lisp имеют большой набор встроенных типов данных организованный иерархическую систему которой типа может быть несколько надтипов несколько подтипов корнем иерархии является встроенный тип надтип всех типов конечным типом иерархии тип nil подтип всех типов фрагмент иерархии типов языка common lisp числовые типы данных на иллюстрации справа показан фрагмент этой иерархии надтипом для значений числовых типов является number его подтипы rational float complex представляют соответственно рациональное число число плавающей запятой комплексное число первый из которых свою очередь имеет подтипы integer целое число ratio рациональная дробь второй несколько подтипов представляющих числа плавающей запятой разной степенью точности так далее типы создаваемые программистом также встраиваются данную систему поскольку не все типы значений являются легальными для всех операций применение операций некоторым значениям приводит ошибкам времени выполнения программист может либо игнорировать данную возможность что приведёт внезапной остановке программы случае появления данных типа либо воспользоваться обработкой исключений либо проверить относится ли значение которым он собирается работать например переданное функцию качестве параметра нужному типу случае несовпадения выбрать другой способ решения задачи или преобразовывать данные нужный тип когда это возможно для работы типами имеются предикат проверки типа typep функция определения типа type of для преобразования типов если оно может быть выполнено целый набор функций общая функция coerce проверка типов облегчается тем что система типов лиспе как говорилось выше является иерархической любой из подтипов совместим любым из своих надтипов например арифметические операции определены для любых комбинаций любых типов чисел поэтому для допустимости применения например сложения достаточно проверить помощью предиката typep что операнды относятся типу number defun smartplus cond and typep number typep number nil так примере выше функция smartplus возвращает сумму своих аргументов если они будут числами любых типов либо nil если хотя бы один из них окажется не числом при этом конкретный тип возвращаемого значения будет зависеть от фактических типов параметров smartplus type of smartplus integer smartplus type of smartplus single float smartplus type of smartplus ratio smartplus abc nil type of smartplus abc null использование динамической типизации не всегда удобно особенно при применении компилятора во первых отсутствие ограничений на типы которым могут относиться значения переменной или параметра снижает эффективность компиляции во вторых оно не позволяет статически во время компиляции не исполнения программы выявлять ошибки связанные нарушением согласованности типов ситуациях когда эти неудобства существенны лисп позволяет помощью специального оператора declare уточнять типы параметров переменных задавая их любой необходимой точностью можно указывать как конкретные типы например ratio или short float так надтипы любой степени общности например number парадигмы лиспе лисп изначально проектировался как функциональный язык отдельными императивными чертами введёнными из соображений удобства практического использования однако выбранный формализм набор примитивов на которых базируется язык дали возможность расширения его самых различных направлениях за десятилетия эксплуатации развития языка он вобрал себя практически все существующие методологии на настоящий момент может считаться одним из мощнейших языков высокого уровня функциональное функциональная парадигма является для лиспа родной поскольку основой архитектуры его является лямбда исчисление чёрча собственно именно лиспа началось функциональное как практическая методология разработки программного обеспечения лямбда выражения являются лиспе полноправными языковыми объектами допускающими не только вызов но присваивание сохранение качестве значения символа передачу качестве параметра вызова возврат качестве результата таким образом лисп поддерживает функционалы то есть функции принимающие качестве параметров возвращающие результате другие функции разных диалектах лиспа подход характеру функций как языковых объектов несколько различается common lisp функция лямбда выражение представляют собой отдельную категорию программных объектов для которых существуют специфические правила ограничения частности это выражается том что символа имеются раздельные слоты для значения для функции связанной этим символом этом смысле функция это не вполне то же самое что элемент данных других диалектах таких как lisp или scheme функции являются так называемыми полноправными гражданами могут без ограничений присваиваться переменным передаваться качестве параметров вызова возвращаться как результаты вызова современный стандарт лиспа common lisp вызывает нарекания сторонников чистого функционального тем что не все его функциональные средства являются теоретически чистыми это действительно так поскольку common lisp разрабатывался как универсальный промышленный язык ряде случаев соображениям практической сознательно отдавалось предпочтение перед соображениями теоретической чистоты тем не менее лисп был остаётся функциональным языком императивное операторное исходно синтаксис лиспа заложена возможность описания алгоритмов путём перечисления требуемых действий она заключается так называемом неявном progn поддерживаемом структуре лямбда вызовов лиспа том месте где должна размещаться команда составляющая основу лямбда выражения может быть записано не одна несколько команд результатом лямбда вызова станет результат последней из них таким образом лисп поддерживает неявное исполнение операций помимо неявного progn поддерживаются явные императивные механизмы императивного конструкции prog progn обеспечивают выполнение команд последовательно let позволяет задать локальные переменные блока выполнить ними операции все виды циклов конструкции присваивания set setf setq выполняющие присваивания ряд системных функций выполняющих операции данными на том же месте common lisp особое место занимает системный макрос loop он позволяет создать лисп программе фрагмент написанный на языке привычной императивной структурой инфиксной записью операторов простейшим средством доступным любой реализации лиспа является возможность вызова интерпретатора функции eval передачей ему любой списочной структуры качестве программы это позволяет программе верхнего уровня выступить качестве макрогенератора то есть сформировать исполняемый код который будет впоследствии исполнен например defun назвать name lv eval cons defun cons name cdr lv назвать сложить lambda сложить здесь функция назвать конструирует определение новой функции из переданного ей имени лямбда выражения после чего выполняет это определение помощью eval результате новая функция данном примере это функция сложить появляется системе может быть вызвана обычным образом однако эта возможность используется редко из за своей громоздкости гораздо чаще используется система макросов современные варианты лиспа том числе стандарт common lisp обладают развитыми возможностями создания использования макросов описание макроса лиспе синтаксически подобно описанию функции разница состоит только использовании ключевого слова defmacro вместо defun описании но поведение макроса существенно отличается каждый вызов макроса раскрывается момент трансляции программы порождая код который на этапе исполнения выполняется так как будто был непосредственно написан месте вызова ещё одним отличием макросов от обычных функций является то что их аргументы по умолчанию не вычисляются реализация примера виде макроса могла бы выглядеть так defmacro назвать name lv cons defun cons name cdr lv назвать сложить lambda сложить видимых отличий два определении макроса отсутствует вызов eval его вызове не используются апострофы перед параметрами так как параметры макросов не вычисляются но гораздо более важно другое отличие если первом примере построение новой функции происходит во время выполнения программы то раскрытие макроса выполняется при трансляции программы так что компилятор получает возможность обработать функцию сложить синтаксические ошибки формирования функций макросах также обнаруживаются не при выполнении программы ещё на этапе трансляции кроме того ряд реализаций лиспа поддерживает создание так называемых макросов чтения макросов непосредственно преобразующих текст программы макросы позволяют прозрачно определять новые языковые конструкции даже дополнять синтаксис языка последняя возможность активно используется при реализации на лиспе исходно не поддерживаемых нём методов средств объектно ориентированное лисп создавался не как объектно ориентированный язык сама парадигма объектно была разработана на полтора десятка лет позже лиспа тем не менее когда она появилась стала популярной объектные возможности были добавлены этот язык набор базовых возможностей лиспа делает добавление него объектно ориентированной подсистемы не только возможным но простым благодаря наличию свойств слотов символов лисп изначально поддерживает инкапсуляцию функциональные свойства лиспа поддержка функционалов присваивание функций переменным сохранение их свойствах символов дают возможность связывать код методы данными объектами наконец динамический характер языка сочетании особенностями обеспечивает полиморфное поведение кода данных программе единственный компонент ооп системы которого нет базовом лиспе наследование но оно может быть реализовано без затруднений таким образом лисп содержит себе все элементы на которых базируется технология ооп реализация её поддержки языке сводится созданию соответствующих синтаксических элементов благодаря развитому механизму макросов они могут быть добавлены средствами самого языка без необходимости расширения базового синтаксиса модификации трансляторов простой элегантный пример создания собственной подсистемы ооп лиспе можно найти книге пола грэма ansi common lisp среди промышленных известных объектно ориентированных расширений лиспа прежде всего следует назвать объектную подсистему flavors которая была включена состав системы зеталисп эта подсистема обеспечивала объявление классов flavors ароматов единичное множественное наследование полиморфные методы классов smaltalk подобную систему взаимодействия объектов путём передачи сообщений реализованную как вызов методов объекта другим примером может служить loops lisp object oriented programming system объектная подсистема реализованная году диалекте интерлисп объектная система clos common lisp object system первоначально созданная дополнение common lisp позже вошедшая стандарт языка подобна flavors поддерживает принципиально тот же набор возможностей стандартный для почти любого современного объектно языка применение объектно лиспе основном связано решением задач моделирования или управления которые по своему характеру удачно совмещаются объектно ориентированной технологией например одним из первых приложений системы flavors было взаимодействие многооконным интерфейсом пользователя который как раз удобно моделировать виде набора объектов обменивающихся сообщениями история предпосылки автором лиспа является джон маккарти на период создания языка работавший массачусетском технологическом институте mit должности профессора по связи вместе марвином мински он занимался работами по искусственному интеллекту связи чем возникла потребность создании языка адекватного задачам решаемым этой области работа по созданию языка была проделана маккарти mit период по год после чего он перешёл стенфордский университет калифорнии где получил должность профессор по искусственному интеллекту основой для лиспа послужил ранний язык ipl разработанный ньюэллом шоу саймоном ipl был языком обработки списков предназначался для реализации проекта логик теоретик системы искусственного интеллекта предназначенной для автоматического вывода теорем математической логики ipl был довольно низкоуровневым языком но нём уже были реализованы такие базовые идеи как единый механизм хранения программ данных виде списков иерархических структур элементов связанных ссылками сама идея списочного представления знаний была позаимствована из исследований по психологии ассоциативной памяти также идея динамического распределения памяти после ознакомления году ipl маккарти появилась идея реализовать обработку ipl списков фортране который как раз это время проектировался ibm причём под ту же систему ibm которой маккарти работал mit но эта идея так не была реализована позже маккарти принял участие работе комитета по языку высокого уровня алгол но там его предложения были встречены холодно результате маккарти пришёл мысли необходимости создания нового языка первоначально маккарти сформулировал списочный формализм для описания данных выражения основанный на нём же механизм описания лямбда выражений что позволило записывать программы виде наборов функций представленных списочной форме как писал позже маккарти изначально он планировал применять для записи программ отдельный формализм отличающийся от выражений но это оказалось излишним когда помощью своей списочной записи маккарти описал алгоритм интерпретатора нового языка формализм который впоследствии стал известен как лисп на лиспе стив рассел заметил что теперь для создания реального работающего интерпретатора достаточно просто перевести эту запись машинный код маккарти отнёсся этой идее скептически но рассел действительно проделал данную работу получил первый интерпретатор лиспа для компьютера ibm дальнейшем идея написания транслятора языка на нём самом многократно использовалась не только функциональных логических языках но императивных первые реализации исторически первой реализацией лиспа включающей все современные базовые элементы языка был интерпретатор работавший на ibm появившийся октябре года это кстати позволяет говорить лиспе как об одном из двух старейших языков высокого уровня которые находятся употреблении момента создания до настоящего времени первый фортран помимо этого лисп сохранил первенство ещё одном отношении дело том что активная работа динамическими списками сделала невозможным ручное управление памятью которое императивных языках отчасти сохраняется по сей день создание новых списочных ячеек списков выход из использования имеющихся при работе лисп программы происходят настолько активно что практически невозможно обойтись без системы автоматического управления памятью которая контролировала бы использование ранее созданных памяти объектов периодически удаляла те из них использование которых прекратилось то есть системы сборки мусора маккарти пришлось реализовать эту систему благодаря чему лисп помимо прочего является ещё самым старым из применяемых сегодня языков автоматическим управлением памятью сборкой мусора позднее были созданы реализации для ibm дальнейшем для серий ibm компьютеры ibm оказались неудобны для работы интерактивном режиме вследствие чего конце годов небольшая группа разработчиков том числе работавших ранее ibm выделилась самостоятельную компанию digital equipment corporation dec первым её изделием стал компьютер pdp изначально ориентированный на интерактивный режим работы на этой машине году была реализована интерактивная система lisp включающая себя интегрированные интерпретатор редактор исходного кода отладчик позволявшая выполнять весь цикл работ над программой непосредственно системе по сути это была первая среда том смысле который вкладывается это понятие сейчас тогда же журнале communications of acm вышла статья маккарти recursive functions of symbolic expressions and their computation by machine которой лисп был описан виде алгебраического формализма на самом лиспе статья стала классической формализм типа лисп на лиспе тех пор стал одним из наиболее употребимых литературе по теории ещё одним технологическим новшеством появившимся связи реализацией системы lisp был изобретённый маккарти механизм позволявший запускать интерпретатор лиспа одновременно выполнением обычных вычислительных работ пакетном режиме то что сейчас известно как система разделения времени году была готова следующая версия оригинальной лисп системы lisp которой были устранены обнаруженные за время эксплуатации недостатки первой версии её описание было выпущено издательстве mit press виде отдельной книги поскольку руководство включало описание реализации системы оно стало основой для создания лисп систем для множества других компьютеров как сша так за её пределами диалекты годов несмотря на использование подчас весьма активное лиспа европейских азиатских странах создание там собственных лисп систем большинство диалектов лиспа происходят из сша maclisp начала годов mit был запущен проект mac рамках которого на основе lisp был разработан maclisp далее маклисп ориентированная основном на компьютеры pdp маклисп был чрезвычайно мощной для своего времени системой отличался высокой вычислительной эффективностью широким набором математических типов данных том числе векторов матриц битовых полей части вклада развитие самого языка можно отметить появившиеся маклиспе макросы чтения таблицы чтения позволившие достраивать язык расширяя его нужном направлении новыми структурами также язык были включены средства обработки исключений средства параллельной обработки также маклисп стал первой лисп системой для которой был реализован компилятор на маклиспе была целиком написана система компьютерной алгебры macsyma разработка которой была начата рамках проекта mac году macsyma течение многих лет оставалась наиболее развитой системой такого типа несколько диалектов лиспа были созданы специально для того чтобы выполнить перенос macsyma на другие платформы другим очень известным находящимся употреблении до сих пор программным продуктом изначально разработанным на маклиспе является полноэкранный текстовый редактор emacs система mac lisp развивалась вплоть до годов оказав существенное влияние на появлявшиеся годах реализации лиспа том числе став одним из источников проектирования стандарта common lisp эксплуатация системы практически прекратилась годах вместе прекращением использования компьютеров pdp на которых она изначально базировалась намного пережили систему разработанные на маклиспе уже упоминавшиеся macsyma emacs interlisp разработкой лисп систем середине годов занимались многие компании центры сша интерлисп interlisp стал результатом объединения усилий bbn bolt beranek and newman inc sds scientific data systems xerox центр bbn году приступил созданию своей реализации лиспа ориентированной на компьютеры pdp sds версия bbn lisp для pdp использовала аппаратный механизм страничной организации памяти переключения контекста созданный специально для обеспечения разделения времени bbn lisp стал популярен среди исследователей области искусственного интеллекта во многом способствовал тому что именно машины pdp вплоть до годов оставались основными инструментами работах по ии начале корпорация xerox купила обанкротившуюся sds начала сотрудничать bbn несмотря на то что машины sds не имели большого коммерческого успеха реализация лиспа от bbn была достаточно перспективной чтобы xerox поддержала её дальнейшую разработку результате чего bbn lisp превратился interlisp интерлисп году xerox началась разработка персональной рабочей станции alto исходно ориентированной на лисп этой системе впервые была произведена разработка аппаратуры системы машинных команд под конкретный язык на основе интерлиспа была создана упрощённая версия системы interlisp предназначенная для лисп машин серии потомков станции alto этих машинах был впервые реализован многооконный графический интерфейс пользователя использована графика высокой разрешающей способностью применён манипулятор мышь интерлисп был тщательно разработанной хорошо системой он представлял собой хорошо продуманную интегрированную среду разработки редактором исходных кодов отладчиком интерпретатором множеством вспомогательных инструментов разработчика этом смысле его можно считать классическим примером развитой программной среды для систем разделения времени системных библиотеках было реализовано свыше функций система имела большое количество настроек позволявших подогнать её под пользователя реализации интерлиспа со временем были выполнены на большинстве широко больших компьютеров работавших режиме разделения времени что же касается собственно языка то можно заметить что диалект со всеми его характерными особенностями был зафиксирован уже середине конце годов после чего кардинальных изменений язык не вносилось это привело некоторому отставанию системы от более новых разработок части фиксации некоторых устаревших проектных решений вследствие этого уже началу интерлисп испытывал трудности как совместимостью новыми системами так дальнейшим расширением наиболее существенные недостатки интерлиспа отсутствие иерархии типов данных объектов замыканий впрочем году интерлиспе была реализована объектная система loops дающая возможности объектно более существенно то что интерлисп базируется на динамическом связывании тогда как все новые версии лиспа статические psl лисп попал калифорнию вместе маккарти перешедшим стенфорд году за следующие несколько лет были разработаны системы lisp прямой потомок классического lisp uci lisp university of california irvine stanford lisp оттуда вместе энтони хёрном лисп попал университет штата юта где занималась исследованиями области символьной математики приложениях теоретической физики хёрн предложил решать эти задачи помощью лиспа результате чего году была создана система компьютерной алгебры reduce хёрн году опубликовал спецификацию standard lisp которую предлагал качестве основы для стандартизации языка предложение его не встретило поддержки так как не было одобрено исследователями искусственного интеллекта указавшими на ряд нежелательных для них особенностей предлагаемого стандарта частности излишнюю привязку типам тем не менее на основе данной спецификации юте был реализован portable standard lisp psl эта реализация была использована для развития reduce переноса её на различные аппаратные платформы специально для улучшения переносимости psl был включён сокращённый набор системных функций структур реализация была основана на промежуточном низкоуровневом лисп подобном языке syslisp ядро psl было написано на syslisp вся остальная часть системы на самом psl для pdp был реализован транслятор syslisp написанный на том же syslisp кросс компилятор помощью которого ядро psl можно было перенести на любую другую аппаратуру помощью этой технологии psl reduce были реализованы на целом ряде платформ том числе на dec vax unix hp apollo wicat ibm cray таким образом psl стал одним из первых примеров реализации техники раскрутки при переносе программных систем на новую архитектуру когда для переноса системы ядро изначально пишется на машинно независимом промежуточном языке для которого свою очередь создаются реализации на всех целевых платформах дальнейшее сопровождение psl осуществлялось центром фирмы hewlett packard калифорнии franz lisp мотивом для создания конце годов системы franz lisp послужило желание получить лисп систему для новых компьютеров vax чтобы обеспечить выполнение на них системы macsyma другого написанного на лиспе программного обеспечения поскольку основной целью был перенос macsyma за основу был взят maclisp однако из языка были исключены некоторые устаревшие особенности добавлены новые механизмы заимствованные из то время том же mit zetalisp наиболее значительный вклад создание данного диалекта внесли университет беркли университет пенсильвания bell labs ливерморская национальная лаборатория университет карнеги меллона одним из основных вдохновителей проекта был профессор университета беркли ричард фэйтман ранее работавший mit участвовавший разработке оригинальной системы macsyma числе создателей franz lisp было несколько его учеников название системы было выбрано честь известного венгерского композитора ференца листа английское написание franz liszt система была реализована году на для vax под управлением ос unix входящий состав системы компилятор носил имя liszt фамилии композитора давшего имя диалекту году система была портирована на процессор motorola затем ещё на ряд разрядных персональных платформ результате она стала наиболее широко используемой версией лиспа как для разрядных систем разделением времени так для битовых мини эвм персональных рабочих станций система franz lisp бесплатно под лицензией bsd но аспирант университета беркли фридрих кунце подал идею создания коммерческой компании которая бы обеспечивала качественную платную поддержку пользователей выполняла заказы по портированию franz lisp на новые аппаратные программные платформы это было время активного роста компьютерного рынка перспективы выглядели неплохо компания была году получила название franz inc начало деятельности фирмы было достаточно удачным ей удалось получить контракт на портирование franz lisp на платформу sun позже ещё несколько аналогичных предложений однако году под давлением министерства обороны сша американское лисп сообщество начало активную переориентацию на новый диалект common lisp создание которого это время завершалось этих условиях franz inc не могла найти новых контрактов оказалась на грани закрытия была вынуждена перейти разработке собственной реализации common lisp allegro common lisp название было выбрано чтобы сохранить преемственность музыкальной темы история franz lisp на этом фактически завершилась настоящее время оригинальная система полностью вышла из употребления scheme язык scheme был разработан году mit рамках проекта по созданию лисп машины персональной рабочей станции разработанной полностью начиная аппаратуры расчёте на максимально эффективное использование языка лисп исходно scheme был всего лишь языком ходе разработки которого опробовались различные идеи методы ставилась цель реализовать минимальный набор базовых возможностей который обеспечивал бы построение полноценной лисп системы путём надстраивания этого набора результате получилось небольшое по объёму элегантно определённое ядро при этом весьма эффективно реализованное частности scheme стал первым диалектом лиспа котором гарантировалась оптимизация хвостовой рекурсии языке реализован мощный механизм макросов помимо списков качестве базовых конструкций поддерживаются массивы характерное синтаксическое отличие scheme от большинства диалектов лиспа немного другая форма определения функции если большинстве диалектов используется вариант defun имяфункции аргументы выражения то scheme сокращённая форма определения выглядит как define имяфункции аргументы выражения различается ключевое слово взаимное расположение имени функции аргументов scheme использует динамическое связывание реализует единое пространство имён для функций переменных что отличает его от common lisp scheme единственный старый диалект лиспа который продолжает использоваться после повсеместного перехода лисп сообщества на common lisp настоящее время существует несколько поддерживаемых реализаций scheme том числе свободных есть примеры использования этого языка качестве встроенного например используемый качестве средства создания скриптов gimp tiny scheme нескольких американских университетах scheme используется как язык для базового обучения zetalisp zetalisp или lisp machine lisp был создан mit во второй половине годов рамках проекта лисп машины американским оборонным агентством darpa со стороны собственно языка зеталисп был основан на маклиспе редакторе emacs но существенно обновлён дополнен частности нём появились новые типы данных объектно ориентированная подсистема flavors на которой основано взаимодействие программ многооконным интерфейсом пользователя новые директивные управляющие конструкции частично заимствованные из интерлиспа многозначные функции способные штатным образом возвращать более одного значения без предварительной сборки их контейнер потоковый ввод вывод пространства имён мощная библиотека функций том числе математических обеспечивающих векторные матричные вычисления работу линейными системами гораздо больше новшеств было внесено саму систему система изначально рассчитывалась на работу графическим терминалом мышью ней был реализован графический многооконный интерфейс пользователя состав системы входил многооконный интерпретатор лиспа частичный транслятор текстовый редактор zmacs инспектор структур данных отладчик программа исследования состояния системы редактор системных файлов редактор шрифтов клиент электронной почты zmail состав системы входили трансляторы других языков высокого уровня преобразователь обеспечивающий поддержку программ на интерлиспе набор инструментов более высокого уровня для фортрана паскаля ады пролога поставлявшихся составе системы имелись развитые средства взаимодействия программами на лиспе что позволяло случае необходимости разрабатывать применять программные системы на нескольких языках изначально проект имел целью создание коммерческого продукта году было создано два предприятия производителя лисп машин symbolics lisp machine inc lmi после этого работа по развитию зеталиспа велась этими фирмами независимо тем не менее при наличии некоторых различий самих лисп машинах части языка они были почти полностью совместимы nil реализация maclisp на машине vax самом mit была начата году проект получил название nil одновременно аббревиатура new implementation of lisp новая реализация лиспа стандартный лисповский атом nil обозначающий зависимости от использования логическую не истинность или пустой список nil имел довольно большое ядро написанное на ассемблере vax на котором всё тем же методом раскрутки строилась лисп система какой то мере можно считать nil ответом на franz lisp поскольку качестве одной из целей проекта был назван всё тот же перенос на vax системы macsyma nil много позаимствовал зеталиспа том числе систему flavors превращающую лисп систему объектно ориентированную году группа занимавшаяся проектом nil распалась из за непримиримых разногласий отношении идеологии создаваемой системы несмотря на распад начиная года выходили регулярные обновления системы она получила достаточно заметное распространение годы nil нередко использовался организациях имевших как vax так лисп машины поскольку принципиальных идеологических отличий между nil zetalisp нет хотя zetalisp намного богаче возможностями отделившаяся от проекта nil группа разработчиков приступила созданию собственной версии лисп системы которая получила ироничное имя одновременно от true lisp настоящий истинный лисп ещё один стандартный лисповский атом обозначающий логическую истинность то есть nil разработка этого диалекта велась йельском университете годы отличие от старых систем диалект использовал по умолчанию статическое связывание переменных кроме того его создатели ввели реализацию функций как полноправных граждан что означает что функции могут без специальных синтаксических средств без ограничений присваиваться переменным возвращаться качестве значений других функций lisp отличие от nil имел довольно небольшое ядро написанное на машинном языке разработчики использовали технику раскрутки перенося ядро вручную на новые платформы реализуя остальную часть системы непосредственно на лиспе рассчитывая что транслятор обеспечит лучшую конечной системы чем ручная реализация крупного ядра на машинном языке спорным моментом lisp стало решение авторов обновить имена системных функций так например имена всех без исключения предикатов оканчивались на вопросительный знак исторически сложившиеся стандартные имена элементарных функций были заменены на мнемонические соответствующие тому что функция делает например функции car cdr возвращающие соответственно голову хвост списка получили имена first rest англ первый остаток безусловным плюсом такого решения было облегчение изучения очевидным минусом стала несовместимость со всеми остальными диалектами языка результате создателям всё равно пришлось впоследствии дополнить систему набором макросов приводящих систему имён соответствие со стандартом common lisp безусловно значительное влияние которое на оказал диалект scheme целом же lisp получился достаточно простой элегантной мобильной системой которая была реализована для vax перенесена на многие битовые рабочие станции создание common lisp первой половине годов лисп сообществе сложилась ситуация которую некоторые авторы сравнивали вавилонской башней параллельно существовали развивались более десятка крупных диалектов лиспа общее же число несовместимых между собой реализаций было существенно больше похожая ситуация наблюдалась это время большинстве языков случае же лиспом ситуация усугублялась тем что язык изначально был разработан как произвольно расширяемый что спровоцировало развитие его возможностей разных диалектах существенно разных направлениях если на начальном этапе когда лисп использовался почти исключительно лабораториях институтах многообразие диалектов не особенно мешало даже было отчасти полезным поскольку способствовало быстрому развитию языка то годам когда появилась потребность промышленных разработках на лиспе обилие реализаций стало тормозом поскольку приводило массовому дублированию разработок рассредоточению сил на поддержку множества лисп систем попытки стандартизации лиспа предпринимались почти момента его появления первое предложение по стандартизации датируется годом но из за разобщённости значительных различий потребностях групп разработчиков ни одно из предложений не было принято во второй половине годов министерство обороны сша провело огромную работу по анализу ситуации программных разработках военного назначения после чего организовало конкурс на разработку нового языка высокого уровня для встроенных систем которым стал язык ада однако ада изначально не предназначалась для искусственного интеллекта символьной обработки вследствие чего для таких разработок военное ведомство сша оказалось вынуждено допустить использованию более подходящий язык поэтому министерство обороны сша оказало организационную финансовую поддержку формированию промышленного стандарта языка лисп который приняло качестве дополнительного средства разработки по для военных применений первоначальный вариант стандарта начали готовить университете карнеги меллона на основе внутреннего проекта spice lisp также первоначально нацеленного на разработку лисп системы для рабочей станции проектируемый стандарт самого начала получил наименование common lisp общий лисп подчёркивающее цель разработки получить единый базовый язык на основании которого можно было бы создавать программно совместимые системы разработке редактировании стандарта приняли участие около специалистов из университетов лабораторий фирм сша процесс разработки впервые происходил дистанционно через компьютерную сеть arpanet через которую было передано свыше сообщений процесс разработки стандарта завершился году его результат был зафиксирован первом издании руководства common lisp the language гая стила новые диалекты появление common lisp затормозило создание новых диалектов языка старые диалекты продолжали существовать но по мере выхода из употребления платформ на которых они работали переставали использоваться соответствующие лисп системы большинство из них прекратили своё существование годах новые разработки производились уже на common lisp тем не менее последующие годы появилось несколько новых диалектов лиспа большинство из которых шли по пути упрощения ориентировались на микрокомпьютеры islisp islisp это спецификация лиспа разработанная опубликованная iso году iso iec спецификация была обновлена году iso iec islisp представляет собой попытку стандартизовать ядро лиспа путём консолидации существовавших на момент его создания промышленных диалектов лиспа диалект во многом похож на common lisp лексическая область видимости раздельные пространства имён для функций переменных достаточно мощная система типов данных поддержка сложных типов макросистема объектная система но меньше по объёму на год существует около десятка основных реализаций islisp выпускаемых преимущественно под проприетарными лицензиями openlisp диалект созданный кристианом джулиеном году первоначально назывался mlisp году был переименован openlisp полностью соответствует спецификации islisp см выше дополнительно реализует ряд отсутствующих данном стандарте средств возможна интерактивная разработка repl среде emacs кроме интерпретатора система содержит компилятор преобразующий исходный код lap lisp asssembly program ассемблеро подобный низкоуровневый код формате лисповских списков генератор кода компилирующий lap программу исходный текст на языке си много внимания уделено взаимодействию кодом на языках java поддержке встраивания программные системы качестве интерпретатора встроенного языка система продолжает развиваться поддерживаться существуют версии для большинства доступных ос аппаратных платформ picolisp picolisp свободная реализация лиспа рассчитанная на использование linux других posix системах проект появился конце годов его целью было создание минималистичной при этом практичной лисп системы для персональных компьютеров со стороны языка picolisp отличается регистро зависимостью поддержкой utf предельной простотой ядро поддерживает лишь три типа данных числа строки списки введены синтаксические средства позволяющие управлять вычислимостью параметров форма quote расширена на неопределённое число параметров такое решение исключило необходимость специальном синтаксисе для макросов выражении lambda не поддерживаются структуры массивы имеется экономно выполненная но мощная объектная подсистема отличие от common lisp язык применяет динамическое связывание параметров среда picolisp не имеет компилятора это принципиальное решение за счёт которого произведены многие упрощения языке но включает встроенные сервер приложений базу данных реализован прямой вызов внешних функций написанных на си также взаимодействие кодом на java диалект продолжает развиваться регулярно выходят новые версии среды для нескольких платформ eulisp диалект разрабатываемый года сообществом европейских разработчиков пользователей лиспа из академической промышленной среды может рассматриваться как своеобразный ответ европы на common lisp альтернативная попытка создать пригодный для широкого круга задач единый диалект лиспа целью проекта было создание эффективного компактного не обременённого лисповским прошлым языка одной из приоритетных задач разработке этого проекта было добавление лисп объектно ориентированных средств диалект поддерживает определение модулей лексической областью видимости замыкания динамическим связыванием единое пространство имён для переменных функций как scheme встроенную поддержку параллелизма объектную систему единичным множественным наследованием особенностью проекта является разделение языка на два уровня level level некоторые возможности доступны только на уровне например множественное наследование метаобъекты последняя официальная спецификация версия вышла году её неофициальная переработка версия году первый интерпретатор вышел году годах было создано несколько реализаций развитие которых прекратилось году newlisp разработанный году лутцем мюллером диалект предназначенный для использования качестве скриптового языка изначально разработан для рабочих станций sun под sunos freebsd настоящее время доступен на разрядных платформах intel под freebsd linux windows также на платформе mac отличается простотой малым объёмом динамической областью видимости переменных имеет ряд отличий синтаксисе поддерживает объектную систему foop средства межпроцессного взаимодействия многое другое среда включает интерпретатор мини ide редактором кода эмулятором терминала для интерактивной разработки библиотеки для веб разработки работы по сети через протоколы tcp udp racket разрабатываемый года компанией plt inc диалект первоначально носивший имя plt scheme является потомком диалекта scheme но существенно расширяет его одной из целей создания racket было получение платформы для разработки реализации предметно ориентированных языков характерной его особенностью является очень мощная макросистема которая позволяет создавать новые синтаксические конструкции даже языки при этом система модулей обеспечивает использование единой программе элементов написанных на различных диалектах различной семантикой реализация включает компилятор систему времени выполнения jit компилятор интегрированную среду разработки набором инструментов библиотеки ide drracket написанная на самом racket содержит профайлер отладчик систему юнит тестирования доступны библиотеки поддерживающие системное сетевое веб разработку единый интерфейс операционной системе интерфейс для вызова внешних функций несколько вариантов регулярных выражений генераторы программ лексического грамматического разбора средства логического развитый графический интерфейс пользователя платформа реализована для windows macos linux других вариантов unix она как бесплатное по открытым кодом под лицензией gnu lesser general public license lgpl поддерживается репозиторий для пакетов расширений созданных сообществом используется качестве основном как платформа для разработки языков инструментов учебного скриптового промышленного языка частности для разработки видеоигр учебном курсе bootstrap racket применяется концепции обучение путём кодирования игр arc arc диалект созданный полом грэмом заявленная автором цель проекта создание простой построенной на минимальном наборе экономно определённых сущностей лисп системы набором практически полезных библиотек ориентированной на применение допускающей эффективные лисп хаки различные вычислительные трюки основанные на особенностях лиспа автор принципиально отказался от поддержки arc некоторых технологий частности ооп так как счёл что они нужны только при ведении разработки рамках крупных организаций сами по себе не дают реального полезного эффекта разработка была анонсирована году первая публичная версия появилась первая реализация языка была написана среде racket года оригинальная система практически перестала разрабатываться сейчас развитие arc продолжается нескольких форках диалекты для других сред последние десятилетия широко языки использующие автоматическое управление памятью компиляцию промежуточный код исполнение его виртуальной машине такие как java python другие было создано несколько диалектов лиспа ориентированных на исполнение динамических средах других языков эти диалекты получают возможность напрямую работать библиотеками соответствующей языковой среды программами на других языках исполняемыми той же среде среди них clojure scheme подобный язык предназначенный для исполнения под jvm kawa ещё один вариант реализации scheme для jvm hy или hylang диалект работающий под управлением среды исполнения языка python lfe lisp flavored erlang диалект лиспа написанный на erlang исполняемый под его виртуальной машиной beam стандарт common lisp основные особенности основном на идеологические основы стандарта повлияли maclisp его диалекты большое количество возможностей было заимствовано из interlisp новых систем таких как zetalisp nil common lisp язык со статическим связыванием переменных традиционным представлением функций функции не являются полноправными гражданами поддерживает макросы функционалы лексические замыкания то есть точки зрения функциональной части языка он содержит весь тот набор синтаксических средств который за предыдущие четверть века сложился лиспе достаточен для любых приложений функционального расширения языка любом желаемом направлении системные функции common lisp сохранили традиционные имена но многие из них имеют синонимы более наглядными именами например функции car получение головы списка cdr получение хвоста списка имеют синонимы соответственно first первый rest остаток поскольку ставилась цель разработки системы пригодной для максимально широкого спектра применений спецификация существенно расширена функциями синтаксическими средствами механизмами нехарактерными для исходного лиспа так например язык добавлены практически все существующие императивных языках синтаксические конструкции включая несколько видов циклов объектная система clos common lisp object system первоначально не была включена стандарт но вошла него позже common lisp пригоден для написания программ как функциональном так директивном стиле на нём возможно обобщённое посредством стандартных макросов продукционное имеются средства для организации логического объектного управляемого данными спецификация не включает себя подробного описания среды определяя лишь самых общих чертах её состав принципы взаимодействия элементов критики нового стандарта указывали на его раздутость чрезмерное внимание уделённое практическим требованиям что привело нарушению функциональной чистоты лиспа увеличению объёма лисп системы тем не менее под нажимом министерства обороны сша частично его финансовой поддержкой во второй половине годов были созданы common lisp реализации практически для всех платформ дальнейшие модификации серьёзный пересмотр вышедшего году стандарта состоялся году объектная система clos исходно не входившая спецификацию common lisp считавшаяся неким дополнением ней стала частью официального стандарта был стандартизован макрос loop реализующий встроенный императивный язык инфиксным синтаксисом внесены изменения типы данных стандартизован механизм pretty print вывода кода данных введены макросы компиляции добавлены новые операторы внесены изменения существующие обновлена система поддержки пакетов сделан ряд более мелких изменений году common lisp был стандартизован ansi стандарт практически повторил спецификацию года изменения незначительны состоят основном добавлении удалении переименовании операторов системных переменных изменениях системных вызовах можно отметить появление common lisp типа boolean логического значениями которого могут быть только nil примеры пример программы выводящей сообщение hello world format hello world два варианта куайн программы выводящей свой исходный код на лиспе lambda list list quote quote lambda list list quote lambda list list quote lambda list list quote оба варианта будут работать на большинстве диалектов лиспа том числе на scheme какой из вариантов окажется точнее зависит от реализации лисп системы одних при выводе списочного значения для отображения блокировки вычисления функция quote выводится виде полного имени для них подойдёт первый вариант других виде апострофа второй вариант итеративная версия функции определения го числа фибоначчи использованием макроса loop defun fibonacci loop repeat for then and for then finally return рекурсивная версия функции го числа фибоначчи defun fibonacci if fibonacci fibonacci рекурсивная функция вычисления произвольной целой степени алгоритм временем выполнения глубиной рекурсии defun power cond minusp power zerop evenp power power здесь использованы системные предикаты zerop проверка на равенство нулю minusp проверка на отрицательность evenp проверка на чётность временная шкала диалектов лиспа применение сферы применения языка лисп многообразны наука промышленность образование медицина от декодирования генома человека до системы проектирования авиалайнеров первые области применения языка лисп были связаны символьной обработкой данных процессами принятия решений наиболее популярный сегодня диалект common lisp является универсальным языком он широко используется самых разных проектах интернет серверы службы серверы приложений клиенты реляционными объектными базами данных научные расчёты игровые программы существуют диалекты лиспа предназначенные для конкретных применений например game oriented assembly lisp goal создан для написания трёхмерных игр на нём целиком написана серия игр jak and daxter одно из направлений применения языка lisp его использование качестве скриптового языка работу ряде прикладных программ том числе autolisp скриптовый язык сапр autocad emacs lisp встроенный язык текстового редактора emacs использованный как реализации самого редактора так разработке дополнений нему что даёт неограниченные возможности расширения interleaf lisp скриптовый язык издательском программном обеспечении interleaf quicksilver nyquist скриптовый язык аудиоредакторе audacity rep близок emacs lisp язык настроек расширений оконном менеджере sawfish skill скриптовый язык сапр virtuoso platform компании cadence design systems tinyscheme один из скриптовых языков свободном графическом процессоре gimp версии или более предыдущих версиях использовался ещё один диалект лиспа siod icad система знаний на основе знаний которая позволяет пользователям кодировать знания дизайна опыт инженерного проектирования языки потомки случае лиспа сложно провести чёткую грань между диалектом языком потомком так как различные диалекты лиспа созданные за более чем полвека его существования могут существенно различаться быть несовместимыми другой стороны лисп просто силу возраста оказал то или иное влияние на огромное число языков причём не только функциональных если считать прямыми потомками лиспа только языки сохранившие общую структуру программы но синтаксически несовместимые лиспом то можно выделить scheme разработанный вариант лиспа по сей день используемый обучении целях также применяемый качестве встраиваемого языка racket потомок scheme разрабатываемый года находящийся использовании по сей день мощная расширяемая лисп система включающая себя все современные средства поддержки большой массив библиотек clojure созданный году на основе лиспа язык функционального интегрированный платформой java программы транслируются байт код работают под управлением jvm унаследовав основные черты лиспа язык имеет целый ряд синтаксических отличий нововведений интеграция java платформой даёт возможность непосредственно применять весь массив накопленных библиотек для данной платформы также clojure имеет встроенную поддержку параллельного причём является одним из немногих языков поддерживающих механизм транзакционной памяти logo язык интерактивная среда разработанные году сеймуром пейпертом идит харель для обучения детей дошкольного младшего школьного возраста основным концепциям язык имеет лисп подобный списочный синтаксис котором устранена необходимость использования большинства скобок поддерживается также императивная форма программы напоминающая basic повторение кроме рекурсии может быть реализовано помощью конструкции цикла фиксированным числом итераций характерная особенность среды интерпретатора лого поддержка визуального агента черепашки изображаемой виде пиктограммы на графическом поле окне черепашка может двигаться поворачиваться она имеет перо которое может быть поднято или опущено при движении опущенным пером черепашка оставляет след линию на экране управляя черепашкой сначала помощью отдельных команд вперёд повернуть поднять перо опустить перо выбрать цвет затем наборов команд целых программ содержащих сложные конструкции обучаемый получает возможность осваивать игровой форме непосредственно наблюдая результаты своих усилий виде изображений на экране существуют реализации поддержкой ооп параллельного исполнения лисп машины начале годов были осознаны ограничения накладываемые системой разделения времени на пользователей интерактивных программных средств которым относятся лисп системы большинство написанных на лиспе программ кроме того для лиспа оказались относительно велики затраты на программную динамическую поддержку включающую проверку типов во время исполнения периодическую сборку мусора усложняющиеся программы требовали более оборудования году возникла идея разработки компьютера индивидуального пользования рабочей станции начиная оборудования специально для достижения максимально эффективного исполнения лисп программ том числе аппаратной поддержкой лямбда вычисления динамической типизации сша исследования по созданию лисп компьютера велись годах двух местах центре palo alto принадлежащем корпорации xerox mit последнее спонсировалось darpa результатом стало появление начале середине годов трёх основных производителей xerox lisp mashine inc lmi symbolics inc xerox производил лисп машины поддерживающие интерлисп две последние компании происходят из mit ориентируются на зеталисп несколько позже производством лисп машин занялась texas instruments японии году был показан первый прототип коммерческой лисп машины alpha фирмы фудзицу лисп машины имели аппаратную архитектуру ориентированную на обработку списков функциональное аппаратной поддержкой сборки мусора динамической типизации поддерживаемые этими машинами комплексы средств разработки по представляли собой мощные интегрированные среды разработки включающие себя все компоненты которые настоящее время включают наиболее мощные ide языков высокого уровня поддерживался многооконный графический интерфейс пользователя работа мышью другими дополнительными средствами трэкбол световое перо ввод вывод графики звука несмотря на изначальную лисп лисп машинах были доступны другие языки высокого уровня предоставлялись средства межъязыкового взаимодействия сами лисп системы лисп машин содержали до тысяч функций различного назначения обеспечивали как работу режиме так компиляцию программ объектный код для своего времени лисп машины были одними из мощнейших эвм классе персональных рабочих станций им прочили большое будущее но годах все они вышли из употребления производители либо прекратили свою деятельность либо на выпуск компьютеров общего назначения причиной стало то что условиях длительного роста скорости объёмов памяти компьютеров разработка оборудования под язык оказалась быстро развивающиеся компьютеры общего назначения снабжённые трансляторами лиспа по своим возможностям догнали обогнали лисп машины которые из за самой специализации уже оказывались дороже проигрывали универсальности лисп ссср россии ссср работы связанные использованием лиспа созданием собственных лисп систем после года когда группа американских учёных среди которых были дж маккарти беркли посетила советский союз новосибирске вц сибирского отделения академии наук где маккарти провёл больше всего времени он заложил основу реализации лиспа на бэсм москве вц ан ссср советские математики лавров силагадзе при содействии беркли начали работу над собственной версией лисп интерпретартора для бэсм впоследствии лавров перешёл на работу лгу силагадзе вц грузинской академии наук тбилиси где они продолжили работу лиспом участвовали создании нескольких лисп систем для ес эвм ленинграде была создана лисп система для польского компьютера odra москве реализация для бэсм совместимая английской версией лиспа для компьютера icl мэи дальневосточном научном центре во владивостоке появились реализации для ес эвм институте проблем передачи информации москва конце была создана лисп система эклисп для мини компьютера eclips на компьютерах западного производства ссср использовались stanford lisp ut lisp дубна ibm cdc также популярна была шведская система нордстрема лисп на фортране году тбилиси состоялась четвёртая международная конференция по проблемам искусственного интеллекта ijcai которая способствовала повышению интереса лиспу распространению его университетах нии году вышел первый учебник лиспа на русском языке лавров силагадзе автоматическая обработка данных язык лисп его реализация годы интерес лиспу ссср сохранялся тем не менее литературы по языку издавалось очень мало за десятилетие вышло две книги обе переводные функциональное применение реализация хендерсона переведённая году двухтомник мир лиспа хювёнена сеппянена перевод которой был издан после распада ссср российское it сообщество достаточно быстро перешло на использование практически исключительно западной вычислительной техники системного по на сегодняшний день невозможно назвать ни одной лисп системы российского происхождения которая находилась бы эксплуатации лисп нельзя назвать популярным или россии его использование основном ограничивается академическими исследованиями работами отдельных энтузиастов кроме того лисп продолжает использоваться учебных целях некоторых российских университетах но здесь последние годы он оказался заметно потеснён как язык общего назначения он не преподаётся не используется качестве учебных языков для преподавания функционального часто предпочитают использовать более молодые функциональные языки появившиеся последние два десятилетия тем не менее интерес языку сохраняется свидетельством чего является появление переводных оригинальных печатных работ по лиспу возобновившееся последние годы лисп фольклоре программистов существует альтернативная расшифровка названия lisp lots of irritating superfluous parentheses много раздражающих лишних скобок намёк на особенности синтаксиса языка шутливое десятое правило гринспена гласит любая достаточно сложная программа на си или фортране содержит заново написанную глючную медленную реализацию половины языка common lisp правило несмотря на свою юмористичность фиксирует достаточно широко среди сторонников функциональных языков мнение том что при на традиционных императивных языках разработчики тратят очень много времени на реализацию тех возможностей которые присущи функциональным языкам частности лиспу изначально см также newlisp примечания литература абельсон сассман структура интерпретация компьютерных программ книга курс лекций mit качестве основного языка используется scheme перевод peter seibel ссылки pcl catap ru русский перевод книги en practical common lisp cookbook русский перевод незаконченный сборника рецептов common lisp cookbook lisp ru ресурсы по языку лисп учебники статьи lisper ru сайт посвящённый common lisp написанный на самом common lisp lisp ystok ru лисп истоков литература ссылки проекты исходным кодом ссылки на английском www formal stanford edu статья джона маккарти recursive functions of symbolic expressions and their computation by machine содержащей первоначальное описание языка лисп gigamonkeys com сайт книги en practical common lisp откуда может быть скачана электронная версия pdf архив исходными кодами для книги cliki вики ресурс библиотеках проектах common lisp примечательно что сам ресурс написан полностью на common lisp common lisp net основной хостинг common lisp проектов lisp org ассоциация пользователей лисп архивы списков рассылки на gmane