стати ческая типиза ция приём широко используемый языках при котором переменная параметр подпрограммы возвращаемое значение функции связывается типом момент объявления тип не может быть изменён позже переменная или параметр будут принимать функция возвращать значения только этого типа примеры статически типизированных языков ада java ml паскаль nim противоположный приём динамическая типизация некоторые статически типизированные языки позже получили возможность также использовать динамическую типизацию при помощи специальных подсистем например variant delphi пакеты aliceml data dynamic haskell преимущества статическая типизация даёт самый простой машинный код поэтому она удобна для языков дающих исполняемые файлы ос или jit компилируемые промежуточные коды многие ошибки исключаются уже на стадии компиляции поэтому статическая типизация хороша для написания сложного но быстрого кода интегрированной среде разработки осуществимо более релевантное автодополнение особенно если типизация сильная статическая множество вариантов можно отбросить как не подходящие по типу чем больше сложнее проект тем большее преимущество дает статическая типизация наоборот недостатки языки недостаточно проработанной математической базой оказываются довольно многословными каждый раз надо указывать какой тип будет иметь переменная некоторых языках есть автоматическое выведение типа однако оно может привести трудноуловимым ошибкам нивелируется функциями ide вроде quick fix сказанное не верно для языков семейства ml основанных на главной типизации которая одновременно автоматически выводит наиболее общий тип всякого выражения строго проверяет согласование типов зависимостей это придаёт языку выразительность динамически типизируемых но обеспечивает лучшее быстродействие тяжело работать данными из внешних источников например реляционных субд десериализация данных примечания литература перевод на русский язык категория типы данных категория теория типов