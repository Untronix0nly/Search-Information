pl sql rocedural anguage tructured uery anguage язык процедурное расширение языка sql разработанное корпорацией oracle базируется на языке ада pl sql встроен следующие субд oracle database начиная версии версии ibm db версии также pl sql используется как встроенный язык для средства быстрой разработки oracle forms инструмента разработки отчётов oracle reports oracle application express pl sql даёт возможность использовать переменные операторы массивы курсоры исключения начиная версии доступна объектно ориентированная модель стандартный sql является декларативным языком на язык наложены определённые ограничения такие как например отсутствие прямой поддержки циклов pl sql же как полный по тьюрингу язык позволяет разработчикам обрабатывать данные реляционной базе используя императивный стиль операторы sql могут быть легко вызваны непосредственно из pl sql процедуры функции или триггера иногда некоторыми ограничениями базовая структура кода программа на pl sql состоит из блоков анонимных или поименованных блок может содержать вложенные блоки называемые иногда подблоками общая форма pl sql блока declare описания блока переменные типы курсоры опционально begin непосредственно код программы exception обработка исключений опционально end многострочные комментарии однострочный комментарий язык pl sql позволяет определять следующие типы именованных блоков процедуры функции объекты пакеты все они могут быть скомпилированы сохранены как объекты базы данных некоторой её схеме все именованные блоки кода кроме пакетов не хранят внутреннее состояние от вызова вызову пакеты обеспечивают модульность для больших проектов позволяя сгруппировать наборы именованных блоков кода кроме того пакетах возможно хранение состояния на время жизни сессии базы данных доступное для функций процедур входящих пакет пакеты pl sql содержат спецификацию тело спецификация пакета может содержать определение констант переменных типов данных объявление процедур функций тело пакета определяет объявленные спецификации процедуры функции также может содержать блок кода инициализации пакета определения внутренних констант переменных типов данных процедур функций все компоненты пакета объявленные его спецификации могут быть доступны для использования извне пакета то время как тело пакета инкапсулирует реализацию этих компонентов извне недоступно тело спецификация пакета могут компилироваться сохраняться независимо друг от друга типы данных язык pl sql поддерживает следующие категории типов встроенные типы данных включая коллекции записи скалярные составные ссылочные lob типы объектные типы данных операторы управления операторы выбора if then end if if then else end if if then elsif end if if then elsif else end if case when then end case when then else end операторы цикла loop end loop while loop end loop for loop end loop exit exit when операторы безусловного перехода goto null пример программы программа выводящая консоли sql plus строчку hello world использованием переменной set serveroutput on declare hello varchar hello world begin dbms_output put_line hello end работа базой данных статический sql pl sql допускается включать готовые sql выражения непосредственно код таком случае проверка выражения на корректность осуществляется уже при компиляции кода так например если используемая запросе таблица не существует то ошибка будет выдана уже на этапе компиляции запрос одной строки из базы данных используется sql выражение select дополненное предложением into котором указываются переменные куда запишутся запрошенные данные количество тип этих переменных должны соответствовать количеству до версии oracle включительно переменных могло быть больше типу полей хотя при определённых несоответствиях типов может произойти их неявное приведение случае если запрос вернул нулевое число строк выбрасывается исключение no_data_found случае если строк больше чем одна выбрасывается исключение too_many_rows эти исключения вообще говоря следует обрабатывать соответствующей части блока за исключением случаев когда предполагается что они не могут быть выброшены например при запросе данных из таблицы по их первичному ключу обработчик исключения too_many_rows не нужен declare empname varchar begin select ename into empname from scott emp where empno exception when no_data_found then dbms_output put_line no records found when too_many_rows then dbms_output put_line found more than one string end запрос нескольких строк из базы данных для запроса нескольких строк следует использовать курсоры pl sql под курсором подразумевается указатель на очередную строку результатах запроса открытие закрытие курсора осуществляется операторами open close считывание значений на которые указывает курсор его перевод на следующую строку осуществляется оператором fetch считывание данных из запроса оформляется как цикл когда курсор дойдёт до конца результатов запроса очередной вызов оператора fetch не считает новых данных атрибут notfound принимает значение true это событие используется для прерывания работы цикла обработчиков исключений этом случае не требуется если данные не будут найдены то цикл не будет выполнен ни разу declare empname varchar cursor is select ename from scott emp begin open loop fetch into empname exit when notfound работа со значением empname end loop close end использование указателей на курсоры для большей гибкости удобно вместо курсора использовать указатель на курсор разными курсорами таком случае курсор запросом определяются неявно при вызове операции open для указателя на курсор помощью предложения for один указатель на курсор можно использовать со многими курсорами соответственно со многими запросами declare type genericcursor is ref cursor genericcursor empname varchar begin open for select ename from scott emp loop fetch into empname exit when notfound работа со значением empname end loop close end использование связанных переменных как при использовании курсоров так при использовании указателей на курсоры рекомендуется при формировании запросов не включать туда конкретные константы кроме тех случаев когда эти константы действительно будут сохраняться во всех подобных запросах связано это тем что при выполнении двух запросов отличающихся только константой например select ename from employees where id select ename from employees where id субд производит разбор каждого запроса отдельно хотя на самом деле план выполнения таких запросов общий такие повторные разборы могут существенно снизить приложения для предотвращения лишних разборов используется техника связанных переменных то есть переменных непосредственно теле запроса значения которых подставляются только при открытии курсора для запроса связанные переменные обозначаются именем предварённым символом двоеточия при открытии курсора значения переменных указываются помощью предложения using при первом выполнении участка кода использующего технику связанных переменных запрос будет разобран субд для него будет создан план выполнения это будет происходить сравнительно долго при последующих выполнениях будет использоваться уже созданный план выполнения запрос будет быстро возвращать значения пример функции со связанными переменными function empid integer empcity varchar return varchar is type genericcursor is ref cursor genericcursor empname varchar begin open for select ename from employees where id id and city city using empid empcity цикл не используется так как запрос вернёт не более одной строки fetch into empname close return empname end неявное определение курсора цикле иногда вместо того чтобы объявлять курсор или указатель на него удобно воспользоваться неявным определением курсора неявным определением переменной типа запись record declare begin for rec in select id ename as value from employees loop dbms_output put_line rec id rec ename end loop end пакетный запрос многих строк при запросе большого числа строк можно увеличить если вместо поочерёдного зачитывания строк результата зачитать их всех сразу значительно снизив тем самым количество переключений контекста от pl sql sql обратно для пакетного чтения необходимо снабдить оператор fetch инструкцией bulk collect данные при этом должны записываться не переменные ассоциативные коллекции declare type genericcursor is ref cursor genericcursor type varchartable is table of varchar index by binary_integer объявили тип данных таблица строк элементы которой нумеруются числами empnames varchartable объявили переменную созданного типа begin open for select ename from employees fetch bulk collect into empnames close end выполнение операций dml операции dml как правило выполняются точно так же как sql declare begin update employees set hire_date sysdate where id insert into employees name city values smith тикси commit end динамический sql динамические запросы для большей гибкости часто статические запросы заменяются запросами формируемыми динамически недостаток динамического sql том что динамические запросы разумеется не могут быть проверены на этапе компиляции если например используемой запросе таблицы не существует то при выполнении операции open возникнет исключение классическая задача требующая применения динамического конструирования sql запросов отчёты интерфейсах где пользователь может выбрать разные условия по которым следует сформировать отчёт ниже приведён анонимный блок кода который зависимости от некоего условия запрашивает имя сотрудника либо по ключу либо по городу declare type genericcursor is ref cursor genericcursor sel varchar bind_var varchar result varchar begin sel select name from employees where if then sel sel and id bind_var else sel sel and city bind_var магадан end if open for sel using bind_var fetch into result close end динамические dml ddl операции динамические операции dml ddl выполняются помощью оператора execute immediate declare begin execute immediate delete from employees execute immediate drop table employees commit или rollback не нужен потому что ddl операция завершила транзакцию end допускается использование связанных переменных их значения также указываются предложении using примечания категория oracle database категория процедурные расширения sql