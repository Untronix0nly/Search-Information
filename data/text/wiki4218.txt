трансля тор программа или техническое средство выполняющее трансляцию программы трансля ция програ ммы преобразование программы представленной на одном из языков программу на другом языке транслятор обычно выполняет также диагностику ошибок формирует словари идентификаторов выдаёт для печати текст программы язык на котором представлена входная программа называется исходным языком сама программа исходным кодом выходной язык называется целевым языком выходная результирующая программа объектным кодом общем случае понятие трансляции относится не только языкам но другим языкам как формальным компьютерным вроде языков разметки типа html так естественным русскому английскому виды трансляторов существует несколько видов трансляторов диалоговый транслятор транслятор обеспечивающий использование языка синтаксически ориентированный синтаксически управляемый транслятор транслятор получающий на вход описание синтаксиса семантики языка текст на описанном языке выполняющий трансляцию соответствии заданным описанием однопроходной транслятор транслятор создающий объектный модуль при однократном чтении исходного кода за один проход многопроходной транслятор транслятор создающий объектный модуль после нескольких чтений исходного кода за несколько проходов оптимизирующий транслятор транслятор выполняющий оптимизацию создаваемого кода перед записью объектный файл см оптимизирующий компилятор тестовый транслятор транслятор получающий на вход исходный код выдающий на выходе изменённый исходный код запускается перед основным транслятором для добавления исходный код отладочных процедур например транслятор языка ассемблера может выполнять замену макрокоманд на код обратный транслятор транслятор выполняющий преобразование машинного кода текст на каком либо языке см дизассемблер декомпилятор реализации цель трансляции преобразование текста одного языка на язык понятный адресату при трансляции компьютерной программы адресатом может быть устройство процессор трансляция называется компиляцией программа интерпретатор трансляция называется интерпретацией виды трансляции компиляция интерпретация динамическая компиляция компиляция язык процессора устройства машины называется машинным языком машинным кодом код на машинном языке исполняется процессором обычно машинный язык язык низкого уровня но существуют процессоры использующие языки высокого уровня например iapx однако такие процессоры не получили распространения силу своей сложности дороговизны компилятор транслятор преобразующий исходный код какого либо языка на машинный язык процесс компиляции как правило состоит из нескольких этапов лексический анализ синтаксический анализ семантический анализ создание на основе результатов анализов промежуточного кода оптимизация промежуточного кода создание объектного кода данном случае машинного программа может использовать сервисы предоставляемые операционной системой сторонние библиотеки например библиотеки для работы файлами библиотеки для создания графического интерфейса для добавления объектный файл машинного кода из других объектных файлов кода статических библиотек информации динамических библиотеках выполняется связывание или компоновка связывание или компоновка выполняется редактором связей или компоновщиком компоновщик может быть отдельной программой или частью компилятора компоновщик создаёт исполняемый файл исполняемый файл программа запускается следующим образом по запросу пользователя ядре операционной системы создаётся объект процесс загрузчик программ операционной системы выполняет следующие действия читает исполняемый файл загружает его память загружает память динамические библиотеки выполняет связывание машинного кода программы динамическими библиотеками динамическое связывание передаёт управление программе достоинства компиляции компиляция программы выполняется один раз наличие компилятора на устройстве для которого компилируется программа не требуется недостатки компиляции компиляция медленный процесс при внесении изменений исходный код требуется повторная компиляция ассемблер компилятор преобразующий текст языка ассемблера на машинный язык язык ассемблера язык близкий машинному языку язык низкого уровня интерпретация интерпретация процесс чтения выполнения исходного кода реализуется программой интерпретатором интерпретатор может работать двумя способами читать код исполнять его сразу чистая интерпретация читать код создавать памяти промежуточное представление кода байт код или код выполнять промежуточное представление кода смешанная реализация первом случае трансляция не используется во втором используется трансляция исходного кода промежуточный код этапы работы интерпретатора лексический анализ синтаксический анализ семантический анализ создание промежуточного представления кода при чистой интерпретации не выполняется исполнение интерпретатор моделирует машину виртуальную машину реализует цикл выборки исполнения команд машины команды машины записываются не на машинном языке на языке высокого уровня интерпретатор можно назвать исполнителем языка виртуальной машины чистая интерпретация применяется обычно для языков простой структурой например языков сценариев языков apl лисп примеры интерпретаторов создающих байт код perl php python erlang достоинства интерпретаторов по сравнению компиляторами возможность работы интерактивном режиме отсутствие необходимости перекомпиляции исходного кода после внесения изменений при переносе кода на другую платформу недостатки интерпретаторов по сравнению компиляторами низкая машинный код исполняется процессором код интерпретатором машинный код самого интерпретатора исполняется процессором необходимость наличия интерпретатора на устройстве на котором планируется интерпретация программы обнаружение ошибок синтаксиса на этапе выполнения актуально для чистых интерпреаторов сравнение чистого интерпретатора интерпретатора создающего байт код чистый интерпретатор проще реализации так как для него не нужно писать код транслятора интерпретатор создающий байт код может выполнять его оптимизацию добиваться большей чем чистый интерпретатор интерпретатор создающий байт код потребляет больше ресурсов системы трансляция байт код занимает процессорное время байт код занимает место памяти динамическая компиляция динамическая или jit компиляция трансляция при которой исходный или промежуточный код преобразуется компилируется машинный код непосредственно во время исполнения на лету компиляция каждого участка кода выполняется только один раз код сохраняется кеше при необходимости используется повторно достоинства динамической компиляции по сравнению компиляцией скорость работы динамически компилируемых программ близка скорости работы компилируемых программ отсутствие необходимости перекомпиляции программы при переносе на другую платформу недостатки динамической компиляции по сравнению компиляцией чистой интерпретацией бо льшая сложность реализации бо льшие требования ресурсам динамическая компиляция хорошо подходит для веб приложений динамическая компиляция появилась поддерживается той или иной мере реализациях java net framework perl python смешение понятий трансляции интерпретации понятия трансляция интерпретация отличаются во время трансляции выполняется преобразование кода программы одного языка на другой во время интерпретации программа исполняется так как целью трансляции является обычно подготовка интерпретации эти процессы рассматриваются вместе например языки часто характеризуются как компилируемые или зависимости от того что преобладает при использовании языка компиляция или интерпретация причём практически все языки низкого уровня третьего поколения вроде ассемблера си или модулы являются компилируемыми более высокоуровневые языки вроде python или sql другой стороны существует процессов трансляции интерпретации интерпретаторы могут быть компилирующими том числе динамической компиляцией трансляторах может требоваться интерпретация для реализации например для макросов языке ассемблера условной компиляции си или шаблонов более того один тот же язык может транслироваться обоих случаях должны присутствовать общие этапы анализа распознавания конструкций директив исходного языка это относится программным реализациям аппаратным так процессоры семейства перед исполнением инструкций машинного языка выполняют их декодирование выделяя опкодах поля операндов указание регистров адресов памяти констант разрядности процессорах pentium архитектурой netburst тот же самый машинный код перед сохранением во внутреннем кэше дополнительно транслируется микроопераций примечания литература