логотип python python мфа русском языке распространено название пито высокоуровневый язык общего назначения ориентированный на повышение разработчика читаемости кода синтаксис ядра python минималистичен то же время стандартная библиотека включает большой объём полезных функций python поддерживает несколько парадигм том числе структурное объектно ориентированное функциональное императивное аспектно ориентированное основные архитектурные черты динамическая типизация автоматическое управление памятью полная интроспекция механизм обработки исключений поддержка многопоточных вычислений удобные высокоуровневые структуры данных код python функции классы которые могут объединяться модули они свою очередь могут быть объединены пакеты эталонной реализацией python является интерпретатор cpython поддерживающий большинство активно используемых платформ он под свободной лицензией python software foundation license позволяющей использовать его без ограничений любых приложениях включая проприетарные есть реализации интерпретаторов для jvm возможностью компиляции msil возможностью компиляции llvm других проект pypy предлагает реализацию python использованием jit компиляции которая значительно увеличивает скорость выполнения python программ python активно развивающийся язык новые версии добавлением изменением языковых свойств выходят примерно раз два половиной года вследствие этого некоторых других причин на python отсутствуют стандарт ansi iso или другие официальные стандарты их роль выполняет cpython философия разработчики языка python придерживаются определённой философии называемой the zen of python дзен пито на или дзен па йтона её текст выдаётся интерпретатором python по команде import this работает один раз за сессию автором этой философии считается тим петерс tim peters текст философии красивое лучше чем уродливое явное лучше чем неявное простое лучше чем сложное сложное лучше чем запутанное плоское лучше чем вложенное разреженное лучше чем плотное читаемость имеет значение особые случаи не настолько особые чтобы нарушать правила при этом практичность важнее безупречности ошибки никогда не должны замалчиваться если не замалчиваются явно встретив двусмысленность отбрось искушение угадать должен существовать один желательно только один очевидный способ сделать это хотя он поначалу может быть не очевиден если вы не голландец сейчас лучше чем никогда хотя никогда зачастую лучше чем прямо сейчас если реализацию сложно объяснить идея плоха если реализацию легко объяснить идея возможно хороша пространства имён отличная вещь давайте будем делать их больше история разработка языка python была начата конце годов сотрудником голландского института cwi гвидо ван россумом для распределённой ос amoeba требовался расширяемый скриптовый язык гвидо начал писать python на досуге позаимствовав некоторые наработки для языка abc гвидо участвовал разработке этого языка на обучение феврале года гвидо опубликовал исходный текст группе новостей alt sources самого начала python проектировался как объектно ориентированный язык py название языка произошло вовсе не от вида пресмыкающихся автор назвал язык честь популярного британского комедийного телешоу летающий цирк монти пайтона впрочем всё равно название языка чаще связывают именно со змеёй нежели передачей пиктограммы файлов kde или microsoft windows даже эмблема на сайте python org до выхода версии изображают змеиные головы важная цель разработчиков python создавать его забавным для использования это отражено его названии которое пришло из монти пайтона также это отражено иногда игривом подходе обучающим программам справочным материалам таким как примеры использования которые используют понятия ветчины spam яиц вместо стандартных foo bar наличие дружелюбного отзывчивого сообщества пользователей считается наряду дизайнерской интуицией гвидо одним из факторов успеха python развитие языка происходит согласно чётко процессу создания обсуждения отбора реализации документов pep предложений по развитию python декабря года после длительного тестирования вышла первая версия python или python также используется сокращение py python устранены многие недостатки архитектуры максимально возможным но не полным сохранением совместимости со старыми версиями python на сегодня поддерживаются обе ветви развития python влияние других языков на python появившись сравнительно поздно python создавался под влиянием множества языков abc отступы для группировки операторов высокоуровневые структуры данных map python фактически создавался как попытка исправить ошибки допущенные при проектировании abc modula пакеты модули использование else совместно try except именованные аргументы функций на это также повлиял common lisp некоторые синтаксические конструкции как пишет сам гвидо ван россум он использовал наиболее конструкции из чтобы не вызвать неприязнь программистов python smalltalk объектно ориентированное lisp отдельные черты функционального lambda map reduce filter другие fortran срезы массивов комплексная арифметика miranda списочные выражения java модули logging unittest threading часть возможностей оригинального модуля не реализована xml sax стандартной библиотеки совместное использование finally except при обработке исключений использование для декораторов icon генераторы большая часть других возможностей python например байт компиляция исходного кода также была реализована ранее других языках портируемость python портирован работает почти на всех известных платформах от кпк до мейнфреймов существуют порты под microsoft windows практически все варианты unix включая freebsd linux plan mac os mac os iphone os выше palm os os amiga haikuos as даже os windows mobile symbian android по мере устаревания платформы её поддержка основной ветви языка прекращается например серии прекращена поддержка windows windows windows me однако на этих платформах можно использовать предыдущие версии python на данный момент сообщество активно поддерживает версии python начиная от для них выходят исправления при этом отличие от многих портируемых систем для всех основных платформ python имеет поддержку характерных для данной платформы технологий например microsoft com dcom более того существует специальная версия python для виртуальной машины java jython что позволяет интерпретатору выполняться на любой системе поддерживающей java при этом классы java могут непосредственно использоваться из python даже быть написанными на python также несколько проектов обеспечивают интеграцию платформой microsoft net основные из которых ironpython python net типы структуры данных thumb python поддерживает динамическую типизацию то есть тип переменной определяется только во время исполнения поэтому вместо присваивания значения переменной лучше говорить связывании значения некоторым именем python имеются встроенные типы булевый строка unicode строка целое число произвольной точности число плавающей запятой комплексное число некоторые другие из коллекций python встроены список кортеж неизменяемый список словарь множество другие все значения являются объектами том числе функции методы модули классы добавить новый тип можно либо написав класс class либо определив новый тип модуле расширения например написанном на языке система классов поддерживает наследование одиночное множественное возможно наследование от большинства встроенных типов типов расширений все объекты делятся на ссылочные атомарные атомарным относятся int long версии любое число int так как версии нет ограничения на размер complex некоторые другие при присваивании атомарных объектов копируется их значение то время как для ссылочных копируется только указатель на объект таким образом обе переменные после присваивания используют одно то же значение ссылочные объекты бывают изменяемые неизменяемые например строки кортежи являются неизменяемыми списки словари многие другие объекты изменяемыми кортеж python является по сути неизменяемым списком во многих случаях кортежи работают быстрее списков поэтому если вы не планируете изменять то лучше использовать именно их синтаксис семантика язык обладает чётким синтаксисом продуманной модульностью благодаря чему исходный код написанных на python программ легко читаем при передаче аргументов функции python использует вызов по соиспользованию году гвидо ван россум создатель языка решил ради изменить терминологию кода заменив нём термины master slave на parent child соответственно операторы набор операторов достаточно традиционен условный оператор if если альтернативный блок после else иначе если условий альтернатив несколько можно использовать elif сокр от else if операторы цикла while пока for для внутри цикла возможно применение break continue для прерывания цикла перехода сразу следующей итерации соответственно оператор определения класса class оператор определения функции метода или генератора def внутри возможно применение return возврат для возврата из функции или метода случае генератора yield давать оператор обработки исключений try except else или try finally начиная версии можно использовать finally except else одном блоке оператор pass ничего не делает используется для пустых блоков кода одной из интересных синтаксических особенностей языка является выделение блоков кода помощью отступов пробелов или табуляций поэтому python отсутствуют операторные скобки begin end как языке паскаль или фигурные скобки как си такой трюк позволяет сократить количество строк символов программе приучает хорошему стилю другой стороны поведение даже корректность программы может зависеть от начальных пробелов тексте некоторым такое поведение может показаться неинтуитивным неудобным выражения выражение является полноправным оператором python состав синтаксис ассоциативность приоритет операций достаточно привычны для языков призваны минимизировать употребление скобок отдельно стоит упомянуть операцию форматирования для строк работает по аналогии printf из си которая использует тот же символ что взятие остатка от деления str_var world print hello str_var hello world python имеет удобные цепочечные сравнения такие условия программах не редкость кроме того логические операции or and являются ленивыми если для вычисления значения операции достаточно первого операнда этот операнд является результатом противном случае вычисляется второй операнд логической операции это основывается на свойствах алгебры логики например если один аргумент операции или or является истиной то результат этой операции всегда является истиной случае если второй операнд является сложным выражением это позволяет сократить издержки на его вычисление этот факт широко использовался до версии вместо условной конструкции встроенные типы данных как правило имеют особый синтаксис для своих литералов записанных исходном коде констант для версии меньше строка строка тоже строка юникод строка true or false булевы литералы число плавающей запятой xa числа восьмеричной системах счисления комплексное число список кортеж словарь множество lambda анонимная функция для версии строка юникод строка одновременно строка юникод строка одновременно тоже строка юникод строка одновременно true or false булевы литералы число плавающей запятой xa числа двоичной восьмеричной системах счисления комплексное число список кортеж словарь множество lambda анонимная функция для списков других python предлагает набор операций над срезами особенностью является индексация которая может показаться новичку странной но раскрывает свою согласованность по мере использования индексы элементов списка начинаются нуля запись среза sn означает что срез попадают все элементы от включительно до не включая качестве иллюстрации можно посмотреть пример работы имена имя идентификатор может начинаться латинской буквы python буквы любого алфавита юникоде например кириллицы любого регистра или подчёркивания после чего имени можно использовать цифры качестве имени нельзя использовать ключевые слова их список можно узнать по import keyword print keyword kwlist нежелательно переопределять встроенные имена имена начинающиеся символа подчёркивания имеют специальное значение каждой точке программы интерпретатор имеет доступ трём пространствам имён то есть отображениям имён объекты локальному глобальному встроенному области видимости имён могут быть вложенными друг друга внутри определяемой функции видны имена из окружающего блока кода на практике областями видимости связыванием имён связано несколько правил хорошего тона которых можно подробнее узнать из документации строки документации python предлагает механизм кода pydoc начало каждого модуля класса функции вставляется строка документации строки документации остаются коде на момент времени исполнения язык встроен доступ документации переменная что используется современными ide например eclipse интерактивном режиме можно получить помощь сгенерировать гипертекстовую документацию по целому модулю или даже применить для автоматического тестирования модуля директивы начиная python для использования тексте программы символов не входящих ascii необходимо явно указывать кодировку исходного кода начале модуля например coding utf или coding utf после этого можно использовать например кириллицу unicode литералах но на самом деле даже если написать coding utf то python поймёт что вы хотели сделать возможности интерактивный режим файл python idle png мини idle подобно лиспу прологу режиме отладки интерпретатор python имеет интерактивный режим работы при котором введённые клавиатуры операторы сразу же выполняются результат выводится на экран repl этот режим интересен не только новичкам но опытным программистам которые могут протестировать интерактивном режиме любой участок кода прежде чем использовать его основной программе или просто использовать как калькулятор большим набором функций так выглядит общение python интерактивном режиме возведение степень from math import импорт математических функций sin pi вычисление синуса от половины пи help sorted помощь по функции sorted help on built in function sorted in module sorted sorted iterable cmp none key none reverse false new sorted list интерактивном режиме доступен отладчик pdb система помощи вызывается по help система помощи работает для модулей классов функций только если те были снабжены строками документации кроме встроенной существуют улучшенные интерактивные оболочки ipython bpython объектно ориентированное дизайн языка python построен вокруг объектно ориентированной модели реализация ооп python является элегантной мощной хорошо продуманной но вместе тем достаточно специфической по сравнению другими объектно языками возможности особенности классы являются одновременно объектами со всеми ниже приведёнными возможностями наследование том числе множественное полиморфизм все функции виртуальные инкапсуляция два уровня общедоступные скрытые методы поля особенность скрытые члены доступны для использования помечены как скрытые лишь особыми именами специальные методы управляющие жизненным циклом объекта конструкторы деструкторы распределители памяти перегрузка операторов всех кроме is символьных логических свойства имитация поля помощью функций управление доступом полям эмуляция полей методов частичный доступ методы для управления наиболее операциями истинностное значение len глубокое копирование сериализация итерация по объекту управление созданием классов триггеры на создание классов др полная интроспекция классовые статические методы классовые поля классы вложенные функции классы функциональное python поддерживает парадигму функционального частности функция является объектом функции высших порядков рекурсия развитая обработка списков списочные выражения операции над итераторы аналог замыканий частичное применение функции возможность реализации других средств на самом языке например карринг модули пакеты программное обеспечение приложение или библиотека на python оформляется виде модулей которые свою очередь могут быть собраны пакеты модули могут располагаться как каталогах так zip архивах модули могут быть двух типов по своему происхождению модули написанные на чистом python модули расширения extension modules написанные на других языках например стандартной библиотеке есть чистый модуль pickle его аналог на си cpickle модуль оформляется виде отдельного файла пакет виде отдельного каталога подключение модуля программе осуществляется оператором import после импорта модуль представлен отдельным объектом дающим доступ пространству имён модуля ходе выполнения программы модуль можно перезагрузить функцией reload интроспекция python поддерживает полную интроспекцию времени исполнения это означает что для любого объекта можно получить всю информацию его внутренней структуре применение интроспекции является важной частью того что называют pythonic style широко применяется библиотеках фреймворках python таких как pyro ply cherry django др значительно экономя время использующего их программиста обработка исключений обработка исключений поддерживается python посредством операторов try except else finally raise образующих блок обработки исключения общем случае блок выглядит следующим образом try здесь код который может вызвать исключение raise exception message exception это один из стандартных типов исключения всего лишь класс может использоваться любой другой том числе свой except тип исключения тип исключения as переменная код блоке выполняется если тип исключения совпадает одним из типов тип исключения тип исключения или является наследником одного из этих типов полученное исключение доступно необязательной переменной except тип исключения тип исключения as переменная количество блоков except не ограничено raise сгенерировать исключение поверх полученного без параметров повторно сгенерировать полученное except будет выполнено при любом исключении не обработанном типизированными блоками except else код блока выполняется если не было поймано исключений finally будет исполнено любом случае возможно после блока except или else совместное использование else except finally стало возможно только начиная python информация текущем исключении всегда доступна через sys exc_info кроме значения исключения python также сохраняет состояние стека вплоть до точки возбуждения исключения так называемый traceback отличие от компилируемых языков python использование исключения не приводит значительным накладным расходам зачастую даже позволяет ускорить исполнение программ очень широко используется исключения согласуются философией python пункт дзена python ошибки никогда не должны умалчиваться являются одним из средств поддержки утиной типизации иногда вместо явной обработки исключений удобнее использовать блок with доступен начиная python итераторы программах на python широко используются итераторы цикл for может работать как так итератором все коллекции как правило предоставляют итератор объекты определённого пользователем класса тоже могут быть итераторами подробнее об итераторах можно узнать разделе функциональном модуль itertools стандартной библиотеки содержит много полезных функций для работы итераторами генераторы одной из интересных возможностей языка являются генераторы функции сохраняющие внутреннее состояние значения локальных переменных текущую инструкцию см также сопрограммы генераторы могут использоваться как итераторы для структур данных для ленивых вычислений см пример генератор чисел фибоначчи при вызове генератора функция немедленно возвращает объект итератор который хранит текущую точку исполнения состояние локальных переменных функции при запросе следующего значения посредством метода next неявно вызываемого цикле for генератор продолжает исполнение функции от предыдущей точки останова до следующего оператора yield или return python появились генераторные выражения выражения дающие результате генератор генераторные выражения позволяют сэкономить память там где иначе требовалось бы использовать список промежуточными результатами sum for in xrange if этом примере суммируются все нечётные числа от до начиная версии python поддерживает полноценные сопроцедуры теперь генератор можно передавать значения помощью метода send возбуждать его контексте исключения помощью метода throw управление контекстом выполнения python появились средства для управления контекстом выполнения блока кода оператор with модуль contextlib см пример оператор может применяться тех случаях когда до после некоторых действий должны обязательно выполняться некоторые другие действия независимо от возбуждённых блоке исключений или операторов return файлы должны быть закрыты ресурсы освобождены перенаправление стандартного ввода вывода закончено оператор улучшает читаемость кода значит помогает предотвращать ошибки декораторы начиная версии python позволяет использовать так называемые декораторы не следует путать одноимённым шаблоном проектирования для поддержки существующей практики преобразования функций методов месте определения декораторов может быть несколько для декораторов используется символ строках предшествующих определению функции или метода синтаксис декорирования является синтаксическим сахаром для удобочитаемости код staticmethod def return некоторый метод полностью эквивалентен def return некоторый метод staticmethod сам декоратор является функцией получающей качестве первого аргумента декорируемую функцию для передачи дополнительных аргументов можно использовать синтаксис декоратор аргументы декораторы можно считать элементом аспектно версии декораторы можно использовать классами аналогично функциям регулярные выражения формат регулярных выражений унаследован из perl некоторыми отличиями для их использования требуется импортировать модуль re являющийся частью стандартной библиотеки другие возможности python есть ещё несколько возможностей отличающих его от многих других языков высокой гибкостью динамичностью например класс является объектом операторе определения класса можно использовать выражения списке родительских классов def get_class return dict class get_class pass можно модифицировать многие объекты во время исполнения например классы class object pass wrong_method такого метода пока нет traceback most recent call last file line in attributeerror object has no attribute wrong_method wrong_method lambda self im here добавим его wrong_method так как доступ методу приводит поиску по класса im here то wrong_method становится доступным всем экземплярам библиотеки стандартная библиотека файл python batteries included jpg thumb python поставляется батарейками комплекте богатая стандартная библиотека является одной из привлекательных сторон python здесь имеются средства для работы со многими сетевыми протоколами форматами интернета например модули для написания http серверов клиентов для разбора создания почтовых сообщений для работы xml набор модулей для работы операционной системой позволяет писать кросс платформенные приложения существуют модули для работы регулярными выражениями текстовыми кодировками мультимедийными форматами протоколами архивами сериализации данных поддержка юнит тестирования др модули расширения программные интерфейсы помимо стандартной библиотеки существует множество библиотек предоставляющих интерфейс ко всем системным вызовам на разных платформах частности на платформе win поддерживаются все вызовы win api также com объёме не меньшем чем visual basic или delphi количество прикладных библиотек для python самых разных областях без преувеличения огромно веб базы данных обработка изображений обработка текста численные методы приложения операционной системы для python принята спецификация программного интерфейса базам данных db api разработаны соответствующие этой спецификации пакеты для доступа различным субд oracle mysql postgresql sybase firebird interbase informix microsoft sql server sqlite на платформе windows доступ бд возможен через ado adodb коммерческий пакет mxodbc для доступа субд через odbc для платформ windows unix разработан egenix для python написано много orm sqlobject sqlalchemy dejavu django выполнены программные каркасы для разработки веб приложений django pylons pyramid библиотека numpy для работы многомерными массивами позволяет достичь научных расчётов сравнимой со пакетами scipy использует numpy предоставляет доступ обширному спектру математических алгоритмов матричная алгебра blas уровней lapack бпф numarray специально разработан для операций большими объёмами научных данных wsgi интерфейс шлюза веб сервером python web server gateway interface python предоставляет простой удобный программный интерфейс api для написания собственных модулей на языках си такой инструмент как swig позволяет почти автоматически получать привязки для использования библиотек коде на python возможности этого других инструментов варьируются от автоматической генерации fortran python интерфейсов по специальным файлам swig pyste sip pyfort до предоставления более удобных api boost python cxx pyhrol др инструмент стандартной библиотеки ctypes позволяет программам python напрямую обращаться динамическим библиотекам dll написанным на си существуют модули позволяющие встраивать код на прямо исходные файлы python создавая расширения на лету pyinline weave другой подход состоит во встраивании интерпретатора python приложения python легко встраивается программы на java ocaml взаимодействие python приложений другими системами возможно также помощью corba xml rpc soap com помощью проекта cython возможна трансляция программ написанных на языках python код на языке си последующей компиляцией машинный код cython используется для упрощения написания python библиотек при его использовании отмечается ускорение кода уменьшение накладных расходов проект shedskin предполагает создание компилятора для трансформации неявно типизированных python программ код начиная версии shedskin позволяет компилировать отдельные функции модули расширений python подавляющее большинство библиотек нему бесплатны поставляются исходных кодах более того отличие от многих открытых систем лицензия никак не ограничивает использование python коммерческих разработках не налагает никаких обязательств кроме указания авторских прав одним из каналов распространения обновления пакетов для python является pypi графические библиотеки python поставляется библиотека tkinter на основе tcl tk для создания программ графическим интерфейсом существуют расширения позволяющие использовать все основные библиотеки графических интерфейсов wxpython основанное на библиотеке wxwidgets pygtk для gtk pyqt pyside для qt другие некоторые из них также предоставляют широкие возможности по работе базами данных графикой сетями используя все возможности библиотеки на которой основаны для создания игр приложений требующих нестандартного интерфейса можно использовать библиотеку pygame она также предоставляет обширные средства работы мультимедиа её помощью можно управлять звуком изображениями воспроизводить видео предоставляемое pygame аппаратное ускорение графики opengl имеет более высокоуровневый интерфейс по сравнению pyopengl копирующей семантику библиотеки для opengl есть также pyogre обеспечивающая привязку ogre высокоуровневой объектно ориентированной библиотеке графики кроме того существует библиотека pythonocc обеспечивающая привязку среде моделирования симуляции opencascade для работы растровой графикой используется библиотека python imaging library контроль типов перегрузка функций существуют модули позволяющие контролировать типы параметров функций на этапе исполнения например typecheck или method signature checking decorators необязательная декларация типов для параметров функции добавлена python интерпретатор при этом не проверяет типы только добавляет соответствующую информацию метаданным функции для последующего использования этой информации модулями расширений перегрузка функций реализована различными сторонними библиотеками том числе peak непринятые планы по поддержке перегрузки python были частично реализованы библиотеке overloading lib примеры программ статье примеры программ на языке python собраны примеры небольших программ демонстрирующих некоторые возможности языка python его стандартной библиотеки профилирование оптимизация кода стандартной библиотеке python имеется профайлер модуль profile который можно использовать для сбора статистики времени работы отдельных функций для решения вопроса том какой вариант кода работает быстрее можно использовать модуль timeit производимые следующей программе измерения позволяют выяснить какой из вариантов конкатенации строк более эффективен from timeit import timer tmp python default jun msc bit intel on win def case инкрементальные конкатенации цикле for in range tmp def case через промежуточный список метод join for in range append tmp join def case списковое выражение метод join return join tmp for in range def case генераторное выражение метод join return join tmp for in range for in range print timer func from import case as func timeit как любом языке python имеются свои приёмы оптимизации кода оптимизировать код можно исходя из различных часто конкурирующих друг другом критериев увеличение быстродействия уменьшение объёма требуемой оперативной памяти компактность исходного кода чаще всего программы оптимизируют по времени исполнения здесь есть несколько очевидных правил не нужно оптимизировать программу если скорость её выполнения достаточна используемый алгоритм имеет определённую временную сложность поэтому перед оптимизацией кода программы стоит сначала пересмотреть алгоритм стоит использовать готовые отлаженные функции модули даже если для этого нужно немного обработать данные например python есть встроенная функция sort профилирование поможет выяснить узкие места оптимизацию нужно начинать них python имеет следующие особенности связанные ними правила оптимизации вызов функций является достаточно дорогостоящей операцией поэтому внутри вложенных циклов нужно стараться избегать вызова функций или например переносить цикл функции функция обрабатывающая эффективнее чем обработка той же цикле вызовом функции старайтесь вынести из глубоко вложенного цикла всё что можно вычислить во внешних циклах доступ локальным переменным более быстрый чем глобальным или чем доступ полям оптимизатор psyco может помочь ускорить работу модуля программы при условии что модуль не использует динамических свойств языка python случае если модуль проводит массированную обработку данных оптимизация алгоритма кода не помогает можно переписать критические участки скажем на языке си или pyrex инструмент под названием pychecker поможет исходный код на python выдать рекомендации по найденным проблемам например неиспользуемые имена изменение сигнатуры метода при его перегрузке ходе такого статического анализа исходного кода могут быть выявлены ошибки pylint призван решать близкие задачи но имеет уклон сторону проверки стиля кода поиска кода запашком сравнение другими языками наиболее часто python сравнивают perl ruby эти языки также являются обладают примерно одинаковой скоростью выполнения программ как perl python может успешно применяться для написания скриптов сценариев как ruby python является хорошо продуманной системой для ооп средства функционального частично позаимствованы из scheme icon среде коммерческих приложений скорость выполнения программ на python часто сравнивают java приложениями несмотря на то что python обладает достаточно самобытным синтаксисом одним из принципов дизайна этого языка является принцип наименьшего удивления недостатки см также список недоразумений при использовании языка python низкое быстродействие классический python как многие другие языки не применяющие например jit компиляторы имеют общий недостаток сравнительно невысокую скорость выполнения программ сохранение байт кода расширения pyc до версии pyo позволяет интерпретатору не тратить лишнее время на перекомпиляцию кода модулей при каждом запуске существуют реализации языка python вводящие виртуальные машины вм качестве бэк энда компилятора примерами таких реализаций может служить pypy базирующийся на rpython более ранней инициативой является проект parrot ожидается что использование вм типа llvm приведёт тем же результатам что использование аналогичных подходов для реализаций языка java где низкая вычислительная основном преодолена множество программ библиотек для интеграции другими языками см выше предоставляют возможность использовать другой язык для написания критических участков самой популярной реализации языка python интерпретатор довольно велик более требователен ресурсам чем аналогичных популярных реализациях tcl forth lisp или lua что ограничивает его применение во встроенных системах тем не менее python нашёл применение кпк некоторых моделях мобильных телефонов невозможность модификации встроенных классов по сравнению ruby некоторыми другими языками python отсутствует возможность модифицировать встроенные классы такие как int str float list другие что однако позволяет python потреблять меньше оперативной памяти быстрее работать ещё одной причиной введения такого ограничения является необходимость согласования модулями расширения многие модули целях оптимизации быстродействия преобразуют python объекты элементарных типов соответствующим си типам вместо манипуляций ними посредством си api также это избавляет от многих потенциальных ошибок при динамическом переопределении встроенных типов глобальная блокировка интерпретатора gil gil global interpreter lock особенность присущая cpython stackless pypy но отсутствующая jython ironpython при своей работе основной интерпретатор python постоянно использует большое количество потоко небезопасных данных основном это словари которых хранятся атрибуты объектов обращения внешнему коду написанному на во избежание разрушения этих данных при совместной модификации из разных потоков перед началом исполнения нескольких инструкций по умолчанию поток интерпретатора захватывает gil по окончании освобождает вследствие этого каждый момент времени одном процессе интерпретатора python может исполняться только один поток кода на python даже если компьютере имеется несколько процессоров или процессорных ядер gil также освобождается на время выполнения блокирующих операций таких как ввод вывод изменения проверка состояния примитивов других таким образом если один поток блокируется другие могут исполняться была предпринята попытка перехода более гранулированным синхронизациям однако из за частых захватов освобождений блокировок эта реализация оказалась слишком медленной на однопоточных приложениях ближайшем будущем переход от gil другим техникам не предполагается по причине того что по мнению автора языка python гвидо россума однопоточных программ ускоряемых gil больше чем многопоточных которые gil тормозит однако есть python safethread cpython без gil некоторыми другими изменениями по утверждениям его авторов на однопоточных приложениях скорость соответствует от скорости оригинального cpython эта проблема имеет два основных варианта решения первый отказ от совместного использования изменяемых данных вызовов внешнего кода при этом данные дублируются потоках необходимость обеспечения их синхронизации если таковая нужна лежит на программисте этот подход ведёт увеличению потребления оперативной памяти однако не настолько сильно как при использовании процессов windows так как для unix это не критично процессы небольшие второй подход обеспечение более гранулированной синхронизации для отдельных структур данных этом случае падает вследствие увеличения числа освобождений захватов блокировок если необходимо параллельное исполнение нескольких потоков кода на python то можно воспользоваться процессами например модулем processing который имитирует семантику стандартного модуля threading но использует процессы вместо потоков начиная версии модуль processing добавлен стандартную библиотеку переименован multiprocessing есть множество модулей упрощающих написание параллельных или распределённых приложений на python таких как parallelpython pypar pympi других gil освобождается при исполнении кода большинства расширений например numpy scipy позволяя во время расчётов исполняться другому потоку другим решением может быть использование ironpython или jython лишённых этой особенности классического python версии был внедрён изменённый gil также присутствовали другие нововведения переключение по таймауту не по количеству опкодов предыдущей версии gil освобождался через каждые операций но операция может выполняться от наносекунд до долей секунд новой версии блокировка будет сниматься каждые миллисекунд уменьшение накладных расходов увеличение эффективности случае частых переключений некоторых системах основном macos наблюдаются проблема эффективностью блокировки когда gil уже захвачен системные вызовы становятся дорогими новой версии задержки будут уменьшены уменьшение задержек при переключении потоков благодаря введению механизма принудительного переключения потока приоритетных запросов когда поток выполняет приоритетный запрос то gil освобождается как можно быстрее реализации cpython является основной но не единственной реализацией языка python существуют также другие реализации pypy реализация python написанная на rpython подмножество python имеющее намного меньше динамических возможностей позволяет легко проверять новые возможности pypy кроме стандартного cpython включены возможности stackless psyco модификация ast на лету многое другое проект интегрированы возможности анализа python кода трансляция другие языки байткоды виртуальных машин си llvm javascript net версии начиная возможна полностью автоматическая трансляция rpython си результате чего достигается скорость приемлемая для использования раза медленнее чем cpython при отключённом jit для версии по умолчанию pypy поставляется со встроенным jit компилятором помощью которого он способен работать намного быстрее cpython jit компилятор на основе llvm поддержкой numpy pys реализация языка для смартфонов фирмы nokia на платформе series ironpython python для net framework mono компилирует python программы msil таким образом предоставляя полную интеграцию net системой stackless также написанная на си реализация python это не полноценная реализация патчи cpython предоставляет расширенные возможности многопоточного значительно большую глубину рекурсии python for net ещё одна реализация python для net отличие от ironpython эта реализация не компилирует python код msil только предоставляет интерпретатор написанный на позволяет использовать net сборки из python кода jython реализация python использующая jvm качестве среды исполнения позволяет прозрачно использовать java библиотеки python safethread версия cpython без gil что позволяет одновременно исполнять python потоки на всех доступных процессорах внесены также некоторые другие изменения unladen swallow начатый google проект по разработке максимально совместимого cpython jit компилятора на базе llvm согласно планам по развитию python планировалось перенести исходный код unladen swallow cpython версии но pep был отменён связи отсутствием интереса unladen swallow со стороны google основного спонсора разработки tinypy версия python часть возможностей cpython не реализована micro python эффективная реализация python для встроенных систем малым объёмом оперативной памяти brython реализация языка на клиентском javascript позволяющая писать браузерные скрипты на python qpython реализация python для android проект всё ещё на стадии тестирования однако на qpython уже портированы некоторые самые необходимые библиотеки позволяет работать интерактивном режиме существует также qpython дальнейшая разработка python enhancement proposal pep это документ со дизайном предоставляющий общую информацию языке python включая новые предложения описания разъяснения возможностей языка pep предлагаются как основной источник для предложения новых возможностей для разъяснения выбора того или иного дизайна для всех основных элементов языка выдающиеся pep рецензируются комментируются гвидо ван россумом имеющим проекте статус великодушного пожизненного диктатора июля года гвидо ван россум отправил себя бессрочный отпуск должности великодушного пожизненного диктатора график совместимость серии python python течение нескольких выпусков будут существовать параллельно при этом серия будет использоваться для совместимости скорее всего неё будут включены некоторые возможности серии pep содержит больше информации планируемых выпусках python обратно не совместим предыдущей серией код python часто будет выдавать ошибки при исполнении python динамическая типизация python вместе планами изменения нескольких методов словарей делает механический перевод из python python очень сложным однако утилита to уже способна сделать большинство работы по переводу кода указывая на подозрительные его части помощью комментариев предупреждений pep рекомендует держать исходный код для серии делать выпуски для python помощью to полученный код не следует редактировать пока программа не будет работоспособной python возможности основные изменения внесённые версии синтаксическая возможность для аннотации параметров результата функций например для передачи информации типе или полный переход на unicode для строк введение нового типа неизменяемые байты типа изменяемый буфер оба необходимы для представления бинарных данных новая подсистема ввода вывода модуль io имеющая отдельные представления для бинарных текстовых данных абстрактные классы абстрактные методы доступно уже иерархия типов для чисел выражения для словарей множеств for in a_dict el el el по аналогии со списковыми выражениями эта возможность была также добавлена python изменения print из встроенного выражения во встроенную функцию это позволит модулям делать изменения подстраиваясь под разное использование функции также упростит код python эта возможность активируется вводом from import print_function перемещение reduce но не map или filter из встроенного пространства модуль functools использование reduce существенно менее читабельно по сравнению циклом удаление некоторых устаревших возможностей поддерживаемых ветке для совместимости частности классы старого стиля целочисленное деление обрезанием результата как поведение по умолчанию строковые исключения неявный относительный импорт оператор exec реорганизация стандартной библиотеки новый синтаксис для метаклассов изменён синтаксис присваиваний стало возможным например присваивание rest range другой стороны формальные параметры функций вроде def foo более недопустимы подмножества расширения python на основе python было создано несколько подмножеств языка основном предназначенных для статической компиляции машинный код некоторые из них перечислены ниже rpython созданная рамках проекта pypy сильно ограниченная реализация python без динамизма времени исполнения некоторых других возможностей код на rpython можно компилировать во множество других языков платформ javascript lisp net llvm на rpython написан интерпретатор pypy pyrex ограниченная реализация python но несколько меньше чем rpython pyrex расширен возможностями статической типизации типами из языка позволяет свободно смешивать типизированный не типизированный код предназначен для написания модулей расширений компилируется код на языке cython расширенная версия pyrex проект shedskin предназначен для компиляции неявно статически типизированного кода на python код на языке применение python стабильный язык он используется во многих проектах различных качествах как основной язык или для создания расширений интеграции приложений на python реализовано большое количество проектов также он активно используется для создания прототипов будущих программ python используется во многих крупных компаниях dropbox google например некоторые части youtube youtube api написаны на python facebook instagram python пакетами numpy scipy matplotlib активно используется как универсальная среда для научных расчётов качестве замены коммерческим пакетам matlab idl другим библиотека astropy популярный инструмент для астрономических расчётов программах трёхмерной графики таких как autodesk maya blender houdini nuke python используется для расширения стандартных возможностей программ python используется коммерческих bi инструментах например по microsoft power bi desktop python наряду со встроенными языками запросов языком может использоваться на этапе загрузки данных etl процессах расчётах графической визуализации данных см также сравнение командных оболочек сравнение интегрированных средств разработки ide примечания литература на русском языке коэльё ричерт построение систем машинного обучения на языке python перевод английского дмк пресс isbn маккинли python анализ данных перевод английского дмк пресс isbn марк саммерфилд python на практике перевод английского дмк пресс isbn марк лутц изучаем python издание перевод английского спб символ плюс isbn дэвид бизли python подробный справочник издание перевод английского спб символ плюс isbn марк саммерфилд на python подробное руководство перевод английского спб символ плюс isbn ноа гифт джереми джонс python системном unix linux перевод английского спб символ плюс isbn бизли дэвид язык python справочник диасофт isbn isbn сузи python наиболее полное руководство cd спб бхв петербург isbn сузи язык python учебное пособие интуит бином лаборатория знаний isbn isbn на английском языке martin brown python the complete reference mcgraw hill professional publishing wesley chun core python programming prentice hall ptr alan gauld learn to program using python tutorial for hobbyists self starters and those who want to learn the art of programming addison wesley professional john grayson python and tkinter programming manning publications company rashi gupta making use of python wiley mark hammond andy robinson python programming on win reilly christopher jones fred drake python xml reilly associates ivan van laningham teach yourself python in hours sams amos latteier michel pelletier the zope book new riders publishing frederik lundh python standard library reilly associates ссылки официальный сайт каталог ссылок на русскоязычные материалы по python на официальном вики сайте категория статьи примерами кода python категория языки динамической типизацией категория языки веб категория высокоуровневые языки