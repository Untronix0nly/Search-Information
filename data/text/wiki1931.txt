xml расширяемый язык разметки рекомендован консорциумом всемирной паутины спецификация xml описывает xml документы частично описывает поведение xml процессоров программ читающих xml документы обеспечивающих доступ их содержимому xml разрабатывался как язык простым формальным синтаксисом удобный для создания обработки документов программами одновременно удобный для чтения создания документов человеком подчёркиванием нацеленности на использование интернете язык называется расширяемым поскольку он не фиксирует разметку используемую документах разработчик волен создать разметку соответствии потребностями конкретной области будучи ограниченным лишь синтаксическими правилами языка расширение xml это конкретная грамматика созданная на базе xml представленная словарём тегов их атрибутов также набором правил определяющих какие атрибуты элементы могут входить состав других элементов сочетание простого формального синтаксиса удобства для человека расширяемости также базирование на кодировках юникод для представления содержания документов привело широкому использованию как собственно xml так множества производных языков на базе xml самых разнообразных программных средствах xml является подмножеством sgml язык xml спецификация xml описывает язык ряд вопросов касающихся кодировки обработки документов материал этой секции представляет собой сокращённое изложение описания языка спецификации xml адаптированное для настоящей статьи нормативным считается английский вариант документа поэтому основные термины приводятся их английскими оригиналами перевод основных терминов основном следует доступному интернете переводу спецификации на русский язык исключение составляют термины tag declaration для термина tag здесь используется перевод тег для термина declaration отдано предпочтение переводу объявление против также кальки декларация литературе интернете могут встречаться иные переводы основных терминов физическая логическая структуры документа физической точки зрения документ состоит из сущностей из которых каждая может отсылать на другую сущность единственный корневой элемент документная сущность содержание сущностей символы логической точки зрения документ состоит из комментариев объявлений элементов ссылок на сущности инструкций обработки всё это документе структуризуется разметкой физическая структура сущность мельчайшая часть документе все сущности что нибудь содержат всех них есть имя существуют исключения напр документная сущность проще говоря термин сущность описывает сущую вещь что то документ состоит из сущностей содержание которых символы все они разделены на два типа символьные данные разметки разметке принадлежат теги обозначающие границы элементов объявления инструкции обработки включая их атрибуты ссылки на сущности комментарии также символов обрамляющие секции cdata часть документа не принадлежащая разметке составляет символьные данные документа логическая структура все составляющие части документа обобщаются пролог корневой элемент корневой элемент обязательная часть документа составляющая всю его суть пролог вообще говоря может отсутствовать может включать может не включать вложенные него элементы символьные данные также комментарии вложенные корневой элемент элементы свою очередь могут включать вложенные них элементы символьные данные комментарии так далее пролог может включать объявления инструкции обработки комментарии его следует начинать объявления xml хотя определённой ситуации допускается отсутствие этого объявления элементы документа должны быть правильно вложены любой элемент начинающийся внутри другого элемента то есть любой элемент документа кроме корневого должен заканчиваться внутри элемента котором он начался символьные данные могут встречаться внутри элементов как непосредственно так специальных секциях cdata объявления инструкции обработки элементы могут иметь связанные ними атрибуты атрибуты используются для связывания логической единицей текста пар имя значение символы разметки разметка всегда начинается символом заканчивается символом наряду символами специальную роль для разметки играет также символ угловые скобки обозначают границы элементов инструкций обработки некоторых других амперсанд позволяет выполнить замену текста при помощи сущностей решение проблемы неоднозначности разметки употребление разметочных символов символьных данных затрудняет распознавание конструкций разметки может создать проблему неоднозначности структуры xml эта проблема решается следующим образом gt amp кроме того для употребления апострофов кавычек внутри значений атрибутов используются следующие сущности apos apos quot правило замены символов используемых разметке на ими обозначаемые сущности не на символьные данные секциях cdata зато выполняется во всех остальных местах документа имена языке xml все имена должны начинаться буквы символа подчёркивания или двоеточия продолжаться только допустимыми для имён символами именно они могут содержать только буквы входящие секцию букв кодировки unicode арабские цифры дефисы знаки подчёркивания точки двоеточия однако имена не могут начинаться со строки xml любом регистре имена начинающиеся этих символов зарезервированы для использования консорциумом нужно помнить что так как буквы не ограничены исключительно символами ascii то именах можно использовать слова из родного языка пролог объявление xml объявление xml указывает версию языка на которой написан документ поскольку интерпретация содержимого документа зависит от версии языка то спецификация предписывает начинать документ объявления xml первой версии языка использование объявления не было обязательным последующих версиях оно обязательно таким образом версия языка определяется из объявления если объявление отсутствует то принимается версия кроме версии xml объявление может также содержать информацию кодировке документа оставаться ли документу со своим собственным dtd или подключённым пример или во всех этих примерах отсутствовал атрибут standalone который как раз определяет подключить ли документу описания разметки извне по умолчанию он равен no если xml документ ссылается на другие dtd файлы которые описывают что документ может содержать вы должны указать standalone no если xml документ не ссылается на другие файлы будет пользоваться своим dtd вы должны указать standalone yes объявление типа документа для объявления типа документа существует специальная инструкция doctype она позволяет задать при помощи языка dtd какие документ входят элементы каковы их атрибуты какие сущности могут использоваться кое что ещё например вот корректный документ hello world нём есть корневой элемент логической точки зрения документ существует однако он недействителен при помощи объявления типа документа dtd возможно описывать его содержание логическую структуру также связывать определённым элементом пару имя значение запишем как выглядит пролог используя запись бэкуса наура prolog xmldecl misc doctypedecl misc xmldecl versioninfo version eq versionnum versionnum eq versionnum misc comment pi doctypedecl declsep pereference intsubset markupdecl declsep markupdecl elementdecl attlistdecl entitydecl notationdecl pi comment extsubset textdecl extsubsetdecl extsubsetdecl markupdecl conditionalsect declsep мы видим что после xml объявления могут следовать комментарии инструкции обработки или же пустые пространства но затем идёт объявления типа документа где name имя корневого тега externalid внешний идентификатор intsubset объявление разметки или же ссылка на сущность как гласит спецификация если внешний идентификатор объявляется вместе со внутренним объявлением последнее идёт перед первым например hello world здесь system hello dtd внешний идентификатор адрес hello dtd позволяет задействовать данные документе hello dtd как объявления разметки hello world здесь же разметка была объявлена местно инструкция обработки инструкции обработки позволяют размещать документе инструкции для приложений следующем примере показана инструкция обработки передающая xml stylesheet приложению например браузеру инструкции файле my style css посредством атрибута href комментарий комментарии не относятся символьным данным документа комментарий начинается внутри не может встречаться комбинация символов символ не используется внутри комментария качестве разметки пример корневой элемент элемент его разметка элемент является понятием логической структуры документа каждый документ содержит один или несколько элементов границы элементов представлены начальным конечным тегами имя элемента начальном конечном тегах элемента должно совпадать элемент может быть также представлен тегом пустого то есть не включающего себя другие элементы символьные данные элемента тег конструкция разметки которая содержит имя элемента начальный тег конечный тег тег пустого элемента элементе атрибуты могут использоваться только начальном теге теге пустого элемента пример кулинарного рецепта размеченного помощью xml простой хлеб мука дрожжи тёплая вода смешать все ингредиенты тщательно замесить закрыть тканью оставить на один час тёплом помещении замесить ещё раз положить на противень поставить духовку секция cdata секция cdata не является логической единицей текста секция может встречаться любом месте документа где синтаксис позволяет размещать символьные данные секция начинается завершается между этой разметкой находятся символьные данные символьные данные при этом включают символы их форме корректный документ корректный документ соответствует всем общим правилам синтаксиса xml применимым любому xml документу правильная структура документа совпадение имен начальном конечном теге элемента документ который неправильно построен не может считаться документом xml пространства имён пример документа btn msg_generic all sisteme giriş forward mainmenu login_dlg start step btnforward login all check login_succeeded all hata generic_neg htm yanlış kullanıcı ismi lütfen kullanıcı ismini doğru giriniz back btnback start all hata generic_neg htm hatalı parola lütfen parolanızı doğru giriniz back btnback start back btnback forward btnforward mainmenu quitapplication quitapp xml start error errdsc_null htm hata all forward btnforward msg_generic generic_msg htm msg_generic btnmainmenu btnquitapp all mainmenu errdsc_null htm hata şlem sırasında bir hata meydana geldi btnmainmenu регламентация работы документами правила языки программные интерфейсы этот раздел содержит изложение некоторых положений рекомендаций касающихся работы документами соответствующие рекомендации могут относиться как документам xml так более широкому классу документов ссылки как правило даются на средства работы документами рекомендованные кодировка документов спецификация требует чтобы обрабатывающие программы поддерживали по крайней мере две кодировки юникод utf utf xml процессор приложение спецификация xml определяет понятия xml процессор приложение xml процессор парсер программа анализирующая разметку передающая информацию структуре документа другой программе приложению спецификация xml налагает определённые требования на процессор не касаясь требований приложению действительный документ проверяющие непроверяющие процессоры документ является действительным если ним связано объявление типа документа если этот документ отвечает представленным объявлении типа ограничениям xml процессоры делятся на два класса проверяющие непроверяющие проверяющие процессоры проверяют документа должны сообщать по выбору пользователя нарушении ограничений объявлении типа документа непроверяющие процессоры не проверяют документа но обязанности по предварительной обработке документа упомянутые выше остаются за ними описание типов языки схем для описания типов документов используются языки схем поскольку xml является подмножеством языка sgml то он унаследовал разработанный для sgml язык document type definition dtd позднее были разработаны другие языки схем наиболее известны из которых xml schema relax ng преобразование документа xml для решения задачи преобразования документа xml другую схему или другой формат предназначен язык xslt формат для визуализации документа для документа документа подготовленного визуализации предназначен формат xsl fo языки запросов xpath синтаксис для адресации содержимого документа представленного форме дерева выражения xpath используются языке xquery выражения xpath вообще говоря могут использоваться любом контексте где уместно использовать формальные ссылки на элементы дерева частности качестве параметров для методов интерфейсов доступа документу xquery язык ориентированный на работу документами чтение xml три варианта api для чтения xml есть три варианта api событийный api xml процессор читает xml при определённом событии появлении открывающего или закрывающего тега текстовой строки атрибута вызывается callback функция для простоты событийный процессор может собрать памяти все атрибуты одного тега на манер dom но это подразумевает что пользователь невраждебен то есть не даёт xml большим количеством атрибутов одном теге чтобы заполнить всю память быстр расходует мало памяти крайне сложен приходится держать памяти информацию каком месте документа мы находимся библиотека проста почти верные xml перепутанным порядком тегов считаются ошибочными если xml много объектов перекрёстными ссылками друг на друга надо организовать временное хранение строковых ссылок чтобы потом когда документ будет считан преобразовать идентификаторы указатели при ошибке xml памяти остаётся полусозданная структура предметной отрасли программист должен своими руками корректно уничтожить её api только для чтения для записи потребуется другой api примеры библиотек sax expat alpha bravo enum class place root document thing place place root root document class myevent public xml event private place place place root thing currthing null public return true тег нужен false пропустить его всё что внутри bool ontagopen const std string aname override void ontagclose override void onattr const std string aname const std string avalue override void ontext const std string atext override bool myevent ontagopen const std string aname switch place case place root if aname document place place document return true break case place document if aname thing place place thing currthing things emplace_back return true break return false void myevent ontagclose place void myevent onattr const std string aname const std string avalue if place place thing aname name currthing name avalue void myevent ontext const std string atext if place place thing currthing value atext xml eventdrivenread in xml myevent потоковый api устроен на манер потоков ввода вывода как событийном api для простоты процессор может собирать памяти все атрибуты одного тега на манер dom но это подразумевает что пользователь невраждебен быстр расходует мало памяти довольно сложен впрочем информация каком месте документа мы находимся неявно задаётся местом потоке выполнения библиотека сложна почти верные xml перепутанным порядком тегов считаются ошибочными если xml много объектов перекрёстными ссылками друг на друга надо организовать временное хранение строковых ссылок чтобы потом когда документ будет считан преобразовать указатели продвинутые библиотеки могут запомнить внутреннее состояние процессора потом вернуться нему тогда можно реализовать простановку ссылок на манер dom первым проходом построить объекты без ссылок вторым восстановить ссылки правда таком случае xml считывается дважды что медленно при ошибке xml памяти остаётся полусозданная структура предметной отрасли программист должен своими руками корректно уничтожить её api только для чтения для записи потребуется другой api примеры библиотек stax xml streamreader reader in xml std string name value if reader gettag document throw std logic_error нужен тег document reader goinside while reader gettag thing thing currthing things emplace_back while reader getattribute name value if name name currthing name value reader goinside if reader gettext value currthing value value reader gooutside reader объектный api document object model dom объектная модель документа считывает xml воссоздаёт его памяти виде объектной структуры наиболее медленный вариант расходует много памяти учётом накладных расходов на объекты на предельная длина файла несколько сотен мегабайт прост библиотека проста зачастую удаётся распознать почти верные xml перепутанным порядком тегов если xml много объектов перекрёстными ссылками друг на друга достаточно дважды пройтись по документу первый раз создать объекты без ссылок заполнить словарь название объект второй раз восстановить ссылки при ошибке xml памяти остаётся полусозданная структура xml которая будет автоматически уничтожена самой библиотекой общий api для чтения записи естественный выбор когда объектом предметной области является сам xml например веб браузере xml редакторе импортёре программе локализатору который извлекает строки из xml произвольной структуры примеры библиотек jdom tinyxml pugixml xml document doc in xml xml element elroot doc requireelement document for xml element elthing elroot thing elthing null elthing elthing thing thing thing things emplace_back thing name elthing name thing value elthing requiretext бывают гибридные api внешние маловажные части читаются потоковым методом внутренние важные объектным xml streamreader reader in xml std string name value if reader gettag document throw std logic_error нужен тег document reader goinside while reader gettag thing xml element elthing reader thing thing things emplace_back thing name elthing name thing value elthing requiretext reader запись xml два варианта api api прямой записи записывает xml тег за тегом атрибут за атрибутом быстр нет промежуточных объектов примитивная библиотека может делать неоптимальный xml например вместо работающая оптимально намного сложнее непригоден для отдельных специфических задач если структуры предметной области работают ненадёжно без специальных мер записать память или другой файл потом переименовать можно остаться упавшей программой потерянным файлом при ошибке программиста может получиться синтаксически некорректный xml api только для записи для чтения потребуется другой api xml writer wri out xml wri opentag document for thinglist const_iterator it things begin it things end it wri opentag thing wri writeattr name it name wri writetext it value wri closetag thing wri closetag document объектный api он же document object model создаёт объектную структуру для xml что может отнять памяти больше чем структура предметной отрасли универсален впрочем большинстве задач преимущества над хорошо проработанным api прямой записи нет отличие от чтения даже если структуры предметной области работают ненадёжно программист не предусмотрел никакой защиты единственный сценарий когда файл на неполный нехватка места на диске общий api для записи чтения примеры библиотек те же что для чтения xml методом dom построим xml памяти xml document doc xml element elnode doc addelement document for thinglist const_iterator it things begin it things end it xml element elthing elnode addelement thing elthing setattr name it name elthing addtext it value запишем его doc writefile out xml инструменты работы документами парсеры средства создания визуализации системы баз данных реализации парсеров xml имеет реализации парсеров для всех современных языков веб браузеры как инструмент визуализации документа визуализация без использования стилей css без использования css или xsl xml документ отображается как простой текст большинстве веб браузеров некоторые браузеры такие как internet explorer mozilla firefox opera встроенный инструмент opera dragonfly отображают структуру документа виде дерева позволяя сворачивать разворачивать узлы помощью нажатий клавиши мыши применение стилей css процесс аналогичен применению css html документу для отображения для применения css при отображении браузере xml документ должен содержать специальную ссылку на таблицу стилей например это отличается от подхода html где используется элемент применение преобразований формату xsl fo современные браузеры принадлежат числу программных средств способных выполнять преобразования xslt браузере такое преобразование выполняется как правило для форматирования документа преобразования документа формат xsl fo следующая инструкция прологе документа xml предписывает браузеру выполнить xslt преобразование описанное файле transform xsl редакторы xml документом xml можно работать обычном текстовом редакторе однако обычные редакторы не поддерживают структуру документа существуют специальные редакторы xml которые делают работу документом более удобной эффективной системы управления базами данных работающие данными формате xml система управления базами данных db позволяет хранить данные формате xml предоставляет доступ таким данным помощью языка xquery поддержка на аппаратном уровне xml поддерживается на низком аппаратном программном уровнях современных аппаратных решениях область применения ограничения перспективы развития эффективность использования xml xml язык разметки другими словами средство описания документа именно нише документов текстов где доля разнотипных символьных данных велика доля разметки мала xml успешен другой стороны обмен данными открытых системах не сводится обмену документами избыточность разметки xml целях разработки языка прямо указано что лаконичность не является приоритетом проекта сказывается ситуациях когда данные не вписываются традиционную модель документа лента новостей например оформляемая использованием синтаксиса xml форматы rss atom представляет собой не документ традиционном понимании поток однотипных мини документов многословная избыточная разметка этом случае составляет существенную часть передаваемых данных озабочен эффективностью применения xml соответствующие рабочие группы занимаются этой проблемой началу года нормативные документы не разработаны другая ситуация когда форматы xml могут оказаться не лучшим решением работа данными простой структурой небольшим по объёму содержанием полей данных этом случае доля разметки общем объёме велика программная обработка xml может оказаться неоправданно затратной по сравнению работой данными более простой структуры этой области разработчики рассматривают средства изначально ориентированные на данные такие как ini yaml json скриптовый язык для работы xml работает над созданием скриптового языка для работы xml началу года нормативные документы не разработаны см также xhtml версия html отвечающая синтаксическим требованиям xml xsd язык описания структуры xml документов soap протокол передачи данных котором для сообщений используется формат xml fb формат описания книг основанный на xml dita wddx apml примечания литература ссылки xml на сайте консорциума всемирной паутины официальная спецификация стандарта xml официальная спецификация стандарта xml doug tidwell введение xml документация по xml на сайте ibm статьи форумы форматирование xml инструмент форматирования xml просмотр xml просмотр редактирование данных xml категория файлы конфигурации категория протоколы уровня категория протоколы прикладного уровня категория стандарты