метод бисекции или метод деления отрезка пополам простейший численный метод для решения нелинейных уравнений вида предполагается только непрерывность функции поиск основывается на теореме промежуточных значениях обоснование алгоритм основан на следующем следствии из теоремы больцано коши таким образом если мы ищем ноль то на концах отрезка функция должна быть противоположных знаков разделим отрезок пополам возьмём ту из половинок на концах которой функция по прежнему принимает значения противоположных знаков если значение функции серединной точке оказалось искомым нулём то процесс завершается точность вычислений задаётся одним из двух способов по оси что ближе условию из описания алгоритма или по оси что может оказаться удобным некоторых случаях процедуру следует продолжать до достижения заданной точности для поиска произвольного значения достаточно вычесть из значения функции искомое значение искать ноль получившейся функции описание алгоритма задача заключается нахождении корней нелинейного уравнения для начала итераций необходимо знать отрезок значений на концах которого функция принимает значения противоположных знаков знаков значений функции на концах отрезка можно определить множеством способов один из множества этих способов умножение значений функции на концах отрезка определение знака произведения путём сравнения результата умножения нулём действительных вычислениях такой способ проверки знаков при крутых функциях приводит переполнению для устранения переполнения уменьшения затрат времени то есть для увеличения быстродействия на некоторых программно компьютерных комплексах знаков значений функции на концах отрезка нужно определять по формуле так как одна операция сравнения двух знаков двух чисел требует меньшего времени чем две операции умножение двух чисел особенно плавающей запятой двойной длины сравнение результата нулём при данном сравнении значения функции точках можно не вычислять достаточно вычислить только знаки функции этих точках что требует меньшего машинного времени из непрерывности функции условия следует что на отрезке существует хотя бы один корень уравнения случае не монотонной функции функция имеет несколько корней метод приводит нахождению одного из них найдём значение середине отрезка действительных вычислениях для уменьшения числа операций начале вне цикла вычисляют длину отрезка по формуле цикле вычисляют длину очередных новых отрезков по формуле новую середину по формуле вычислим значение функции середине отрезка если или действительных вычислениях где заданная точность по оси то корень найден иначе или действительных вычислениях то разобьём отрезок на два равных отрезка теперь найдём новый отрезок на котором функция меняет знак если значения функции на концах отрезка имеют противоположные знаки на левом отрезке или то соответственно корень находится внутри левого отрезка тогда возьмём левый отрезок присвоением повторим описанную процедуру до достижения требуемой точности по оси иначе значения функции на концах отрезка имеют противоположные знаки на правом отрезке или то соответственно корень находится внутри правого отрезка тогда возьмём правый отрезок присвоением повторим описанную процедуру до достижения требуемой точности по оси за количество итераций деление пополам осуществляется раз поэтому длина конечного отрезка раз меньше длины исходного отрезка существует похожий метод но критерием останова вычислений по оси этом методе вычисления продолжаются до тех пор пока после очередного деления пополам новый отрезок больше заданной точности по оси этом методе отрезок на оси может достичь заданной величины значения функций особенно крутых на оси могут очень далеко отстоять от нуля при пологих же функциях этот метод приводит большому числу лишних вычислений дискретных функциях это номера элементов массива которые не могут быть дробными случае второго критерия останова вычислений разность не может быть меньше псевдокод пусть xn начало отрезка по xk конец отрезка по xi середина отрезка по epsy требуемая точность вычислений по заданное приближение интервала xn xk xk xn нулю тогда алгоритм метода бисекции можно записать псевдокоде следующим образом начало ввод xn xk epsy если xn то вывод корень уравнения xn если xk то вывод корень уравнения xk пока xk xn epsy повторять dx xk xn xi xn dx если sign xn sign xi то xk xi иначе xn xi конец повторять вывод найден корень уравнения xi точностью по epsy конец поиск значения корня монотонной дискретной функции поиск наиболее приближённого корню значения монотонной дискретной функции заданной таблично записанной массиве заключается разбиении массива пополам на две части выборе из двух новых частей той части которой значения элементов массива меняют знак путём сравнения знаков срединного элемента массива со знаком граничного значения повторении алгоритма для половины которой значения элементов массива меняют знак пусть переменные леваяграница праваяграница содержат соответственно левую левгран правую правгран границы массива которой находится приближение корню исследование начинается разбиения массива пополам на две части путём нахождения номера среднего элемента массива середина если знаки значений массива массивсередина противоположны то приближение корню ищут левой половине массива то есть значением праваяграница становится середина на следующей итерации исследуется только левая половина массива если знаки значений массивсередина одинаковы то осуществляется переход поиску приближения корню правой половине массива то есть значением переменной леваяграница становится середина на следующей итерации исследуется только правая половина массива результате каждой проверки область поиска сужается вдвое например если длина массива равна то после первого сравнения область сужается до элементов после второго до для поиска приближения корню массиве из элементов достаточно проходов итераций псевдокод леваяграница левгран праваяграница правгран while праваяграница леваяграница длинаотрезка правгран левгран половинаотрезка int длинаотрезка середина леваяграница половинаотрезка if sign sign массивсередина праваяграница середина else леваяграница середина printf середина см также линейный поиск двоичный поиск метод дихотомии метод золотого сечения троичный поиск метод ньютона примечания литература ссылки решение уравнений методом бисекции онлайн метод бисекции на сервере применения mathcad метод бисекции mathcad maple matlab mathematica использование метода бисекции свободно программа для вычисления точки категория численные методы решения уравнений