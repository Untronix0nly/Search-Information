ядро центральная часть операционной системы ос обеспечивающая приложениям доступ ресурсам компьютера таким как процессорное время память внешнее аппаратное обеспечение внешнее устройство ввода вывода информации также обычно ядро предоставляет сервисы файловой системы сетевых протоколов как элемент ос ядро представляет собой наиболее низкий уровень абстракции для доступа приложений ресурсам системы необходимым для их работы как правило ядро предоставляет такой доступ исполняемым процессам соответствующих приложений за счёт использования механизмов межпроцессного взаимодействия обращения приложений системным вызовам ос описанная задача может различаться зависимости от типа архитектуры ядра способа её реализации типы архитектур ядер операционных систем монолитное ядро монолитное ядро предоставляет богатый набор абстракций оборудования все части монолитного ядра работают одном адресном пространстве это такая схема операционной системы при которой все компоненты её ядра являются составными частями одной программы используют общие структуры данных взаимодействуют друг другом путём вызова процедур монолитное ядро старейший способ организации операционных систем примером систем монолитным ядром является большинство unix систем достоинства скорость работы упрощённая разработка модулей недостатки поскольку всё ядро работает одном адресном пространстве сбой одном из компонентов может нарушить всей системы примеры традиционные ядра unix такие как bsd linux ядро ms dos ядро kolibrios некоторые старые монолитные ядра особенности систем класса unix linux требовали перекомпиляции при любом изменении состава оборудования большинство современных ядер позволяют во время работы подгружать модули выполняющие часть функций ядра этом случае компоненты операционной системы являются не модулями составными частями одной большой программы называемой монолитным ядром monolithic kernel которое представляет собой набор процедур каждая из которых может вызвать каждую все процедуры работают режиме модульное ядро модульное ядро современная модификация архитектуры монолитных ядер операционных систем отличие от классических монолитных ядер модульные ядра как правило не требуют полной перекомпиляции ядра при изменении состава аппаратного обеспечения компьютера вместо этого модульные ядра предоставляют тот или иной механизм подгрузки модулей ядра поддерживающих то или иное аппаратное обеспечение например драйверов при этом подгрузка модулей может быть как динамической выполняемой на лету без перезагрузки ос работающей системе так статической выполняемой при перезагрузке ос после системы на загрузку тех или иных модулей микроядро микроядро предоставляет только элементарные функции управления процессами минимальный набор абстракций для работы оборудованием бо льшая часть работы осуществляется помощью специальных процессов называемых сервисами решающим критерием микроядерности является размещение всех или почти всех драйверов модулей сервисных процессах иногда явной невозможностью загрузки любых модулей расширения собственно микроядро также разработки таких расширений достоинства устойчивость сбоям оборудования ошибкам компонентах системы основное достоинство микроядерной архитектуры высокая степень модульности ядра операционной системы это существенно упрощает добавление него новых компонентов микроядерной операционной системе можно не прерывая её работы загружать выгружать новые драйверы файловые системы существенно упрощается процесс отладки компонентов ядра так как новая версия драйвера может загружаться без перезапуска всей операционной системы компоненты ядра операционной системы ничем принципиально не отличаются от программ поэтому для их отладки можно применять обычные средства микроядерная архитектура повышает надежность системы поскольку ошибка на уровне программы менее опасна чем отказ на уровне режима ядра недостатки передача данных между процессами требует накладных расходов классические микроядра предоставляют лишь очень небольшой набор низкоуровневых примитивов или системных вызовов реализующих базовые сервисы операционной системы сервисные процессы принятой семействе unix терминологии демоны активно используются самых различных ос для задач типа запуска программ по расписанию unix windows nt ведения журналов событий unix windows nt проверки паролей хранения пароля текущего интерактивного пользователя специально ограниченной области памяти windows nt тем не менее не следует считать ос микроядерными только из за использований такой архитектуры примеры symbian os windows ce openvms mach используемый gnu hurd mac os qnx aix minix chorusos amigaos morphos экзоядро экзоядро ядро операционной системы предоставляющее лишь функции для взаимодействия между процессами безопасного выделения освобождения ресурсов предполагается что api для прикладных программ будут предоставляться внешними по отношению ядру библиотеками откуда название архитектуры возможность доступа устройствам на уровне контроллеров позволит эффективней решать некоторые задачи которые плохо вписываются рамки универсальной ос например реализация субд будет иметь доступ диску на уровне секторов диска не файлов кластеров что положительно скажется на быстродействии наноядро наноядро архитектура ядра операционной системы рамках которой крайне упрощённое минималистичное ядро выполняет лишь одну задачу обработку аппаратных прерываний генерируемых устройствами компьютера после обработки прерываний от аппаратуры наноядро свою очередь посылает информацию результатах обработки например полученные клавиатуры символы вышележащему программному обеспечению при помощи того же механизма прерываний примером является keykos самая первая ос на наноядре первая версия вышла ещё году гибридное ядро гибридные ядра это микроядра позволяющие для ускорения работы запускать несущественные части пространстве ядра пример ядра ос windows семейства nt комбинация разных подходов все рассмотренные подходы построению операционных систем имеют свои достоинства недостатки большинстве случаев современные операционные системы используют различные комбинации этих подходов так например сейчас ядро linux представляет собой монолитную систему отдельными элементами модульного ядра при компиляции ядра можно разрешить динамическую загрузку выгрузку очень многих компонентов ядра так называемых модулей момент загрузки модуля его код загружается на уровне системы связывается остальной частью ядра внутри модуля могут использоваться любые экспортируемые ядром функции существуют варианты ос gnu которых вместо монолитного ядра применяется ядро mach такое же как hurd поверх него крутятся пространстве те же самые процессы которые при использовании linux были бы частью ядра другим примером смешанного подхода может служить возможность запуска операционной системы монолитным ядром под управлением микроядра так устроены bsd mklinux основанные на микроядре mach микроядро обеспечивает управление виртуальной памятью работу низкоуровневых драйверов все остальные функции том числе взаимодействие прикладными программами осуществляются монолитным ядром данный подход сформировался результате попыток использовать преимущества микроядерной архитектуры сохраняя по возможности хорошо отлаженный код монолитного ядра смешанное ядро принципе должно объединять преимущества монолитного ядра микроядра казалось бы микроядро монолитное ядро крайности смешанное золотая середина них возможно добавлять драйвера устройств двумя способами внутрь ядра пространство но на практике концепция смешанного ядра часто подчёркивает не только достоинства но недостатки обоих типов ядер примеры windows nt dragonfly bsd примечания ссылки ядро dmoz org литература категория ядра операционных систем