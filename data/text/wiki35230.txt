многозада чность свойство операционной системы или среды выполнения обеспечивать возможность параллельной или обработки нескольких задач истинная многозадачность операционной системы возможна только распределённых вычислительных системах существует типа многозадачности процессная многозадачность основанная на процессах одновременно выполняющихся программах здесь программа наименьший элемент управляемого кода которым может управлять планировщик операционной системы более известна большинству пользователей работа текстовом редакторе прослушивание музыки поточная многозадачность основанная на потоках наименьший элемент управляемого кода поток одна программа может выполнять более задачи одновременно многопоточность форма многозадачности свойства многозадачной среды примитивные многозадачные среды обеспечивают чистое разделение ресурсов когда за каждой задачей закрепляется определённый участок памяти задача активизируется строго определённые интервалы времени более развитые многозадачные системы проводят распределение ресурсов динамически когда задача стартует памяти или покидает память зависимости от её приоритета от стратегии системы такая многозадачная среда обладает следующими особенностями каждая задача имеет свой приоритет соответствии которым получает процессорное время память система организует очереди задач так чтобы все задачи получили ресурсы зависимости от приоритетов стратегии системы система организует обработку прерываний по которым задачи могут активироваться удаляться по окончании положенного кванта времени ядро временно переводит задачу из состояния выполнения состояние готовности отдавая ресурсы другим задачам при нехватке памяти страницы невыполняющихся задач могут быть вытеснены на диск своппинг потом через определённое системой время памяти система обеспечивает защиту адресного пространства задачи от вмешательства других задач система обеспечивает защиту адресного пространства своего ядра от вмешательства задач система распознаёт сбои зависания отдельных задач прекращает их система решает конфликты доступа ресурсам устройствам не допуская тупиковых ситуаций общего зависания от ожидания заблокированных ресурсов система гарантирует каждой задаче что рано или поздно она будет активирована система обрабатывает запросы реального времени система обеспечивает коммуникацию между процессами трудности реализации многозадачной среды основной трудностью реализации многозадачной среды является её надёжность выраженная защите памяти обработке сбоев прерываний предохранении от зависаний тупиковых ситуаций кроме надёжности многозадачная среда должна быть эффективной затраты ресурсов на её поддержание не должны мешать процессам проходить замедлять их работу резко ограничивать память история многозадачных операционных систем поначалу реализация многозадачных операционных систем представляла собой серьёзную техническую трудность отчего внедрение многозадачных систем затягивалось пользователи долгое время после внедрения предпочитали однозадачные дальнейшем после появления нескольких удачных решений многозадачные среды стали настоящее время употребляются повсеместно впервые многозадачность операционной системы была реализована ходе разработки операционной системы multics год одной из первых многозадачных систем была os используемая для компьютеров фирмы ibm их советских аналогов ес эвм разработки системы были сильно затянуты на начальное время фирма ibm выдвинула однозадачный dos чтобы удовлетворить заказчиков до полной сдачи os эксплуатацию система подвергалась критике по причине малой надёжности трудности эксплуатации году на основе multics была разработана система unix достаточно аккуратным алгоритмическим решением проблемы многозадачности настоящее время на базе unix созданы десятки операционных систем на компьютерах pdp их советских аналогах см использовалась многозадачная система rsx советский аналог осрв см эвм система распределения времени tsx plus обеспечивающая ограниченные возможности многозадачности режим разделения времени эмулируя для каждого пользователя однозадачную rt советский аналог рафос последнее решение было весьма популярно из за низкой эффективности надёжности полноценной многозадачной системы аккуратным решением оказалась операционная система vms разработанная первоначально для компьютеров vax советский аналог см как развитие rsx первый мире мультимедийный персональный компьютер amiga год изначально проектировался расчётом на полную аппаратную поддержку вытесняющей многозадачности реального времени ос amigaos данном случае разработка аппаратной программной части велась параллельно это привело тому что по показателю квантования планировщика многозадачности секунды на переключение контекста amigaos долгое время оставалась непревзойдённой на персональных компьютерах многозадачность обеспечивала также фирма microsoft операционных системах windows использование опыта vms обеспечило системам существенно более высокую надёжность по времени переключения контекста многозадачности квантование только эти операционные системы могут быть сравнимы amigaos unix также его потомками такими как ядро linux интересно что многозадачность может быть реализована не только операционной но языковой среде например спецификации языков modula ada требуют поддержки многозадачности вне привязки какой либо операционной системе результате популярная первой половине годов реализация языка topspeed модула от jpi clarion позволяла организовывать различные типы многозадачности кооперативную вытесняющую см ниже для потоков одной программы рамках такой принципиально однозадачной операционной системы как ms dos это осуществлялось путём включения модуль программы компактного планировщика задач содержащего обработчик таймерных прерываний языки обладающие таким свойством иногда называют языками реального времени типы многозадачности простое переключение тип многозадачности при котором операционная система одновременно загружает память два или более приложений но процессорное время предоставляется только основному приложению для выполнения фонового приложения оно должно быть активизировано подобная многозадачность может быть реализована не только операционной системе но помощью программ переключателей задач этой категории известна программа desqview работавшая под dos впервые выпущенная году преимущества можно задействовать уже работающие программы написанные без учёта многозадачности недостатки невозможно неинтерактивных системах работающих без участия человека взаимодействие между программами крайне ограничено совместная или кооперативная многозадачность тип многозадачности при котором следующая задача выполняется только после того как текущая задача явно объявит себя готовой отдать процессорное время другим задачам как частный случай такое объявление подразумевается при попытке захвата уже занятого объекта мьютекс ядро linux также при ожидании поступления следующего сообщения от подсистемы интерфейса windows версий до включительно также битные приложения windows кооперативную многозадачность можно назвать второй ступени поскольку она использует более передовые методы чем простое переключение задач реализованное многими известными программами например dos shell из ms dos при простом переключении активная программа получает все процессорное время фоновые приложения полностью замораживаются при кооперативной многозадачности приложение может захватить фактически столько процессорного времени сколько оно считает нужным все приложения делят процессорное время периодически передавая управление следующей задаче преимущества кооперативной многозадачности отсутствие необходимости защищать все разделяемые структуры данных объектами типа критических секций мьютексов что упрощает особенно перенос кода из однозадачных сред многозадачные недостатки неспособность всех приложений работать случае ошибки одном из них приводящей отсутствию вызова операции отдать процессорное время крайне затрудненная возможность реализации многозадачной архитектуры ввода вывода ядре ос позволяющей процессору исполнять одну задачу то время как другая задача инициировала операцию ввода вывода ждет её завершения вытесняющая или приоритетная многозадачность режим реального времени вид многозадачности котором операционная система сама передает управление от одной выполняемой программы другой случае завершения операций ввода вывода возникновения событий аппаратуре компьютера истечения таймеров квантов времени или же поступлений тех или иных сигналов от одной программы другой этом виде многозадачности процессор может быть переключен исполнения одной программы на исполнение другой без всякого пожелания первой программы буквально между любыми двумя инструкциями её коде распределение процессорного времени осуществляется планировщиком процессов тому же каждой задаче может быть назначен пользователем или самой операционной системой определенный приоритет что обеспечивает гибкое управление распределением процессорного времени между задачами например можно снизить приоритет ресурсоёмкой программе снизив тем самым скорость её работы но повысив фоновых процессов этот вид многозадачности обеспечивает более быстрый отклик на действия пользователя преимущества возможность полной реализации многозадачного ввода вывода ядре ос когда ожидание завершения ввода вывода одной программой позволяет процессору тем временем исполнять другую программу cильное повышение надежности системы целом сочетании использованием защиты памяти идеал виде ни одна программа режима не может нарушить работу ос целом становится достижимым хотя бы теоретически вне вытесняющей многозадачности он не достижим даже теории возможность полного использования многоядерных систем недостатки необходимость особой дисциплины при написании кода особые требования его защите всех разделяемых глобальных данных объектами типа критических секций мьютексов реализована таких ос как vms menuetos linux режиме часто режиме ядра всех unix подобных ос включая версии mac os ios symbian os режиме ядра ос windows только при исполнении на процессоре или старше задачами являются только все windows приложения вместе взятые каждая отдельная виртуальная машина дос между приложениями windows вытесняющая многозадачность не использовалась windows me без полноценной защиты памяти что служило причиной крайне низкой на одном уровне ms dos windows mac os версий до надежности этих ос windows nt xp vista режиме ядра режиме amigaos все версии до версии без полноценной защиты памяти что на практике для системных программ почти не сказывалось на надёжности из за высокой прозрачных api sdk программы ориентированные на железо амиги наоборот не отличались надёжностью проблемные ситуации многозадачных системах голодание starvation задержка времени от пробуждения потока до его вызова на процессор течение которой он находится списке потоков готовых исполнению возникает по причине присутствия потоков большими или равными приоритетами которые исполняются все это время негативный эффект заключается том что возникает задержка времени от пробуждения потока до исполнения им следующей важной операции что задерживает исполнение этой операции следом за ней работу многих других компонентов голодание создаёт узкое место системе не дает выжать из неё максимальную ограничиваемую только аппаратно обусловленными узкими местами любое голодание вне загрузки процессора может быть устранено повышением приоритета голодающей нити возможно временным как правило для предотвращения голодания ос автоматически вызывает на исполнение готовые нему потоки даже при наличии при условии что поток не исполнялся течение долгого времени секунд визуально эта картина хорошо знакома большинству пользователей windows если одной из программ поток зациклился до бесконечности то переднее окно работает нормально несмотря на это потоку связанному передним окном windows повышает приоритет остальные же окна большими задержками по порции секунду ибо их отрисовка данной ситуации работает только за счет механизма предотвращения голодания иначе бы голодала вечно гонка race condition порядок исполнения двух потоков кода обрабатывающих одни те же данные исполняемые двух различных потоках задачах приводит зависимости порядка правильности исполнения от случайных факторов устраняется добавлением необходимых блокировок примитивов синхронизации обычно является легко устраняемым дефектом забытая блокировка инверсия приоритета поток имеет низкий приоритет поток средний поток высокий поток захватывает мьютекс выполняясь удержанием мьютекса прерывается потоком который пробудился по какой то причине имеет более высокий приоритет поток пытается захватить мьютекс полученной ситуации поток ожидает завершения текущей работы потоком ибо пока поток исполняется поток не получает управления не может освободить мьютекс устраняется повышением приоритета всех нитей захватывающих данный мьютекс до одного того же высокого значения на период удержания мьютексa некоторые реализации мьютексов делают это автоматически ссылки аппаратная поддержка на примере процессора pentium битая ссылка примечания категория операционная система категория категория история компьютерной техники категория параллельные вычисления