fat таблица размещения файлов это классическая архитектура файловой системы которая из за своей простоты всё ещё широко используется для флеш накопителей используется дискетах картах памяти некоторых других носителях информации ранее использовалась на жёстких дисках разработана биллом гейтсом годах использовалась качестве основной файловой системы операционных системах семейств ms dos windows структура fat следует стандарту ecma подробно определяется официальной спецификацией от microsoft известной под названием fatgen версии системы fat существует три версии fat fat fat fat они отличаются разрядностью записей дисковой структуре то есть количеством бит отведённых для хранения номера кластера fat применяется основном для дискет fat для дисков малого объёма на основе fat была разработана новая файловая система exfat extended fat используемая преимущественно для флеш накопителей изначально fat не поддерживала иерархическую систему каталогов все файлы располагались корне диска это было сделано для упрощения на односторонних дискетах ёмкостью всего кбайт сортировать файлы по каталогам попросту не было смысла дискет на более кбайт хранение всех файлов корне оказалось неудобным тому же малый размер корневого каталога ограничивал количество файлов на диске каталоги были введены выходом ms dos различных операционных системах также были внедрены различные расширения fat например dr dos имеются дополнительные атрибуты доступа файлам windows linux поддержка длинных имён файлов lfn формате unicode virtual fat vfat os расширенные атрибуты всех файлов vfat vfat это расширение fat появившееся windows fat имена файлов имеют формат состоят только из символов кодировки ascii vfat была добавлена поддержка длинных до символов имён файлов кодировке utf le при этом lfn хранятся одновременно именами формате ретроспективно называемыми sfn lfn нечувствительны регистру при поиске однако отличие от sfn которые хранятся верхнем регистре lfn сохраняют регистр символов указанный при создании файла структура системы fat файловой системе fat смежные секторы диска объединяются единицы называемые кластерами количество секторов кластере равно степени двойки см далее для хранения данных файла отводится целое число кластеров минимум один так что например если размер файла составляет байт размер кластера кбайт реально занят информацией файла будет лишь отведённого для него места для избегания подобных ситуаций целесообразно уменьшать размер кластеров для сокращения объёма адресной информации повышения скорости файловых операций наоборот на практике выбирают некоторый компромисс так как ёмкость диска вполне может не выражаться целым числом кластеров обычно конце тома присутствуют так называемые surplus sectors остаток размером менее кластера который не может отводиться ос для хранения информации пространство тома fat логически разделено на три смежные области область содержит служебные структуры которые принадлежат загрузочной записи раздела partition boot record pbr для отличия от master boot record главной загрузочной записи диска также pbr часто некорректно называется загрузочным сектором используются при инициализации тома область таблицы fat содержащая массив индексных указателей ячеек соответствующих кластерам области данных обычно на диске представлено две копии таблицы fat целях надёжности область данных где записано собственно содержимое файлов то есть текст текстовых файлов кодированное изображение для файлов рисунков оцифрованный звук для аудиофайлов также метаданные информация относительно имён файлов папок их атрибутов времени создания изменения размеров размещения на диске fat fat также специально выделяется область корневого каталога она имеет фиксированное положение непосредственно после последнего элемента таблицы fat фиксированный размер байтных элементах при описании partition boot record указывается именно количество байтных элементов каждый из которых описывает какой либо элемент корневого каталога будь то файл или другой вложенный каталог если кластер принадлежит файлу то соответствующая ему ячейка таблице fat содержит номер следующего кластера этого же файла если ячейка соответствует последнему кластеру файла то она содержит специальное значение ffff для fat таким образом выстраивается цепочка кластеров файла неиспользуемым кластерам таблице соответствуют нули плохим кластерам которые исключаются из обработки например по причине нечитаемости соответствующей области устройства также соответствует специальный код при удалении файла первый знак имени заменяется специальным кодом цепочка кластеров файла таблице размещения обнуляется поскольку информация размере файла которая располагается каталоге рядом именем файла при этом остаётся нетронутой случае если кластеры файла располагались на диске последовательно они не были перезаписаны новой информацией возможно восстановление удалённого файла загрузочная запись первая структура тома fat называется bpb расположена области нулевом секторе эта структура содержит информацию тип файловой системы физические характеристики носителя дискеты или раздела на жёстком диске bios parameter block bpb принципе отсутствовал fat обслуживавшей ms dos так как то время предполагалось лишь два различных типа тома одно двусторонние пятидюймовые дискеты на кб причём формат тома определялся по первому байту области fat bpb был введён ms dos начале года как обязательная структура загрузочного сектора по которой впредь следовало определять формат тома старая схема определения по первому байту fat лишилась поддержки также ms dos была введена иерархия файлов папок до этого все файлы хранились корневом каталоге структура bpb ms dos содержала битное поле общего количества секторов что означало принципиальную неприменимость этой версии fat для томов объёмом более секторов то есть более мб при стандартном размере сектора байт ms dos вышеназванное поле bpb было расширено до бит что означало увеличение теоретического размера тома до секторов то есть до тб при байтном секторе следующая модификация bpb появилась вместе windows osr которой была введена fat августе года было снято ограничение тб на размер тома том fat теоретически может иметь размер до тб впрочем размер каждого отдельного файла при этом не может превышать гб bios parameter block fat целях совместимости ранними версиями fat повторяет bpb fat вплоть до поля bpb_totsec включительно далее следуют различия загрузочный сектор fat представляет собой три байтных сектора сектора каждый из них содержит сигнатуру xaa по адресу fe то есть последних двух байтах случае если размер сектора равен байт если же размер сектора более чем байт то сигнатура содержится как по адресу fe так последних двух байтах нулевого сектора то есть дублируется fsinfo загрузочная запись раздела fat содержит структуру под названием fsinfo используемую для хранения значения числа свободных кластеров тома fsinfo как правило занимает сектор см поле bpb_fsinfo имеет следующую структуру адреса относительно начала сектора fsi_leadsig байтовая подпись свидетельствует что сектор используется для структуры fsinfo fsi_reserved промежуток го по байт сектора включительно обнуляется fsi_strucsig ещё одна подпись расположена по адресу содержит значение fsi_free_count четырёхбайтовое поле по адресу содержит последнее известное системе значение числа свободных кластеров тома значение xffffffff означает что число свободных кластеров неизвестно должно вычисляться fsi_nxt_free четырёхбайтовое поле по адресу ec содержит номер кластера от которого должен начинаться поиск свободных кластеров по таблице индексных указателей обычно это поле содержит номер последнего кластера fat отведённого для хранения файла значение xffffffff означает что поиск свободного кластера должен проводиться самого начала таблицы fat то есть со второго кластера fsi_reserved байтное поле по адресу fsi_trailsig подпись xaa последние байта сектора fsinfo смысл введения fsinfo оптимизации работы системы так как fat таблица индексных указателей может иметь значительные размеры её побайтовый просмотр может занять значительное время однако значения полей fsi_free_count fsi_nxt_free могут не соответствовать должны проверяться на адекватность кроме того они даже не обновляются резервной копии fsinfo расположенной как правило секторе определение типа fat тома определение типа fat тома то есть выбор между fat fat fat производится ос по количеству кластеров томе которое свою очередь определяется из полей bpb прежде всего вычисляется количество секторов корневого каталога rootdirsectors bpb_rootentcnt bpb_bytspersec далее определяется какие из полей bpb_fatsz bpb_totsec не равны нулю они используются при определении количества секторов области данных тома datasec totsec bpb_resvdseccnt bpb_numfats fatsz rootdirsectors наконец определяется количество кластеров области данных countofclusters datasec bpb_secperclus по количеству кластеров проводится однозначное соответствие файловой системой countofclusters fat согласно официальной спецификации это единственный допустимый способ определения типа fat искусственное создание тома нарушающего указанные правила соответствия приведёт его некорректной обработке windows тем не менее рекомендуется избегать значений countofclusters близких критическим для верного определения типа файловой системы любыми часто некорректно написанными драйверами на дискете при форматировании всегда создаётся fat что касается жёстких дисков флеш накопителей то при размере накопителя до мб при байтном секторе по умолчанию создаётся fat свыше мб fat размер кластера определяется при форматировании исходя из файловой системы размера тома серийный номер тома серийный номер тома поле bs_volid windows создаётся из даты времени форматирования таким образом что восстановить их невозможно без дополнительной информации таблица fat следующая важная структура тома fat это сама таблица fat занимающая отдельную логическую область она определяет список цепочку кластеров которых размещаются файлы папки тома между кластерами индексными указателями таблицы имеется взаимно однозначное соответствие указатель соответствует кластеру тем же номером первому кластеру области данных присваивается номер значение индексного указателя соответствует состоянию кластера возможны следующие состояния кластер свободен указатель обнулён кластер занят файлом не является последним кластером файла значение указателя это номер следующего кластера файла кластер является последним кластером файла указатель содержит метку eoc end of clusterchain значение которой зависит от версии fat для fat меткой eoc считается любое значение большее или равное ff по умолчанию fff для fat большее или равное xfff по умолчанию xffff для fat любое значение большее или равное ffffff по умолчанию fffffff кластер повреждён указатель содержит специальную метку значение которой для fat ff для fat xfff для fat ffffff повреждённый кластер не может использоваться файловой системой для хранения данных соответствующие указатели не затрагиваются при форматировании тома когда все остальные указатели обнуляются кластер зарезервирован для будущей стандартизации указатель содержит значение превышающее countofclusters но меньшее метки повреждённого кластера то есть до xfff включительно для fat этом случае кластер не соответствуя никаким реальным данным считается занятым пропускается при поиске свободного но никакой другой информации нём не предоставляется кластеры отражаются fat особо индексный указатель соответствующий нулевому кластеру самый первый указатель таблицы fat содержит значение bpb_media нижних битах остальные биты устанавливаются например если bpb_media xf жёсткий диск fat ffffff для fat таким образом формально fat eoc что используется при обработке файлов нулевого размера см далее второй указатель fat при форматировании устанавливается значение метки eoc fat он не используется больше никак fat fat верхние два бита этого указателя могут содержать отметку необходимости проверки тома грязный бит причём все остальные биты выставлены наличие грязного бита проверяется процессе загрузки windows программой autochk exe грязный бит формируется при некорректном отключении тома или при аппаратной ошибке носителя соответственно принимает два возможных значения индексный указатель fat по определению является битным однако верхние бита игнорируются так что значение указателя по сути является битным единственной операцией оперирующей верхними битами указателя является форматирование тома когда обнуляется весь указатель это означает что например значения указателя xf все соответствуют свободному кластеру так как они отличаются лишь верхних битах значение размера таблицы fat по bpb то есть bpb_fatsz может превышать реальное так что конце каждой таблицы fat могут находиться сектора не соответствующие никаким реальным кластерам данных при форматировании эти сектора обнуляются процессе тома никак не используются поэтому действительный адрес последнего сектора таблицы fat содержащего указатели на реальные кластеры тома всегда должен рассчитываться из общего количества кластеров области данных не из поля bpb_fatsz кроме того последний сектор занятый таблицей fat вовсе не обязательно весь занят ею этом случае избыточное пространство сектора так же не используется забивается нулями при форматировании тома файловые записи непосредственно после окончания последней таблицы fat следует область данных содержащая файлы папки каталог fat является обычным файлом помеченным специальным атрибутом данными содержимым такого файла любой версии fat является цепочка байтных файловых записей записей каталога каталог не может штатно содержать два файла одинаковым именем если программа проверки диска обнаруживает искусственно созданную пару файлов идентичным именем одном каталоге один из них корневой каталог единственным обязательно присутствующим каталогом является корневой каталог fat fat корневой каталог имеет фиксированный размер секторах который вычисляется из значения bpb_rootentcnt следует на диске непосредственно после таблицы fat fat корневой каталог как любой другой имеет переменный размер является цепочкой кластеров номер первого кластера корневого каталога отражается bpb_rootclus корневой каталог имеет следующие отличия от других каталогов тома fat него нет меток даты времени нет собственного имени кроме он не содержит файлов именами см далее является единственным каталогом котором может штатно располагаться файл метки тома см далее структура файловой записи расположение полей файловой записи файловая запись fat состоит из следующих структур dir_name байтное поле по относительному адресу содержит короткое имя файла рамках стандарта по поводу имён файлов см далее dir_attr байт по адресу отвечающий за атрибуты файла dir_ntres байт по адресу используется windows nt байт по адресу счётчик десятков миллисекунд времени создания файла допустимы значения поле часто неоправданно игнорируется dir_crttime байта по адресу время создания файла точностью до секунд dir_crtdate байта по адресу дата создания файла dir_lstaccdate байта по адресу дата последнего доступа файлу то есть последнего чтения или записи последнем случае приравнивается dir_wrtdate аналогичное поле для времени не предусмотрено dir_fstclushi байта по адресу номер первого кластера файла старшее слово на томе fat fat равен нулю dir_wrttime байта по адресу время последней записи модификации файла например его создания dir_wrtdate байта по адресу дата последней записи модификации файла том числе создания dir_fstcluslo байта по адресу номер первого кластера файла младшее слово dir_filesize dword содержащий значение размера файла байтах фундаментальное ограничение fat максимально допустимое значение размера файла составляет xffffffff то есть гб минус байт если первый байт записи fat то есть dir_name содержит xe или это значит что запись свободна соответствующий файл был удалён ноль dir_name означает что свободна не только эта запись но все следующие записи каталога windows не анализирует остаток каталога после обнулённой записи имя файла fat поле dir_name логически разбивается на первые символов образующие имя файла последние образующие расширение точка разделитель добавляется на уровне операционной системы не хранится поле имени если имя расширение файла не заполняют отведённое для них место остальные байты поля dir_name заполняются пробелами имя расширение файла могут содержать любую комбинацию букв цифр или символов ascii кодами свыше специальные символы распределяются на три группы разрешённые запрещённые служебные служебные символы имеют особое значение dos windows не могут входить состав имени файла знаки являются метасимволами знаки используются как разделители путях файлам остальные служебные запрещённые знаки являются управляющими интерпретаторах командной строки command com cmd exe то время как символы из числа запрещённых всё же можно включить имя файла ценой возникновения lfn записи см ниже например каталог именем начинающимся точкой или содержащим несколько точек можно создать режиме командной строки mkdir directory или оболочках вроде far manager total commander winrar имя файла не может начинаться или заканчиваться пробелом ни каком байте поля имени недопустимы управляющие символы ascii то есть за исключением оговорённого выше случая кода информация текущей на момент создания файла кодовой странице dos не сохраняется поэтому доступ файлам именах которых есть национальные коды из extended ascii например знаки кириллицы из кодовой страницы при другой кодовой странице может быть проблематичным или невозможным поскольку перед поиском файла каталоге его имя переводится верхний регистр соответствии таблицей заложенной кодовой странице полный путь файлу не может превышать байтов буква диска путь имя файла включая точку разделитель терминальный нулевой знак все буквенные символы имени всегда переводятся сохраняются поле dir_name верхнем регистре для сохранения исходного регистра имени windows nt используется байт dir_ntres бите говорит что имя следует отображать нижнем регистре за расширение отвечает бит если имя или расширение содержат символы обоих регистров для такого файла создаётся lfn запись см ниже windows для сохранения нетривиального регистра имени всегда создаёт lfn запись игнорирует поле dir_ntres как следствие имя одного того же файла лишённого ассоциированной lfn записи может отображаться windows целиком верхнем регистре windows nt частично нижнем файловые атрибуты байте атрибутов верхние два бита являются резервными всегда должны быть обнулены остальные биты распределяются таким образом что значение соответствует атрибуту только для чтения скрытый системный архивный набор нескольких атрибутов составляется суммированием основных значений кроме этих стандартных атрибутов используются ещё следующие свидетельствует что файл является каталогом контейнером для других файлов attr_volume_id специальный атрибут уникального файла нулевого размера корневом каталоге имя которого считается меткой тома ограничение длины метки тома fat символов связано размером поля dir_name если файл имеет набор атрибутов read_only hidden system volume_id значение это свидетельствует что запись не соответствует отдельному файлу содержит часть длинного имени другого файла не вписывающегося рамки см далее искусственное присвоение ненулевого значения верхним двум битам dir_attr используется для формирования файлов которые невозможно удалить или переименовать штатными средствами файловой системы без форматирования это полезно например при борьбе вирусами autorun inf программа panda usb and autorun vaccine другой стороны это же средство могут использовать сами вирусы значение dir_attr резервировано для внутреннего использования устройство что происходит при создании каталога при создании каталога для него пожизненно выставляется dir_filesize размер содержимого каталога определяется простым следованием по цепочкам кластеров до метки end of chain размер самого каталога лимитируется файловой системой байтных записей то есть записи каталога таблице fat не могут занимать более мб это ограничение призвано ускорить операции файлами позволить различным служебным программам использовать битное целое word для подсчёта количества записей каталоге как следствие возникает теоретическое ограничение на количество файлов каталоге при условии что все имена файлов следуют стандарту каталогу отводится один кластер области данных за исключением случая если это корневой каталог fat fat полям dir_fstclushi dir_fstcluslo присваивается значение номера этого кластера таблицу fat для записи соответствующей этому кластеру помещается метка eoc сам кластер забивается нулями далее создаются два специальных файла без которых каталог fat считается повреждённым первые две байтных записи области данных кластера файлы нулевого размера именами одна точка идентификатор каталога две точки указатель на родительский каталог отметки даты времени этих файлов приравниваются значениям для самого каталога на момент создания не обновляются при изменениях каталога поля dir_fstclushi dir_fstcluslo файла содержат значение номера содержащего его кластера файла номера первого кластера каталога содержащего данный таким образом файл отсылает самому каталогу файл начальному кластеру родительского каталога если родительский каталог корневой начальным кластером считается нулевой время дата двухбайтовая отметка даты имеет следующий формат биты день месяца допускаются значения биты месяц года допускаются значения биты год считая от года эпоха ms dos возможны значения от до включительно то есть годы два байта отвечающие отметке времени распределяются так биты счётчик секунд по две допустимы значения то есть секунд биты минуты допустимы значения биты часы допустимы значения из отметок даты времени критическим является лишь время последней модификации то есть dir_wrttime dir_wrtdate остальные могут не поддерживаться многими системами при операциях файлом такой системе например dos или windows эти поля игнорируются fat сохраняет отметки даты времени по местному часовому поясу при его смене отметки не меняются временные отметки каталогов задаются при создании не изменяются при записи новых файлов каталог переименовании или выделении ему нового кластера дата последнего доступа файлу обновляется при каждом обращении например при просмотре свойств файла при перемещении на другой том но не пределах тома при копировании файла windows дата последнего доступа исходного файла обновляется windows xp нет дата время модификации файла изменяется при каждой записи нового содержимого области данных не файловой записи другими словами дата время модификации не изменяется при смене атрибутов или переименовании файла перемещение или копирование файла сохраняет исходную отметку модификации дата время создания задаётся при выделении файловой записи для нового не существовавшего до этого файла иначе говоря при переименовании или перемещении файла дата время создания не изменяется при копировании новый файл получает новую отметку таким образом при копировании файла windows файл может получить более позднюю дату создания чем дату модификации lfn записи структура lfn записи файлы каталоги длинным именем свыше обрабатываются файловой системой fat особым образом структура байтной записи для файла lfn long file name отличается от обычной sfn записи ldir_ord первый байт записи служит для нумерации записей наборе ldir_name десятибайтовое поле по адресу содержит первые пять символов имени файла вернее той части его имени которая отражена данной lfn записи ldir_attr байт атрибута по адресу равен attr_long_name ldir_type байт по адресу обнулён дополнительно свидетельствует что данная запись таблицы fat относится файлу длинным именем ldir_chksum байт по адресу содержит контрольную сумму sfn псевдонима файла набору lfn записей ldir_name байтовое поле по адресу содержащее шестой одиннадцатый символы имени файла ldir_fstcluslo байтовое поле по адресу контексте lfn записи лишено смысла обнуляется ldir_name байтовое поле по адресу содержащее символы имени файла набор lfn записей каталога fat всегда должен быть связан обычной sfn записью которой физически предшествует на диске набор lfn записей обнаруженный без соответствующей обычной записи называется орфаном запись считается повреждённой подобный файл является совершенно невидимым старых версиях ms dos windows lfn записей каждая из них имеет собственный порядковый номер определяемый первым байтом ldir_ord маска свидетельствует что данная запись является крайней ряду следующих за ней lfn записей то есть например для третьей ряду lfn записи значение байта ldir_ord будет для последующих записях этот байт изменяется от для длинной записи по счету от соответствующей обычной до для ближайшей обычной записи длинные имена файлов хранятся кодировке unicode utf при этом сохраняется вводимый регистр буквенных символов если некоторый символ имени кодировке oem или unicode не может быть превращён символ кодовой страницы он всегда отображается виде символа подчёркивания причём сохранённый на диске действительный символ не изменяется байт контрольной суммы вычисляется по определённому алгоритму на основе имени обычной записи для файла длинным именем имя из обычной записи называется псевдонимом alias копируется во все соответствующие ей длинные записи если какое либо из значений не согласуется именем файла например если файл был переименован под ранней версией ms dos windows возникает орфан sfn псевдоним файла длинным именем состоит из основной части при необходимости цифрового хвоста если файл имеет расширение его первые символа сохраняются псевдониме соответствующее имя образуется переводом кодировку oem символов длинного имени файла причём все пробелы длинного имени игнорируются символы непереводимые oem либо запрещённые контексте короткого имени заменяются подчёркиванием цифровой хвост где добавляется псевдониму если первоначально полученный псевдоним конфликтовал именем какого либо файла том же каталоге либо превышал длиной стандарт или если какой либо символ при смене кодировки не нашёл oem аналога был заменён подчёркиванием таким образом образуются псевдонимы типа newfil djv lfn new file for me djvu схема образования псевдонима файла оптимизирована для скорости операций поэтому подробностях имя файла длиной не кратной символам не заполняет поля имени lfn записей таблицы fat полностью таком случае имя файла искусственно оканчивается символом nul избыточные байты забиваются единицами то есть символами xff для длинных имён длина имени ограничена символами не считая разделителя nul полный путь символами включая nul длинном имени также допускается использование шести специальных символов запрещённых коротких именах при попытке создания томе fat файла или каталога именем содержащим такой символ автоматически генерируется lfn запись независимо от длины имени файла аналогичный процесс происходит при создании файла папки именем содержащим не ascii символы возможна ситуация когда файл метки тома физически не предшествует всем записям тома длинными именами когда том не имеет метки или метка была назначена после записи какого либо файла длинным именем тогда метка тома fat fat будет отображаться неправильно так как будет взята из ближайшей lfn записи поскольку она также имеет атрибут volume_id при попытке изменения метки тома будет происходить нарушение имени файла при удалении файла имеющего ассоциированные lfn записи последние не затрагиваются становятся орфаном при дальнейшем создании нового файла упомянутый орфан может быть ошибочно ассоциирован ним случае совпадения контрольных сумм имён старого нового файлов однако используемый алгоритм вычисления контрольной суммы ascii код первого символа псевдонима файла циклически сдвигается на бит вправо прибавляется код следующего символа делает такую вероятность ничтожно малой смысл файловых операций fat форматирование тома таблица индексных указателей обнуляется за исключением первых трёх fat fat зарезервированы fat содержит запись соответствующую файлу метки тома либо при отсутствии её метку eoc записей повреждённых кластеров записи корневого каталога обнуляются за исключением файла метки тома если она есть остальном область данных не затрагивается удаление файла первый символ файловой записи всех ассоциированных lfn записей заменяется кодом xe занимаемые файлом кластеры помечаются таблице fat как свободные области данных не затрагиваются создание файла или каталога командой создать контекстного меню создаётся файловая запись для нового пустого файла именем по умолчанию например новая папка размером определяемым типом файла сам файл если имеет ненулевой размер что верно для практически всех пустых файлов кроме каталогов текстовых документов записывается области данных выделенные ему кластеры таблице fat создаётся соответствующая кластерная цепочка после присвоения файлу действительного имени не по умолчанию первоначально созданная файловая запись помечается как удалённая создаётся новая переименование файла создаётся новая запись обновлённым именем старая запись помечается как удаленная сохранение файла из приложения не из командной строки создаётся запись содержащая все поля кроме размера начального кластера файла после завершения сохранения файла создаётся новая запись содержащая все поля прежняя удаляется копирование файла новом местоположении создаётся идентичная файловая запись возможно за исключением некоторых временных отметок см выше файлу выделяется первый свободный кластер содержимое файла копируется новое место причём происходит копирование текущего кластера поиск следующего свободного заполнение таблицы fat перемещение файла между разными томами копирование последующим удалением файла из исходного местоположения перемещение файла пределах тома кластерная цепочка не затрагивается файловая запись копируется без изменения новый каталог после чего удаляется из прежнего поиск свободного кластера по таблице индексных указателей для выделения новому файлу начинается общем случае не начала области данных то есть кластера последнего выделенного какому либо файлу кластера номер которого сохраняется структуре fsinfo другими словами если файлу был отведён кластер файлу кластер после чего файл был удалён то при создании нового файла он скорее всего будет физически размещён начиная кластера системы поскольку система fat хранит данные файлах данные свободном месте на диске одной таблице то операция записи файла традиционно состоящая из двух этапов добавление занимаемого блока перечень занятых исключение этого же блока из списка свободных происходит fat одно действие благодаря этому система fat обладает врождённой устойчивостью сбоям то есть сбой например питания момент выполнения операции чтения или записи большинстве случаев не приведёт разрушению файловой системы однако данном случае речь идёт именно целостности файловой системы не самих файлов характеристики fat fat fat разработчик microsoft полное название file allocation table таблица размещения файлов битная версия битная версия битная версия представлена microsoft disk basic август ms dos урезанная полноценная июль ms dos август windows osr идентификатор тома mbr mbr mbr ebd gpt структуры содержимое каталога таблица размещение файлов линейный список сбойные блоки тегирование кластера ограничения размер файла mib gib gib количество кластеров длина имени файла или символов при использовании lfn размер тома mib gib gib кб на кластер поддерживается не везде tib tib кб на сектор возможности сохраняемые даты создания модификации доступа диапазон дат января декабря дополнительные данные изначально не поддерживаются атрибуты файлов только для чтения скрытый системный метка тома подкаталог архивный разграничение прав доступа нет прозрачное сжатие отдельные утилиты stacker doublespace drivespace прозрачное шифрование сторонние утилиты или клоны dos лицензирование майкрософт запатентовала некоторые алгоритмы работы fat vfat сша при повторном рассмотрении было принято решение аннулировать некоторые из патентов но потом его отменили октябре года германии был аннулирован за очевидность патент на vfat выданный европейским патентным бюро со временем fat стали широко использовать различных устройствах для совместимости между dos windows os linux майкрософт не выказывала намерений принуждать их лицензированию феврале года майкрософт подала суд на компанию tomtom производителя автомобильных навигационных систем на основе linux обвиняя её нарушении патентов по мнению джереми эллисона цель майкрософт поставить различные компании перед выбором заключить майкрософт договор патентной защите такой который ней заключила novell ноябре года нарушив тем самым лицензию gnu gpl сделав невозможным для себя использование linux или не заключать такого договора быть обвинённой нарушении патентов защита по которым предоставляется при его заключении при условии неразглашения марте года tomtom подала встречный иск нарушении патентов см также exfat примечания ссылки ecma стандарт fat работа fat средствами winhex категория файловые системы microsoft