бе йсик от basic сокращение от универсальный код символических инструкций для начинающих семейство высокоуровневых языков был разработан году профессорами дартмутского колледжа томасом курцем джоном кемени язык создавался как инструмент помощью которого студенты непрограммисты могли самостоятельно создавать компьютерные программы для решения своих задач получил широкое распространение виде различных диалектов прежде всего как язык для домашних компьютеров настоящему моменту претерпел существенные изменения значительно отойдя от характерной для первых версий простоты граничащей примитивизмом превратившись достаточно ординарный язык высокого уровня типичным набором возможностей используется как самостоятельный язык для разработки прикладных программ главным образом работающих под управлением ос windows различных версий также широко распространён качестве встроенного языка прикладных программных систем различного назначения качестве языка для программируемых калькуляторов история предпосылкой появлению бейсика стали повышение доступности компьютеров годах появление возможности работы режиме разделения времени time sharing компьютерам получили доступ учащиеся специалисты не являющиеся подготовленными программистами но нуждающиеся решении на компьютере своих задач рождение бейсик был придуман году преподавателями дартмутского колледжа джоном кемени томасом курцем под их руководством был реализован командой студентов колледжа со временем когда стали появляться другие диалекты изначальную реализацию стали называть dartmouth basic бейсик был спроектирован так чтобы студенты могли без затруднений писать программы используя терминалы разделением времени он предназначался для более простых пользователей не столько скорости исполнения программ сколько просто возможности использовать компьютер для решения своих задач не имея специальной подготовки при проектировании языка использовались следующие восемь принципов новый язык должен был быть простым использовании для начинающих быть языком общего назначения предоставлять возможность расширения доступную опытным программистам быть интерактивным предоставлять ясные сообщения об ошибках быстро работать на небольших программах не требовать понимания работы аппаратного обеспечения защищать пользователя от операционной системы язык был основан частично на фортране ii частично на алголе добавлениями делающими его удобным для работы режиме разделения времени позднее обработки текста матричной арифметики первоначально бейсик был реализован на мейнфрейме ge поддержкой множества терминалов вопреки убеждению момент своего появления это был компилируемый язык рост несмотря на то что язык уже использовался на нескольких мини компьютерах его настоящее распространение началось его появления на микрокомпьютере альтаир многие языки были слишком большими чтобы поместиться небольшую память которую пользователи таких машин могли себе позволить для машин таким медленным носителем как бумажная лента позднее аудиокассета без подходящего текстового редактора такой небольшой язык как бейсик был отличной находкой году microsoft тогда это были лишь двое билл гейтс пол аллен при участии монте давидова выпустила altair basic затем его версии появились на другой платформе под лицензией скоро использовании были уже миллионы копий вариантов один из вариантов applesoft basic стал стандартным языком на apple ii для операционной системы cp был создан диалект basic надолго определивший развитие языка году microsoft обсуждала несколькими поставщиками компьютеров включая ibm лицензирование интерпретатора бейсик на их машинах одна из версий rom basic была включена пзу ibm pc компьютер мог автоматически загружаться бейсик так как ibm не придавала тогда большого значения персональным компьютерам основным полем её деятельности были мейнфреймы то вопреки своим принципам она разрешила microsoft продавать интерпретатор отдельно это сделало последнюю пионером выпуске по нового поколения не привязанного конкретной аппаратуре поставляемого отдельно от компьютера бейсик полной мере испытал на себе такое хорошо известное явление как массовое размножение версий диалектов языка высокого уровня значительной степени несовместимых между собой причин этому было несколько поскольку язык не рассматривался как промышленный никаких специальных усилий по его стандартизации не прилагалось для каждого компьютера создавалась своя реализация эти же годы появилось большое количество битных домашних учебных компьютеров строившихся на базе процессоров типа intel советский аналог кр вм или на которых бейсик был основным или единственным доступным языком высокого уровня каждая модель компьютера имела определенные аппаратные программные особенности специфические средства вывода звука графики нестандартные инструменты ввода для поддержки которых реализации бейсика вводили специальные команды конструкции иногда прямо бейсике реализовались низкоуровневые средства такие как работа физической памятью или обработка аппаратных прерываний поэтому если базовой части минимальный стандартный набор операторов консольный ввод вывод большинство реализаций были основном аналогичны то части вывода звука графики более сложного управления текстовой консолью управление цветами создание подобия оконного ввода вывода они почти наверняка оказывались несовместимыми результате только наиболее версий диалектов бейсика было более десятка общее число зачастую несовместимых реализаций не уступало количеству типов разновидностей компьютеров находящихся эксплуатации зрелость мини периодом наибольшего расцвета развития исходного бейсика можно считать конец первую половину годов этот период практически все персональные компьютеры имели собственный интерпретатор бейсика зачастую зашиваемый пзу который простейших компьютерах нередко выполнял также функции операционной системы практически все более мощные компьютеры также имели интерактивные бейсик системы характерно что практически не было компиляторов бейсика абсолютное большинство реализаций представляли собой стандартный гибрид строчного редактора интерпретатора недовольство примитивизмом исходного бейсика порождало попытки улучшить базовые средства языка что привело появлению некоторых реализациях сложных операторов ветвления дополнительных видов циклов именованных процедур параметрами было создано несколько новых версий бейсика для платформы ibm pc microsoft продавала бейсик для ms dos pc dos включая ibm advanced basic basica gw basic модификация basica не требующая прошивки от ibm quickbasic borland первоначально вышедшая на рынок со своим известным turbo pascal году выпустила основанную на той же программной среде систему turbo basic его наследники впоследствии продавались другой компанией под именем powerbasic некоторые другие языки использовали хорошо известный синтаксис бейсика качестве основы на которой строилась совершенно иная система см например grass стремление увеличить бейсик программ привело появлению полноценных компиляторов каким был например упомянутый turbo basic также гибридных систем которых при сохранении интерпретации как основной методики исполнения программы была реализована частичная компиляция на лету например компиляция коротких циклов кроме того по крайней мере на платформе ibm бейсик программ когда транслятор переводил бейсик программу псевдокод нередко обратимый формировал исполняемую программу из объектного модуля интерпретатора кодированного модуля текстом программы такая программа запускалась исполнялась как обычная компилированная объектная программа хотя по сути оставалась середине бейсик стал основным языком сложных моделях программируемых калькуляторов которые как раз этому времени достигли мощности допускающей применение полноценного языка высокого уровня сам факт что многие производители не сговариваясь выбрали качестве основы языка высокого уровня калькуляторов именно бейсик лучше всего говорит популярности этого языка указанное время так бейсик был встроен советский калькулятор электроника мк все его более поздние модели применение бейсика качестве основного языка высокого уровня программируемых калькуляторов продолжается по сей день настоящее время именно калькуляторный бейсик более всего похож на изначальный вариант годов например реализация для калькуляторов citizen содержит всего ключевых слов не считая математических функций допускает только односимвольные имена переменных концу годов персональные компьютеры стали намного мощнее предоставляли возможности такие как графический интерфейс пользователя использование которых бейсике было уже не столь удобным тому же появление на компьютерах учебного домашнего класса недорогих трансляторов промышленных языков прежде всего паскаля си сопровождаемых удобными средами полезными библиотеками например borland pascal библиотекой turbo vision создало бейсику сильную конкуренцию бейсик начал сдавать позиции несмотря на то что огромное количество его версий ещё использовалось продавалось это же время началось стремительное изменение облика тех бейсик систем которые оставались эксплуатации происходил постепенный дрейф сторону признанных структурных языков расширился словарь набор конструкций языка появились сложные ветвления именованные подпрограммы функции длинные имена переменных кроме того возросшие возможности персональных компьютеров позволили отказаться от характерных особенностей бейсика введённых для обеспечения эффективной интерактивной работы за текстовым терминалом числовых меток каждой строки построчного редактирования вторую жизнь бейсик получил появлением visual basic от microsoft хотя трудно согласиться что этот язык действительно бейсик он явился логическим завершением эволюции языка несмотря на сохранение привычных ключевых слов по структуре набору возможностей ближе паскалю чем первоначальному бейсику но как инструмент для быстрого создания практически полезных программ для windows при невысокой квалификации программиста он оказался очень кстати быстро стал одним из наиболее используемых языков на платформе windows не последнюю роль здесь сыграла удачная реализация включённого систему построителя графического интерфейса пользователя скрывавшая от разработчика детали windows gui позволявшая сосредоточиться на задаче microsoft создала вариант под названием wordbasic использовала его ms word до появления word вариант visual basic for applications vba был встроен microsoft excel году затем access году после во все остальные инструменты входящие пакет microsoft office internet explorer выше также microsoft outlook включали интерпретатор vbscript описание синтаксис языка напоминает фортран многие элементы явные заимствования из него язык задумывался для обучения поэтому его конструкции максимально просты как других языках ключевые слова взяты из английского языка основных типов данных два строки числа появлением версии visual basic также различных его модификаций таких как vba языке появились многие другие типы данных дополнения типичные для современных языков например такие как объектная модель объявление переменных не требует специальной секции отличие от паскаля объявление переменной это первое её использование ранние версии бейсика такие как basica gw basic существенно отличаются от современных диалектов сегодня практически не используются ранние версии файл basic interpreter on the dvk computer jpg thumb экран бейсиком компьютера двк внешний вид программ на ранних версиях бейсика во многом определялся тем что он предназначался для среды со строчным редактором текста таком редакторе пользователь не имел возможности отображать весь текст на экране окне перемещаться по нему любых направлениях помощью клавиатуры или мыши строчных редакторах пользователь для изменения строки текста должен дать команду изменения строки заданным номером затем ввести новый текст указанной строки для вставки новой строки нужно дать команду вставки опять таки указав номер вводимые строки отображаются на экране последовательно независимо от номеров чтобы увидеть сделанные изменения применяется команда вывода текста которая выводит строки правильном порядке по возрастанию номеров всё это отразилось бейсике каждая строка начиналась номера при вводе редактор строка оказывалась исходном тексте программы на позиции соответствующей её номеру для вставки новой строки нужно было дописать строку номером находящимся диапазоне между номерами двух других строк раздвинуть строки было невозможно если требовалось вставить новую строку между строками соседними номерами приходилось повторно вводить эти строки другими номерами чтобы обеспечить разрыв нумерации либо применять специальную команду renum которая все уже введённые строки постоянным шагом синхронно изменяя все команды переходов для упрощения оперативного редактирования программы сложилась практика нумеровать строки шагом это позволяло практически во всех случаях вставлять новые строки без изменения номеров ранее введённых например чтобы добавить третью строку между строками нужно было написать строку номером диапазоне от до типичная строка из программы на бейсике выглядела так print hello world изменять вручную номера уже имеющихся строк было небезопасно так как номера выполняли роль меток для оператора goto ранее бейсике были допустимы только числовые метки для этого оператора наличие каждой строке уникального номера делало возможным безусловный переход любой из них числовые метки активное использование goto было неизбежным при на бейсике что способствовало плохой структуре кода больших проектах приводило запутыванию самих авторов был даже придуман шуточный термин макаронное spagetti code потому что логика программы частыми переходами goto напоминает тарелку со спагетти признаком конца оператора служил конец строки чтобы на одной строке разместить несколько операторов нужно поставить между ними двоеточие это разрешалось не во всех реализациях языка имена переменных большинстве диалектов могли состоять только из одной буквы после которой можно было добавить одну цифру что также не способствовало улучшению понимания кода для создания переменной строкового типа нужно было после имени указать знак доллара переменная без этого знака являлась числовой плавающей точкой было ещё несколько модификаторов относящихся числовому типу знак процента целый тип восклицательный знак обычная точность октоторп двойная точность для данных плавающей точкой то есть десятичных дробей некоторых версиях числовые модификаторы могли не применяться или применяться не все абсолютном большинстве программ использовался только базовый числовой тип выражения сходны большинством других процедурных языков но первых вариантах бейсика их набор был довольно бедным самых ранних вариантах число ключевых слов не достигало даже вот набор основных программных конструкций интерактивных команд которые были реализованы практически любой бейсик системе конца годов list вывод на монитор текста программы правильной строк зависимости от реализации команда поддерживала параметры диапазон строк который требуется вывести иногда поддерживался вариант llist вывод на печатающее устройство run запуск текущей программы первого оператора строки самым маленьким номером мог поддерживаться параметр номер строки которого нужно начинать исполнение rem комментарий текст находившийся после ключевого слова до конца строки на исполнение программы не влиял многие интерпретаторы также поддерживали качестве знака начала комментария одиночную кавычку input приглашение переменная вывод на монитор текста приглашение ожидание пока пользователь не введёт значение не нажмёт enter после этого переменную запишется введённое значение простейших реализациях приглашение input не поддерживалось его нужно было выводить отдельным оператором print см ниже print текст переменная переменная текст вывод на монитор последовательно перечисленных объектов текста значений переменных зависимости от реализации по разному воспринимались разделители одних случаях разделитель приводил выводу хотя бы одного пробела других значения выводились подряд разделители нужно было добавлять вручную разделитель выполнял также функцию подавления перевода на следующую строку cls очистка экрана терминала зависимости от реализации конструкции режима работы терминала текстовый курсор переносился либо верхний левый либо нижний левый угол let присваивание формат let переменная значение абсолютном большинстве версий оператор let поддерживался но был факультативным присваивания переменным значений записывались без let dim описание массива отличие от обычных переменных массивы требовали описания максимальное число размерностей массива определялось только реализацией data набор данных размещаемых прямо тексте программы аналог константы или массива константы read команда считывания из набора data goto lbl команда безусловного перехода на метку lbl on goto команда вычисляемого перехода после on должно было идти вычисляемое выражение или переменная после goto набор меток через запятую значение выражения указывало номер метки на которую нужно перейти if then обычный оператор ветвления после if размещается логическое условие после then оператор который должен быть выполнен при истинности этого условия для сокращения записи многие реализации поддерживали соглашение если после then идёт число то это метка на которую нужно перейти то есть форма if then равнозначна if then goto также могли поддерживаться формы if goto for переменнаяцикла to step шаг заголовок цикла шагом инициирует цикл котором переменная последовательно проходит ряд значений от до шагом шаг тело цикла ограничивается заголовком ключевым словом next часть step могла опускаться этом случае шаг был равен единице когда переменнаяцикла выходит за указанные пределы происходит переход за соответствующий оператор next next завершение тела цикла шагом оператор показывает что необходимо перейти на заголовок текущего исполняемого цикла for продолжить работу более развитых реализациях next мог содержать список переменных цикла через запятую это означало что данной точке программы завершается тело не одного нескольких циклов применение next переменной также страховало от нарушения логики программы так как вызывало ошибку времени выполнения если при выполнении этой команды оказывалось что активен цикл не по той переменной имя которой указано while условие заголовок цикла предусловием цикл завершался если условие оказывалось ложно этом случае происходил переход за соответствующий заголовку оператор wend wend завершение тела цикла while аналог next но для цикла предусловием gosub метка переход подпрограмме начинающейся метки возврат происходит при достижении оператора return рекурсивный вызов процедуры был как правило запрещён приводил ошибке времени выполнения return оператор возврата из подпрограммы выполняется безусловный переход на оператор следующий за командой gosub которой был произведён переход подпрограмме end завершение выполнения программы система выходит интерпретатор пользователю выдаётся приглашение на ввод команд chain загрузка диапазона строк программы внешнего носителя open открытие файла данных на внешнем носителе close закрытие файла данных на внешнем носителе get чтение значений указанных переменных из файла перемещением файлового указателя за последний считанный символ put запись значений указанных переменных файл перемещением файлового указателя за последний записанный символ delete команда интерактивного режима удаление строки указанным номером save команда интерактивного режима сохранение текущей программы файле на внешнем носителе load команда интерактивного режима загрузка память программы из файла на внешнем носителе как правило по умолчанию она приводила уничтожению ранее загруженной программы данных renum команда интерактивного режима перенумерация всех или заданного диапазона строк программы начиная заданного числа указанным шагом по умолчанию перенумеруются все строки программы шагом условный оператор if then изначально имел только одну ветвь ветвь else нём отсутствовала моделировалась помощью безусловного перехода так нижеследующей программе выполняется элементарная операция ввод числа вывод сообщения отрицательное число или положительное число или нуль зависимости от его значения input if then print positive number or null goto print negative number end имелся оператор перехода по вычисляемой метке on goto унаследованный от аналогичной конструкции фортрана нём после on указывалось числовое выражение после goto список номеров строк переход происходил на строку номер которой списке соответствовал значению выражения присутствуют также циклы цикл со счётчиком for цикл предусловием while использование функций определяемых пользователем участков кода для многократного использования было возможно двумя способами определяемые функции подпрограммы подпрограммы не являлись аналогом функций таких языков как си или паскаль так как не имели имён не могли принимать или возвращать параметры параметры результаты передавались через глобальные переменные все переменные ранних версиях бейсика были глобальными подпрограммы писались обычно конце модуля нумерацией заведомо большей чем планируемое количество строк примеру нумерация блока подпрограмм могла начинаться даже если программе была пара сотен строк подпрограммы не имели заголовков имён ничем не отличались от любого другого участка кода вызов подпрограммы осуществлялся помощью ключевого слова gosub это практически клон goto за исключением одного возврат точку вызова происходил автоматически при достижении подпрограмме ключевого слова return gosub как goto только способствовали плохой структуре кода так как отследить выполнение программы содержащей большое количество безусловных переходов подпрограмм было сложной задачей рекурсия не допускалась отсутствие возможности давать подпрограммам имена передавать по ним управление невозможность передачи параметров отсутствие локальных переменных использование только числовых меток больших проектах вызывало путаницу коде очень затрудняло отладку некоторых диалектах бейсика имелась возможность загрузить файл кодом непосредственно при выполнении программы текущий при этом выгружался оператором chain это была одна из самых полезных возможностей языка так как она позволяла разбить большой проект на модули вызывая их порядке необходимости редактора кода ранних версиях как такового не было при запуске интерпретатора бейсика запускался диалоговый режим ввода команд для работы этом режиме были предусмотрены специальные команды которые не являлись операторами самого языка их нельзя было включить код программы это команды по управлению средой ввода такие как list вывод листинга программы на экран llist на принтер save сохранение текста программы файл load загрузка кода память запуск программы производился вводом команды run большинстве интерпретаторов бейсика нижней части экрана была строка этими другими командами если команда начиналась номера строки метки она запоминалась памяти как часть вводимой программы если строка оператора вводилась без номера она выполнялась сразу же после нажатия клавиши качестве первых уроков обучающимся на бейсике предлагалось таким режимом когда результат выполнения выражения был виден сразу например если находясь режиме диалога ввести строку print нажать на экране отобразится результат сложения для редактирования уже введённой строки большинстве реализаций нужно было перепечатать её полностью удаление строк производилось командой delete команда renum позволяла восстановить шаг нумерации строк часто возникала ситуация что штатного шага для будущих строк не хватало так как такой шаг позволяет добавить лишь строк между требуемыми тогда команда renum была необходимой все строки шагом соответствующим образом строки goto под новую нумерацию строк для выполнения программы на бейсике использовалась передача имени файла кодом программы интерпретатору командной строке этом случае после загрузки кода команда run начать выполнение программы вызывалась автоматически фрагмент типичной программы на бейсике cls очистка экрана print добро пожаловать заголовок первой строке цикл выводящий линию под заголовком на всю ширину экрана for to print next ввод символьных данных от пользователя комментарий добавлен после ввода нижних строк input имя input фамилия input отчество вырезаем копию первых символов из имени отчества left left выводим результат print ваше имя кратко input повторить программу if then goto end точка запятой выполняет функцию подавления перехода на новую строку после оператора print ключевое слово end означает завершение программы оно необязательно его отсутствие программа завершалась после исполнения последнего оператора но было полезно случаях когда имелась секция подпрограмм либо программа имела несколько возможных точек завершения последнем случае либо каждой такой точке ставили end либо end был один на него делались переходы других местах поздние версии одним из наиболее вариантов языка бейсик стала реализация интерпретатора qbasic корпорации microsoft долгие годы она включалась как бесплатное приложение входящее операционные системы ms dos ранних windows нём имелись довольно мощные графические звуковые возможности позволяющие создавать на этом языке даже игры бейсик поздних версий начиная turbo basic visual basic резко отличается от ранних вариантов фактически это новый язык который во многом ближе фортрану или паскалю чем исходному бейсику основные изменения версий годов состоят следующем отказались от представления программы как набора пронумерованных строк номера строк превратились обычные метки которые стали необязательными перестали влиять на порядок исполнения программы если ранее строка номером всегда шла программе раньше строки номером то теперь порядок исполнения стал определяться порядком расположения строк исходном коде метки перестали быть только числовыми языке появились именованные подпрограммы параметрами механизм вызова подпрограмм стал обычным подпрограмма вызывается по имени указанием списка фактических параметров появилась рекурсия были введены структурные управляющие конструкции результате для организации обычных ветвлений циклов перестало быть необходимым использование оператора goto меток строк существенно расширилась номенклатура типов данных появилась возможность явно описывать типы обычных переменных стали необязательными типизирующие суффиксы именах переменных хотя их использование не запрещалось более поздних версиях появилась обработка исключений поддержка элементов ооп были введены механизмы поддержки модульности появилась возможность без фокусов типа динамической загрузки модулей помощью явных системных вызовов разделять программу на несколько файлов исходного кода появились средства для работы цветной графикой звуковой картой visual basic ориентированный на разработку windows приложений графическим интерфейсом пользователя был выполнен интегрированным графическим дизайнером интерфейса что позволило быстро писать простые программы под windows появились реализации например freebasic purebasic практически все недостатки присущие ранним версиям языка были исправлены на современных диалектах бейсика мало отличается от использования других языков сред например таких как delphi оборотной стороной процесса модификации basic является то что язык стал гораздо объёмнее сложнее его освоение требует больше времени усилий фрагмент типичной программы на freebasic lang fb dim as string cls print добро пожаловать заголовок первой строке do цикл выводящий линию под заголовком на всю ширину экрана for as integer to loword width print next ввод символьных данных от пользователя input имя input фамилия input отчество вырезаем копию первых символов из имени отчества left left выводим результат print ваше имя кратко print повторить программу loop while lcase input end несмотря на популярность году microsoft отказалась от дальнейшей поддержки visual basic пользу принципиально нового языка visual basic net этой реализации язык был снова кардинально пересмотрен текущем состоянии он практически совпадает по набору возможностей языком отличаются только детали синтаксиса ключевые слова таким образом basic перерос из средства для создания программ любителям до полноценного средства создания программ помимо написания полноценных программ бейсик широко применяется как основа для различных скриптовых языков например макросы пакете microsoft office пишутся на диалекте vba критика пору своего расцвета годы бейсик подвергся жёсткой критике помимо констатации очевидных недостатков языка связанных синтаксической бедностью ранних вариантов отсутствием многих признанных удобных конструкций механизмов бейсик критиковали за то что его простота поощряют применение порочных методик разработки способствуют выработке опасных привычек которые иногда могут быть уместны при быстром создании малых программ для текущих нужд но способны привести краху крупных проектов резко критиковалось повсеместно начальное обучение базирующееся на бейсике одной из визитных карточек эдсгера дейкстры стало высказывание студентов ранее изучавших бейсик практически невозможно обучить хорошему как потенциальные программисты они умственно изувечены без надежды на восстановление ответ на критику адепты бейсика замечают что критики приписывают языку те негативные стороны которые следовало бы отнести его неправильному применению недостатки бейсика если иметь виду ранние диалекты проявляются при попытке разработки на нём сложных крупных программ при использовании его как базового языка для обучения программистов но ни для одного их этих применений данный язык не предназначался его основной задачей было предоставить студентам непрограммистам возможность после минимального обучения самостоятельно писать простейшие программы для собственных нужд чтобы не отвлекать на эту работу специалистов этой задаче язык вполне соответствует если же говорить современных диалектах реализациях бейсика то они настолько далеко ушли от первоначальной формы языка что всё вышесказанное вряд ли можно считать относящимся ним современные диалекты бейсика являются достаточно языками они сопоставимы по возможностям такими языками как си паскаль производители разное время интерпретаторы basic выпускались различными организациями компаниями фирмами acorn computers apple atari basic international borland cdc commodore comshare concept omega data general dartmouth dec digital research fantaisie software the game creators hedge systems honeywell hp ibm microsoft morgan computing ncr century radioshack sax software sinclair research sperry univac summi software tehnology texas instruments university of california university of maryland wang laboratories watcom xerox советские вильнюсский университет вильнюс вц со ан ссср новосибирск по вэф рига нижегородский государственный университет имени лобачевского нижний новгород реализации apple applesoft basic integer basic macbasic microsoft altair basic bascom gw basic mbasic microsoft small basic msx basic qbasic quickbasic visual basic vba vbs net sinclair basic basic basic basic другие basic bbc basic commodore basic darkbasic dartmouth basic freebasic gambas kbasic liberty basic mobilebasic play basic powerbasic purebasic rapid basic realbasic terminal basic turbo basic tiny basic бейсик вильнюс интересные факты году пол аллен молодой программист из бостона содружестве со студентом гарвардского университета биллом гейтсом написали программу реализующую для микрокомпьютера альтаир язык бейсик впервые использовав его для программного обеспечения персональных компьютеров впоследствии гейтс аллен основали собственную фирму microsoft примечания литература стандарты ansi for minimal basic iso iec data processing programming languages minimal basic ansi programming languages full basic гост язык бейсик включает себя стандарт iso incits iso iec information technology programming languages full basic ansi interpretations basic technical information bulletin interpretations of ansi iso iec amd modules and single character input enhancement ссылки авторский вариант статьи андрея колесова статья была опубликована незначительной литературной правкой журнале наука жизнь manual for basic the elementary algebraic language designed for use with the darthmouth time sharing system препринт дартмутского колледжа от октября thomas kurtz basic обширный список бейсико подобных языков категория языки для образования