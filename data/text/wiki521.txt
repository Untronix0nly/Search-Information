http протокол передачи гипертекста протокол прикладного уровня передачи данных изначально виде гипертекстовых документов формате html настоящий момент используется для передачи произвольных данных основой http является технология клиент сервер то есть предполагается существование потребителей клиентов которые инициируют соединение посылают запрос поставщиков серверов которые ожидают соединения для получения запроса производят необходимые действия возвращают обратно сообщение результатом http настоящее время повсеместно используется во всемирной паутине для получения информации веб сайтов году северной америке доля http трафика превысила долю сетей составила из которых почти половина это передача потокового видео звука http используется также качестве транспорта для других протоколов прикладного уровня таких как soap xml rpc webdav основным объектом манипуляции http является ресурс на который указывает uri uniform resource identifier запросе клиента обычно такими ресурсами являются хранящиеся на сервере файлы но ими могут быть логические объекты или что то абстрактное особенностью протокола http является возможность указать запросе ответе способ представления одного того же ресурса по различным параметрам формату кодировке языку частности для этого используется http заголовок именно благодаря возможности указания способа кодирования сообщения клиент сервер могут обмениваться двоичными данными хотя данный протокол является текстовым http протокол прикладного уровня аналогичными ему являются ftp smtp обмен сообщениями идёт по обыкновенной схеме запрос ответ для идентификации ресурсов http использует глобальные uri отличие от многих других протоколов http не сохраняет своего состояния это означает отсутствие сохранения промежуточного состояния между парами запрос ответ компоненты использующие http могут самостоятельно осуществлять сохранение информации состоянии связанной последними запросами ответами например куки на стороне клиента сессии на стороне сервера браузер посылающий запросы может отслеживать задержки ответов сервер может хранить ip адреса заголовки запросов последних клиентов однако сам протокол не осведомлён предыдущих запросах ответах нём не предусмотрена внутренняя поддержка состояния нему не предъявляются такие требования программное обеспечение всё программное обеспечение для работы протоколом http разделяется на три большие категории серверы как основные поставщики услуг хранения обработки информации обработка запросов клиенты конечные потребители услуг сервера отправка запроса прокси посредники для выполнения транспортных служб для отличия конечных серверов от прокси официальной документации используется термин исходный сервер один тот же программный продукт может одновременно выполнять функции клиента сервера или посредника зависимости от поставленных задач спецификациях протокола http подробно описывается поведение для каждой из этих ролей клиенты первоначально протокол http разрабатывался для доступа гипертекстовым документам всемирной паутины поэтому основными реализациями клиентов являются браузеры агенты пользователя для просмотра сохранённого содержимого сайтов на компьютере без соединения интернетом были придуманы офлайн браузеры при нестабильном соединении для загрузки больших файлов используются менеджеры закачек они позволяют любое время докачать указанные файлы после потери соединения веб сервером некоторые виртуальные атласы такие как google планета земля nasa world wind тоже используют http нередко протокол http используется программами для скачивания обновлений целый комплекс программ роботов используется поисковых системах интернета среди них веб пауки краулеры которые производят проход по гиперссылкам составляют базу данных ресурсов серверов сохраняют их содержимое для дальнейшего анализа исходные серверы основные реализации apache internet information services iis nginx google web server lighttpd прокси серверы основные реализации squid usergate multiproxy naviscope nginx история развития http http был предложен марте года тимом бернерсом ли работавшим тогда cern как механизм для доступа документам интернете облегчения навигации посредством использования гипертекста самая ранняя версия протокола http была впервые опубликована январе хотя реализация датируется годом спецификация протокола привела упорядочению правил взаимодействия между клиентами серверами http также чёткому разделению функций между этими двумя компонентами были основные синтаксические семантические положения http мае года для практической реализации http был выпущен информационный документ rfc что послужило основой для реализации большинства компонентов http http современная версия протокола принята июне года новым этой версии был режим постоянного соединения tcp соединение может оставаться открытым после отправки ответа на запрос что позволяет посылать несколько запросов за одно соединение клиент теперь обязан посылать информацию об имени хоста которому он обращается что сделало возможной более простую организацию виртуального хостинга http февраля года опубликованы финальные версии черновика следующей версии протокола отличие от предыдущих версий протокол http является бинарным среди ключевых особенностей запросов расстановка приоритетов для запросов сжатия заголовков загрузка нескольких элементов параллельно посредством одного tcp соединения поддержка проактивных push уведомлений со стороны сервера структура протокола каждое http сообщение состоит из трёх частей которые передаются указанном порядке стартовая строка определяет тип сообщения заголовки характеризуют тело сообщения параметры передачи прочие сведения тело сообщения непосредственно данные сообщения обязательно должно отделяться от заголовков пустой строкой тело сообщения может отсутствовать но стартовая строка заголовок являются обязательными элементами исключением является версия протокола которой сообщение запроса содержит только стартовую строку сообщения ответа только тело сообщения для версии протокола сообщение запроса обязательно должно содержать заголовок host стартовая строка стартовые строки различаются для запроса ответа строка запроса выглядит так get uri для версии протокола метод uri http версия для остальных версий здесь метод тип запроса одно слово заглавными буквами версии http использовался только метод get список методов для версии представлен ниже uri определяет путь запрашиваемому документу версия пара разделённых точкой цифр например чтобы запросить страницу данной статьи клиент должен передать строку задан всего один заголовок get wiki http http host ru wikipedia org стартовая строка ответа сервера имеет следующий формат http версия кодсостояния пояснение где версия пара разделённых точкой цифр как запросе код состояния три цифры по коду состояния определяется дальнейшее содержимое сообщения поведение клиента пояснение текстовое короткое пояснение коду ответа для пользователя никак не влияет на сообщение является необязательным например стартовая строка ответа сервера на предыдущий запрос может выглядеть так http ok методы метод http из любых символов кроме управляющих разделителей указывающая на основную операцию над ресурсом обычно метод представляет собой короткое английское слово записанное заглавными буквами обратите внимание что название метода чувствительно регистру сервер может использовать любые методы не существует обязательных методов для сервера или клиента если сервер не распознал указанный клиентом метод то он должен вернуть статус not implemented если серверу метод известен но он неприменим конкретному ресурсу то возвращается сообщение кодом method not allowed обоих случаях серверу следует включить сообщение ответа заголовок allow со списком поддерживаемых методов кроме методов get head часто применяется метод post options используется для определения возможностей веб сервера или параметров соединения для конкретного ресурса ответ серверу следует включить заголовок allow со списком поддерживаемых методов также заголовке ответа может включаться информация поддерживаемых расширениях предполагается что запрос клиента может содержать тело сообщения для указания интересующих его сведений формат тела порядок работы ним настоящий момент не определён сервер пока должен его игнорировать аналогичная ситуация телом ответе сервера для того чтобы узнать возможности всего сервера клиент должен указать uri звёздочку запросы options http могут также применяться для проверки сервера аналогично пингованию тестирования на предмет поддержки сервером протокола http версии результат выполнения этого метода не кэшируется get используется для запроса содержимого указанного ресурса помощью метода get можно также начать какой либо процесс этом случае тело ответного сообщения следует включить информацию ходе выполнения процесса клиент может передавать параметры выполнения запроса uri целевого ресурса после символа get path resource param value param value http согласно стандарту http запросы типа get считаются идемпотентными кроме обычного метода get различают ещё условный get содержит заголовки if modified since if match if range подобные частичный get содержит запросе range порядок выполнения подобных запросов определён стандартами отдельно head аналогичен методу get за исключением того что ответе сервера отсутствует тело запрос head обычно применяется для извлечения метаданных проверки наличия ресурса валидация url чтобы узнать не изменился ли он момента последнего обращения заголовки ответа могут кэшироваться при несовпадении метаданных ресурса соответствующей информацией кэше копия ресурса помечается как устаревшая post применяется для передачи данных заданному ресурсу например блогах посетители обычно могут вводить свои комментарии записям html форму после чего они передаются серверу методом post он помещает их на страницу при этом передаваемые данные примере блогами текст комментария включаются тело запроса аналогично помощью метода post обычно загружаются файлы на сервер отличие от метода get метод post не считается идемпотентным то есть многократное повторение одних тех же запросов post может возвращать разные результаты например после каждой отправки комментария будет появляться очередная копия этого комментария при результате выполнения ok тело ответа следует включить сообщение об итоге выполнения запроса если был создан ресурс то серверу следует вернуть ответ created указанием uri нового ресурса заголовке location сообщение ответа сервера на выполнение метода post не кэшируется put применяется для загрузки содержимого запроса на указанный запросе uri если по заданному uri не существует ресурс то сервер создаёт его возвращает статус created если же был изменён ресурс то сервер возвращает ok или no content сервер не должен игнорировать некорректные заголовки content передаваемые клиентом вместе сообщением если какой то из этих заголовков не может быть распознан или не допустим при текущих условиях то необходимо вернуть код ошибки not implemented фундаментальное различие методов post put заключается понимании предназначений uri ресурсов метод post предполагает что по указанному uri будет производиться обработка передаваемого клиентом содержимого используя put клиент предполагает что загружаемое содержимое соответствует находящемуся по данному uri ресурсу сообщения ответов сервера на метод put не кэшируются patch аналогично put но применяется только фрагменту ресурса delete удаляет указанный ресурс trace возвращает полученный запрос так что клиент может увидеть какую информацию промежуточные серверы добавляют или изменяют запросе connect преобразует соединение запроса прозрачный tcp ip туннель обычно чтобы содействовать установлению защищённого ssl соединения через нешифрованный прокси коды состояния код состояния является частью первой строки ответа сервера он представляет собой целое число из трёх цифр первая цифра указывает на класс состояния за кодом ответа обычно следует отделённая пробелом поясняющая фраза на английском языке которая разъясняет человеку причину именно такого ответа примеры webpage created access allowed only for registered users insufficient storage клиент узнаёт по коду ответа результатах его запроса определяет какие действия ему предпринимать дальше набор кодов состояния является стандартом они описаны соответствующих документах rfc введение новых кодов должно производиться только после согласования ietf клиент может не знать все коды состояния но он обязан отреагировать соответствии классом кода настоящее время выделено пять классов кодов состояния код класс назначение xx информационный англ informational информирование процессе передачи http сообщения такими кодами должны игнорироваться http клиент должен быть готов принять этот класс сообщений как обычный ответ но ничего отправлять серверу не нужно сами сообщения от сервера содержат только стартовую строку ответа если требуется несколько специфичных для ответа полей заголовка прокси серверы подобные сообщения должны отправлять дальше от сервера клиенту xx успех англ success информирование случаях успешного принятия обработки запроса клиента зависимости от статуса сервер может ещё передать заголовки тело сообщения xx перенаправление англ redirection сообщает клиенту что для успешного выполнения операции необходимо сделать другой запрос как правило по другому uri из данного класса пять кодов относятся непосредственно редирект адрес по которому клиенту следует произвести запрос сервер указывает заголовке location при этом допускается использование фрагментов целевом uri xx ошибка клиента англ client error указание ошибок со стороны клиента при использовании всех методов кроме head сервер должен вернуть теле сообщения гипертекстовое пояснение для пользователя xx ошибка сервера англ server error информирование случаях неудачного выполнения операции по вине сервера для всех ситуаций кроме использования метода head сервер должен включать тело сообщения объяснение которое клиент отобразит пользователю заголовки заголовки http это строки http сообщении содержащие разделённую двоеточием пару параметр значение формат заголовков соответствует общему формату заголовков текстовых сетевых сообщений arpa см rfc заголовки должны отделяться от тела сообщения хотя бы одной пустой строкой примеры заголовков server apache win php last modified sat jan gmt content type text plain charset windows content language ru примере выше каждая строка представляет собой один заголовок при этом то что находится до двоеточия называется именем что после него значением все заголовки разделяются на четыре основных группы general headers основные заголовки могут включаться любое сообщение клиента сервера request headers заголовки запроса используются только запросах клиента response headers заголовки ответа только для ответов от сервера entity headers заголовки сущности сопровождают каждую сущность сообщения именно таком порядке рекомендуется посылать заголовки получателю все необходимые для http заголовки описаны основных rfc если не хватает существующих то можно вводить свои традиционно именам таких дополнительных заголовков добавляют префикс для избежания конфликта имён возможно существующими например как заголовках powered by или cache некоторые разработчики используют свои индивидуальные префиксы примерами таких заголовков могут служить ms echo request ms echo reply введённые корпорацией microsoft для расширения webdav тело сообщения тело http сообщения message body если оно присутствует используется для передачи тела объекта связанного запросом или ответом тело сообщения отличается от тела объекта entity body только том случае когда применяется кодирование передачи что указывается полем заголовка transfer encoding message body entity body поле transfer encoding должно использоваться для указания любого кодирования передачи применённого приложением целях гарантирования безопасной правильной передачи сообщения поле transfer encoding это свойство сообщения не объекта таким образом может быть добавлено или удалено любым приложением цепочке запросов ответов правила устанавливающие допустимость тела сообщения сообщении отличны для запросов ответов присутствие тела сообщения запросе отмечается добавлением заголовкам запроса поля заголовка content length или transfer encoding тело сообщения может быть добавлено запрос только когда метод запроса допускает тело объекта включается или не включается тело сообщения сообщение ответа зависит как от метода запроса так от кода состояния ответа все ответы на запрос методом head не должны включать тело сообщения даже если присутствуют поля заголовка объекта entity header заставляющие поверить присутствие объекта никакие ответы кодами состояния xx информационные нет содержимого no content не модифицирован not modified не должны содержать тела сообщения все другие ответы содержат тело сообщения даже если оно имеет нулевую длину примеры диалогов http обычный get запрос запрос клиента get wiki страница http host ru wikipedia org user agent mozilla linux ru rv gecko firefox accept text html connection close пустая строка ответ сервера http ok date wed feb gmt server apache powered by php ubuntu wm last modified wed feb gmt content language ru content type text html charset utf content length connection close пустая строка запрошенная страница html аналогично выглядит ответ что существенно непосредственно запрашиваемые данные отделены от http заголовков помощью crlf crlf двух переводов строки перенаправления предположим что вымышленной компании example corp есть основной сайт по адресу домен псевдоним example org клиент посылает запрос страницы компании на вторичный домен часть заголовков опущена get about html http host example org user agent mylonelybrowser так как домен example org не является основным компания не собирается будущем его использовать других целях их сервер вернёт код для постоянного перенаправления указав заголовке location целевой url http moved permanently location date thu feb gmt server apache content type text html charset windows content length пустая строка заголовке location можно указывать фрагменты как данном примере браузер не указал фрагмент запросе так как его интересует весь документ но он автоматически прокрутит страницу до фрагмента contacts как только загрузит её тело ответа также был помещён короткий html документ со ссылкой помощью которой посетитель попадёт на целевую страницу если браузер не перейдёт на неё автоматически заголовок content type содержит характеристики именно этого html пояснения не документа который находится по целевому uri допустим эта же компания example corp имеет несколько региональных по всему миру для каждого них есть сайт соответствующим cctld запрос главной страницы основного сайта example com может выглядеть так get http host example com user agent mylonelybrowser accept text html application xhtml xml application xml accept language ru en us en accept charset windows utf сервер принял во внимание заголовок accept language сформировал ответ со временным на российский сервер example ru указав его адрес заголовке location http found location cache control private date thu feb gmt server apache content type text html charset windows content length пустая строка обратите внимание на заголовок cache control значение private сообщает остальным серверам первую очередь прокси что ответ может кэшироваться только на стороне клиента противном случае не исключено что следующие посетители из других стран будут переходить всё время не своё для перенаправления также используются коды ответа see other temporary redirect докачка фрагментарное скачивание допустим вымышленная организация предлагает скачать сайта видео прошедшей конференции по адресу объёмом примерно мб рассмотрим как происходит докачивание этого файла случае сбоя как менеджер закачек организовал бы многопоточную загрузку нескольких фрагментов обоих случаях клиенты произведут свой первый запрос наподобие этого get conf avi http host example org accept user agent mozilla compatible msie windows referer заголовок referer указывает что файл был запрошен главной страницы сайта менеджеры закачек обычно тоже его указывают чтобы эмулировать переход со страницы сайта без него сервер может ответить access forbidden если не допускаются запросы других сайтов нашем случае сервер вернул успешный ответ http ok date thu feb gmt server apache last modified wed jun gmt etag content type video msvideo content length accept ranges bytes connection close пустая строка двоичное содержимое всего файла заголовок accept ranges информирует клиента том что он может запрашивать сервера фрагменты указывая их смещения от начала файла байтах если этот заголовок отсутствует то клиент может предупредить пользователя что докачать файл скорее всего не удастся исходя из значения заголовка content length менеджер закачек поделит весь объём на равные фрагменты запросит их по отдельности организовав несколько потоков если сервер не укажет размер то клиенту параллельное скачивание реализовать не удастся но при этом он сможет докачивать файл пока сервер не ответит requested range not satisfiable допустим на мегабайте соединение интернетом прервалось процесс загрузки приостановился когда соединение интернетом было восстановлено менеджер закачек автоматически послал новый запрос на сервер но указанием выдать содержимое го мегабайта get conf avi http host example org accept user agent mozilla compatible msie windows range bytes referer сервер не обязан помнить какие от кого запросы были до этого поэтому клиент снова вставил заголовок referer как будто это его самый первый запрос указанное значение заголовка range говорит серверу выдай содержимое от го байта до самого конца связи этим сервер вернёт ответ http partial content date thu feb gmt server apache last modified wed jun gmt etag accept ranges bytes content range bytes content length connection close content type video msvideo пустая строка двоичное содержимое от го мегабайта заголовок accept ranges здесь уже не обязателен так как клиент уже знает об этой возможности сервера том что передаётся фрагмент клиент узнаёт по коду partial content заголовке content range содержится информация данном фрагменте номера начального конечного байта после слэша суммарный объём всего файла байтах обратите внимание на заголовок content length нём указывается размер тела сообщения то есть передаваемого фрагмента если сервер вернёт несколько фрагментов то content length будет содержать их суммарный объём теперь вернёмся менеджеру закачек зная суммарный объём файла conf avi программа поделила его на равных секций начальную менеджер загрузит при самом первом запросе прервав соединение как только дойдёт до начала второго остальные он запросит отдельно например секция будет запрошена со следующими заголовками часть заголовков опущена см полный пример выше get conf avi http range bytes ответ сервера этом случае будет следующим часть заголовков опущена см полный пример выше http partial content accept ranges bytes content range bytes content length пустая строка двоичное содержимое части если подобный запрос отправить серверу который не поддерживает фрагменты то он вернёт стандартный ответ ok как было показано самом начале но без заголовка accept ranges см также частичные get байтовые диапазоны ответ ответ основные механизмы протокола частичные get http позволяет запросить не сразу всё содержимое ресурса только указанный фрагмент такие запросы называются частичные get возможность их выполнения необязательна но желательна для серверов частичные get основном используются для докачки файлов быстрого параллельного скачивания нескольких потоках некоторые программы скачивают заголовок архива выводят пользователю внутреннюю структуру потом уже запрашивают фрагменты указанными элементами архива для получения фрагмента клиент посылает серверу запрос заголовком range указывая нём необходимые байтовые диапазоны если сервер не понимает частичные запросы игнорирует заголовок range то он вернёт всё содержимое со статусом как при обычном get случае успешного выполнения сервер возвращает вместо кода ответ со статусом partial content включая ответ заголовок content range сами фрагменты могут быть переданы двумя способами ответе помещается заголовок content range указанием байтовых диапазонов соответствии ними фрагменты последовательно помещаются основное тело при этом content length должен соответствовать суммарному объёму всего тела сервер указывает медиатип multipart byteranges для основного содержимого передаёт фрагменты указывая соответствующий content range для каждого элемента см также множественное содержимое условные get метод get изменяется на условный get если сообщение запроса включает себя поле заголовка if modified since ответ на условный get тело запрашиваемого ресурса передаётся только если он изменялся после даты указанной заголовке if modified since алгоритм определения этого включает себя следующие случаи если код статуса ответа на запрос будет отличаться от ok или дата указанная поле заголовка if modified since некорректна ответ будет идентичен ответу на обычный запрос get если после указанной даты ресурс изменялся ответ будет также идентичен ответу на обычный запрос get если ресурс не изменялся после указанной даты сервер вернет код статуса not modified использование метода условный get направлено на разгрузку сети так как он позволяет не передавать по сети избыточную информацию согласование содержимого согласование содержимого механизм автоматического определения необходимого ресурса при наличии нескольких разнотипных версий документа субъектами согласования могут быть не только ресурсы сервера но возвращаемые страницы сообщениями об ошибках различают два основных типа согласований управляемое сервером управляемое клиентом одновременно могут быть использованы оба типа или каждый из них по отдельности основной спецификации по протоколу rfc также выделяется так называемое прозрачное согласование как вариант комбинирования обоих типов последний механизм не следует путать независимой технологией transparent content negotiation tcn прозрачное согласование содержимого см rfc которая не является частью протокола http но может использоваться ним обоих существенное различие принципе работы самом значении слова прозрачное transparent спецификации по http под прозрачностью подразумевается что процесс не заметен для клиента сервера технологии tcn прозрачность означает доступность полного списка вариантов ресурса для всех участников процесса доставки данных управляемое сервером при наличии нескольких версий ресурса сервер может анализировать заголовки запроса клиента чтобы выдать по его мнению наиболее подходящую основном анализируются заголовки accept accept charset accept encoding accept languages user agent серверу желательно включать ответ заголовок vary указанием параметров по которым различается содержимое по запрашиваемому uri географическое положение клиента можно определить по удалённому ip адресу это возможно за счёт того что ip адреса как доменные имена регистрируются на конкретного человека или организацию при регистрации указывается регион котором будет использоваться желаемое адресное пространство эти данные общедоступны интернете можно найти соответствующие свободно базы данных готовые программные модули для работы ними следует ориентироваться на ключевые слова geo ip следует помнить что такой метод способен определить местоположение максимум точностью до города отсюда определяется страна при этом информация актуальна только на момент регистрации адресного пространства например если московский провайдер зарегистрирует диапазон адресов указанием москвы начнёт предоставлять доступ клиентам из ближайшего подмосковья то его абоненты могут на некоторых сайтах наблюдать что они из москвы не из красногорска или дзержинского управляемое сервером согласование имеет несколько недостатков сервер только предполагает какой вариант наиболее предпочтителен для конечного пользователя но не может знать точно что именно нужно данный момент например версия на русском языке или английском заголовков группы accept передаётся много ресурсов несколькими вариантами мало из за этого оборудование испытывает избыточную нагрузку общему кэшу создаётся ограничение возможности выдавать один тот же ответ на идентичные запросы от разных пользователей передача заголовков accept также может раскрывать некоторые сведения его предпочтениях таких как используемые языки браузер кодировка управляемое клиентом данном случае тип содержимого определяется только на стороне клиента для этого сервер возвращает ответе кодом состояния multiple choices или not acceptable список вариантов среди которых пользователь выбирает подходящий управляемое клиентом согласование хорошо когда содержимое различается по самым частым параметрам например по языку кодировке используется публичный кэш основной недостаток лишняя нагрузка так как приходится делать дополнительный запрос чтобы получить нужное содержимое прозрачное согласование данное согласование полностью прозрачно для клиента сервера данном случае используется общий кэш котором содержится список вариантов как для управляемого клиентом согласования если кэш понимает все эти варианты то он сам делает выбор как при управляемом сервером согласовании это снижает нагрузки исходного сервера исключает дополнительный запрос со стороны клиента основной спецификации по протоколу http механизм прозрачного согласования подробно не описан множественное содержимое протокол http поддерживает передачу нескольких сущностей пределах одного сообщения причём сущности могут передаваться не только виде одноуровневой но виде иерархии вложением элементов друг друга для обозначения множественного содержимого используются медиатипы multipart работа такими типами осуществляется по общим правилам описанным rfc если иное не определено конкретным медиатипом если получателю не известно как работать типом то он обрабатывает его так же как multipart mixed параметр boundary означает разделитель между различными типами передаваемых сообщений например передаваемый из формы параметр destaddress передаёт значение адреса mail следующий за ним элемент attachedfile отправляет двоичное содержимое изображения формата jpg со стороны сервера сообщения со множественным содержимым могут посылаться ответ на частичные get при запросе нескольких фрагментов ресурса этом случае используется медиатип multipart byteranges со стороны клиента при отправке html формы чаще всего пользуются методом post типичный пример страницы отправки электронных писем со вложенными файлами при отправке такого письма браузер формирует сообщение типа multipart form data интегрируя него как отдельные части введённые пользователем тему письма адрес получателя сам текст вложенные файлы post send message html http host mail example com referer user agent content type multipart form data boundary asrf bge content length суммарный объём включая дочерние заголовки connection keep alive keep alive пустая строка отсутствующая преамбула asrf bge content disposition form data name destaddress пустая строка brutal vasya example com asrf bge content disposition form data name messagetitle пустая строка негодую asrf bge content disposition form data name messagetext пустая строка привет василий твой ручной лев которого ты оставил меня на прошлой неделе разодрал весь мой диван пожалуйста забери его скорее во вложении две фотки последствиями asrf bge content disposition form data name attachedfile filename horror photo jpg content type image jpeg пустая строка двоичное содержимое первой фотографии asrf bge content disposition form data name attachedfile filename horror photo jpg content type image jpeg пустая строка двоичное содержимое второй фотографии asrf bge отсутствующий эпилог примере заголовках content disposition параметр name соответствует атрибуту name html тегах параметр filename равен исходному имени файла на компьютере пользователя более подробная информация формировании html форм вложении файлов rfc особенности протокола большинство протоколов предусматривают установление tcp сессии ходе которой один раз происходит авторизация дальнейшие действия выполняются контексте этой авторизации http же устанавливает отдельную tcp сессию на каждый запрос более поздних версиях http было разрешено делать несколько запросов ходе одной tcp сессии но браузеры обычно запрашивают только страницу включённые неё объекты картинки каскадные стили затем сразу разрывают tcp сессию для поддержки авторизованного неанонимного доступа http используются cookies причём такой способ авторизации позволяет сохранить сессию даже после перезагрузки клиента сервера при доступе данным по ftp или по файловым протоколам тип файла точнее тип содержащихся нём данных определяется по расширению имени файла что не всегда удобно http перед тем как передать сами данные передаёт заголовок content type тип подтип позволяющую клиенту однозначно определить каким образом обрабатывать присланные данные это особенно важно при работе cgi скриптами когда расширение имени файла указывает не на тип присылаемых клиенту данных на необходимость запуска данного файла на сервере отправки клиенту результатов работы программы записанной этом файле при этом один тот же файл зависимости от аргументов запроса своих собственных соображений может порождать ответы разных типов простейшем случае картинки разных форматах кроме того http позволяет клиенту прислать на сервер параметры которые будут переданы запускаемому cgi скрипту для этого же html были введены формы перечисленные особенности http позволили создавать поисковые машины первой из которых стала altavista созданная фирмой dec форумы internet магазины это интернет появились компании основным полем деятельности которых стало предоставление доступа интернет провайдеры создание сайтов см также список кодов состояния http заголовки http список referer user agent cookie дайджест аутентификация http примечания ссылки rfc http май включает версию rfc http июнь см также виде postscript pdf httpbis http http февраля окончательная спецификация разъяснение http даниэль штенберг найденные опечатки спецификации http перевод спецификации http первоначальный http тима бернерса ли написан издан году ранняя версия исходного черновика версии года тима бернерса ли пример http обмена между браузером сервером http сервера категория открытые форматы категория интернет протоколы категория стандарты категория протоколы прикладного уровня