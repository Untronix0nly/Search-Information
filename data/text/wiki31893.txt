чем хуже тем лучше подход разработке программного обеспечения объявляющий простоту реализации простоту интерфейса более важными чем любые другие свойства системы этот стиль описан ричардом гэбриелом richard gabriel работе lisp good news bad news how to win big разделе the rise of worse is better часто отдельной статьёй суть гэбриел описывает подход так простота реализация интерфейс должны быть простыми простота реализации даже несколько важнее простоты интерфейса простота самое важное требование при выборе дизайна правильность дизайн должен быть правильным во всех видимых проявлениях простой дизайн немного лучше чем правильный логичность дизайн не должен быть слишком нелогичным иногда можно пожертвовать логичностью ради простоты но лучше отказаться от тех частей дизайна которые полезны лишь редких случаях чем усложнить реализацию или пожертвовать логичностью полнота дизайн должен охватывать как можно больше важных ситуаций полнотой можно жертвовать пользу остальных качеств обязательно нужно жертвовать если она мешает простоте логичностью можно жертвовать пользу полноты если сохраняется простота особенно бесполезна логичность интерфейса гэбриел считает язык систему unix примерами такого подхода mit статье ему подход который называется подход mit mit massachusetts institute of technology гэбриел так описывает этот подход дизайну простота реализация интерфейс должны быть простыми простота интерфейса важнее простоты реализации правильность дизайн должен быть правильным во всех отношениях неправильный дизайн категорически запрещён логичность так же важна как правильность ради логичности можно жертвовать простотой полнотой полнота дизайн должен охватывать как можно больше важных ситуаций все вероятные ситуации должны быть предусмотрены простота не должна слишком мешать полноте эффект гэбриел утверждает что подход чем хуже тем лучше подхода mit простая реализации система будет легко перенесена под разные операционные системы то есть быстро распространится ещё до того как система сделанная по принципам mit будет написана более простая реализации система привлечёт больше пользователей понимающих как она работает желающих её улучшить улучшения будут продолжаться пока система не станет почти идеальной как пример гэбриел приводит компиляторы для языков лисп году пишет гэбриел компиляторы этих языков были почти одинаковы по качеству но было гораздо больше желающих улучшить компилятор чем компилятор лиспа видимо гэбриел считает что интерпретатор лисп более сложный для реализации чем компилятор хотя гэбриел возможно первым сформулировал этот принцип похожие идеи использовались гораздо раньше идеологии unix программного обеспечения открытым кодом см также kiss внешние ссылки richard gabriel lisp good news bad news how to win big richard gabriel worse is better категория технологии организации категория проектирование программного обеспечения категория принципы