операционная система реального времени осрв тип операционной системы основное назначение которой предоставление необходимого достаточного набора функций для работы систем реального времени на конкретном аппаратном оборудовании спецификация unix редакции даёт следующее определение реальное время операционных системах это способность операционной системы обеспечить требуемый уровень сервиса определённый промежуток времени идеальная осрв имеет предсказуемое поведение при всех сценариях нагрузки включая одновременные прерывания выполнение потоков системы жёсткого мягкого реального времени операционные системы реального времени иногда делят на два типа системы жёсткого реального времени системы мягкого реального времени операционная система которая может обеспечить требуемое время выполнения задачи реального времени даже худших случаях называется операционной системой жёсткого реального времени система которая может обеспечить требуемое время выполнения задачи реального времени среднем называется операционной системой мягкого реального времени системы жёсткого реального времени не допускают задержек реакции системы так как это может привести потере актуальности результатов большим финансовым потерям или даже авариям катастрофам ситуация которой обработка событий происходит за время большее системе жёсткого реального времени считается фатальной ошибкой при возникновении такой ситуации операционная система прерывает операцию блокирует её чтобы насколько возможно не пострадала надёжность готовность остальной части системы примерами систем жёсткого реального времени могут быть бортовые системы управления на самолёте космическом аппарате корабле пр системы аварийной защиты регистраторы аварийных событий системе мягкого реального времени задержка реакции считается восстановимой ошибкой которая может привести увеличению стоимости результатов снижению но не является фатальной примером может служить работа компьютерной сети если система не успела обработать очередной принятый пакет это приведёт остановке на передающей стороне повторной посылке зависимости от протокола данные при этом не теряются но сети снижается основное отличие систем жёсткого мягкого реального времени можно так система жёсткого реального времени никогда не опоздает реакцией на событие система мягкого реального времени не должна опаздывать реакцией на событие часто операционной системой реального времени считают лишь систему которая может быть использована для решения задач жёсткого реального времени это определение означает наличие осрв необходимых инструментов но также означает что эти инструменты необходимо правильно использовать большинство программного обеспечения ориентировано на мягкое реальное время для подобных систем характерно гарантированное время реакции на внешние события прерывания от оборудования жёсткая подсистема планирования процессов задачи не должны вытесняться за некоторыми исключениями повышенные требования времени реакции на внешние события или реактивности задержка вызова обработчика прерывания не более десятков микросекунд задержка при переключении задач не более сотен микросекунд классическим примером задачи где требуется осрв является управление роботом берущим деталь ленты конвейера деталь движется робот имеет лишь маленький промежуток времени когда он может её взять если он опоздает то деталь уже не будет на нужном участке конвейера следовательно работа не будет выполнена несмотря на то что робот находится правильном месте если он подготовится раньше то деталь ещё не успеет подъехать он заблокирует ей путь также для операционных систем иногда используется понятие интерактивного реального времени котором определяется минимальный порог реакции на события графического интерфейса течение которого оператор человек способен спокойно без нервозности ожидать реакции системы на данные им указания отличительные черты осрв таблица сравнения осрв обычных операционных систем ос реального времени ос общего назначения основная задача успеть среагировать на события происходящие на оборудовании оптимально распределить ресурсы компьютера между пользователями задачами на что ориентирована обработка внешних событий обработка действий пользователя как позиционируется инструмент для создания конкретного аппаратно программного комплекса реального времени воспринимается пользователем как набор приложений готовых использованию кому предназначена разработчик пользователь средней квалификации архитектуры осрв своем развитии осрв строились на основе следующих архитектур монолитная архитектура ос определяется как набор модулей между собой внутри ядра системы предоставляющих прикладному по входные интерфейсы для обращений аппаратуре основной недостаток этого принципа построения ос заключается плохой предсказуемости её поведения вызванной сложным взаимодействием модулей между собой уровневая слоевая архитектура прикладное по имеет возможность получить доступ аппаратуре не только через ядро системы её сервисы но напрямую по сравнению монолитной такая архитектура обеспечивает значительно большую степень предсказуемости реакций системы также позволяет осуществлять быстрый доступ прикладных приложений аппаратуре главным недостатком таких систем является отсутствие многозадачности архитектура клиент сервер основной её принцип заключается вынесении сервисов ос виде серверов на уровень пользователя выполнении микроядром функций диспетчера сообщений между клиентскими программами серверами системными сервисами преимущества такой архитектуры повышенная надёжность так как каждый сервис является по сути самостоятельным приложением его легче отладить отследить ошибки улучшенная поскольку ненужные сервисы могут быть исключены из системы без ущерба её повышенная так как зависший сервис может быть перезапущен без перезагрузки системы архитектуры операционных систем реального времени монолитная архитектура уровневая слоевая архитектура архитектура клиент сервер монолитная архитектура уровневая слоевая архитектура архитектура клиент сервер особенности ядра ядро осрв обеспечивает промежуточного абстрактного уровня ос который скрывает от прикладного по специфику технического устройства процессора нескольких процессоров связанного ним аппаратного обеспечения основные сервисы указанный абстрактный уровень предоставляет для прикладного по пять основных категорий сервисов управление задачами самая главная группа сервисов позволяет разработчикам приложений проектировать программные продукты виде наборов отдельных программных фрагментов каждый из которых может относиться своей тематической области выполнять отдельную функцию иметь свой собственный квант времени отведенный ему для работы каждый такой фрагмент называется задачей сервисы рассматриваемой группе обладают способностью запускать задачи присваивать им приоритеты основной сервис здесь планировщик задач он осуществляет контроль над выполнением текущих задач запускает новые соответствующий период времени следит за режимом их работы динамическое распределение памяти многие но не все ядра осрв поддерживают эту группу сервисов она позволяет задачам заимствовать области оперативной памяти для временного использования работе приложений часто эти области впоследствии переходят от задачи задаче посредством этого осуществляется быстрая передача большого количества данных между ними некоторые очень малые по размеру ядра осрв которые предполагается использовать аппаратных средах со строгим ограничением на объём используемой памяти не поддерживают сервисы динамического распределения памяти управление таймерами так как встроенные системы предъявляют жёсткие требования временным рамкам выполнения задач состав ядра осрв включается группа сервисов обеспечивающих управление таймерами для отслеживания лимита времени течение которого должна выполняться задача эти сервисы измеряют задают различные промежутки времени от мкс выше генерируют прерывания по истечении временных интервалов создают разовые циклические будильники взаимодействие между задачами синхронизация сервисы данной группы позволяют задачам обмениваться информацией обеспечивают её сохранность они также дают возможность программным фрагментам согласовывать между собой свою работу для повышения эффективности если исключить эти сервисы из состава ядра осрв то задачи начнут обмениваться искаженной информацией могут стать помехой для работы соседних задач контроль устройства ввода вывода сервисы этой группы обеспечивают работу единого программного интерфейса со всем множеством драйверов устройств которые являются типичными для большинства встроенных систем дополнение сервисам ядра многие осрв предлагают линейки дополнительных компонентов для организации таких высокоуровневых понятий как файловая система сетевое взаимодействие управление сетью управление базой данных графический интерфейс хотя многие из этих компонентов намного больше сложнее чем само ядро осрв они тем не менее основываются на его сервисах каждый из таких компонентов включается во встроенную систему только если её сервисы необходимы для выполнения встроенного приложения только для того чтоб свести расход памяти минимуму отличия от операционных систем общего назначения многие операционные системы общего назначения также поддерживают указанные выше сервисы однако ключевым отличием сервисов ядра осрв является основанный на строгом контроле времени характер их работы данном случае под понимается то что для выполнения одного сервиса операционной системы требуется временной интервал заведомо известной теоретически это время может быть вычислено по математическим формулам которые должны быть строго алгебраическими не должны включать никаких временных параметров случайного характера любая случайная величина определяющая время выполнения задачи осрв может вызвать нежелательную задержку работе приложения тогда следующая задача не уложится свой квант времени что послужит причиной для ошибки этом смысле операционные системы общего назначения не являются их сервисы могут допускать случайные задержки своей работе что может привести замедлению ответной реакции приложения на действия пользователя заведомо неизвестный момент времени при проектировании обычных операционных систем разработчики не акцентируют своё внимание на математическом аппарате вычисления времени выполнения конкретной задачи сервиса это не является критичным для подобного рода систем планирование задач работа планировщика большинство осрв выполняет планирование задач руководствуясь следующей схемой каждой задаче приложении ставится соответствие некоторый приоритет чем больше приоритет тем выше должна быть реактивность задачи высокая реактивность достигается путём реализации подхода приоритетного вытесняющего планирования preemptive priority scheduling суть которого заключается том что планировщику разрешается останавливать выполнение любой задачи произвольный момент времени если установлено что другая задача должна быть запущена незамедлительно описанная схема работает по следующему правилу если две задачи одновременно готовы запуску но первая обладает высоким приоритетом вторая низким то планировщик отдаст предпочтение первой вторая задача будет запущена только после того как завершит свою работу первая возможна ситуация когда задача низким приоритетом уже запущена планировщик получает сообщение что другая задача более высоким приоритетом готова запуску причиной этому может послужить какое либо внешнее воздействие прерывание от оборудования как например изменение состояния переключателя устройства управляемого осрв такой ситуации планировщик задач поведет себя согласно подходу приоритетного вытесняющего планирования следующим образом задаче низким приоритетом будет позволено выполнить до конца текущую машинную команду но не команду описанную исходнике программы языком высокого уровня после чего выполнение задачи далее запускается задача высоким приоритетом после того как она прорабатывает планировщик запускает прерванную первую задачу машинной команды следующей за последней выполненной каждый раз когда планировщик задач получает сигнал наступлении некоторого внешнего события триггер причина которого может быть как аппаратная так программная он действует по следующему алгоритму определяет должна ли текущая выполняемая задача продолжать работать устанавливает какая задача должна запускаться следующей сохраняет контекст остановленной задачи чтобы она потом возобновила работу места остановки устанавливает контекст для следующей задачи запускает эту задачу эти пять шагов алгоритма также называются переключением задач выполнение задачи обычных осрв задача может находиться трёх возможных состояниях задача выполняется задача готова выполнению задача заблокирована большую часть времени основная масса задач заблокирована только одна задача может выполняться на центральном процессоре текущий момент времени примитивных осрв список готовых исполнению задач как правило очень короткий он может состоять не более чем из двух трёх наименований основная функция администратора осрв заключается составлении такого планировщика задач если списке готовых выполнению задач последних имеется не больше двух трёх то предполагается что все задачи расположены оптимальном порядке если же случаются такие ситуации что число задач списке превышает допустимый лимит то задачи сортируются порядке приоритета алгоритмы планирования настоящее время для решения задачи эффективного планирования осрв наиболее интенсивно развиваются два подхода статические алгоритмы планирования используют приоритетное вытесняющее планирование приоритет присваивается каждой задаче до того как она начала выполняться преимущество отдаётся задачам самыми короткими периодами выполнения динамические алгоритмы планирования приоритет задачам присваивается динамически причём предпочтение отдаётся задачам наиболее ранним предельным временем начала завершения выполнения при больших загрузках системы edf более эффективен нежели rms взаимодействие между задачами разделение ресурсов многозадачным системам необходимо распределять доступ ресурсам одновременный доступ двух более процессов какой либо области памяти или другим ресурсам представляет определённую угрозу существует три способа решения этой проблемы временное блокирование прерываний двоичные семафоры посылка сигналов осрв обычно не используют первый способ потому что приложение не может контролировать процессор столько сколько хочет однако во многих встроенных системах осрв позволяется запускать приложения режиме ядра для доступа системным вызовам даётся контроль над окружением исполнения без вмешательства ос на системах наилучшим решением является приложение запущенное режиме ядра которому позволено блокирование прерываний пока прерывание заблокировано приложение использует ресурсы процесса единолично никакая другая задача или прерывание не может выполняться таким образом защищаются все критичные ресурсы после того как приложение завершит критические действия оно должно разблокировать прерывания если таковые имеются временное блокирование прерывания позволено только тогда когда самый долгий промежуток выполнения критической секции меньше чем допустимое время реакции на прерывание обычно этот метод защиты используется только когда длина критического кода не превышает нескольких строк не содержит циклов этот метод идеально подходит для защиты регистров когда длина критического участка больше максимальной или содержит циклы программист должен использовать механизмы идентичные или имитирующие поведение систем общего назначения такие как семафоры посылка сигналов выделение памяти следующим проблемам выделения памяти осрв уделяется больше внимания нежели операционных системах общего назначения во первых скорости выделения памяти стандартная схема выделения памяти предусматривает сканирование списка неопределённой длины для нахождения свободной области памяти заданного размера это неприемлемо так как осрв выделение памяти должно происходить за фиксированное время во вторых память может стать случае разделения свободных её участков уже запущенными процессами это может привести остановке программы из за её неспособности задействовать новый участок памяти алгоритм выделения памяти постепенно увеличивающий памяти может успешно работать на настольных системах если те перезагружаются не реже одного раза месяц но является неприемлемым для встроенных систем которые работают годами без перезагрузки простой алгоритм фиксированной длиной участков памяти очень хорошо работает несложных встроенных системах также этот алгоритм отлично функционирует настольных системах особенно тогда когда во время обработки участка памяти одним ядром следующий участок памяти обрабатывается другим ядром такие для настольных систем осрв как unison operating system или dspnano rtos предоставляют указанную возможность примечания литература ссылки операционные системы реального времени цикл статей про freertos обзор операционных систем реального времени national instruments what is real time operating system rtos white paper категория автоматизация