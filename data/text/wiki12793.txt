подпрограмма поименованная или иным образом часть компьютерной программы содержащая описание определённого набора действий подпрограмма может быть многократно вызвана из разных частей программы языках для оформления использования подпрограмм существуют специальные синтаксические средства назначение подпрограмм подпрограммы изначально появились как средство оптимизации программ по объёму занимаемой памяти они позволили не повторять программе идентичные блоки кода описывать их однократно вызывать по мере необходимости настоящему времени данная функция подпрограмм стала вспомогательной главное их назначение структуризация программы целью удобства её понимания сопровождения выделение набора действий подпрограмму вызов её по мере необходимости позволяет логически выделить целостную подзадачу имеющую типовое решение такое действие имеет ещё одно помимо экономии памяти преимущество перед повторением однотипных действий любое изменение исправление ошибки оптимизация расширение сделанное подпрограмме автоматически отражается на всех её вызовах то время как при дублировании каждое изменение необходимо вносить каждое вхождение изменяемого кода даже тех случаях когда подпрограмму выделяется однократно производимый набор действий это оправдано так как позволяет сократить размеры целостных блоков кода составляющих программу то есть сделать программу более понятной обозримой преимущества преимущества разбиения программы на подпрограммы включают декомпозиция комплексной программной задачи на простые шаги это один из двух основных инструментов структур данных уменьшение дублированного кода возможность повторного использования кода других программах разделение крупной программной задачи между различными программистами или различными стадиями проекта сокрытие деталей реализации от пользователей подпрограммы улучшение прослеживания большинство языков предоставляют способ получить след вызова который включает себя имена задействованных подпрограмм возможно даже больше такой информации как имена файлов номера строк без декомпозиции кода на подпрограммы отладка была бы серьезно затруднена механизм подпрограмм их описание вызов простейшем случае ассемблерах подпрограмма представляет собой команд операторов отдельную от основной части программы имеющую конце специальную команду выхода из подпрограммы обычно подпрограмма также имеет имя по которому её можно вызвать хотя ряд языков допускает использование неименованных подпрограмм языках высокого уровня описание подпрограммы обычно состоит по меньшей мере из двух частей заголовка тела заголовок подпрограммы описывает её имя возможно параметры то есть содержит информацию необходимую для вызова подпрограммы тело набор операторов который будет выполнен всякий раз когда подпрограмма будет вызвана вызов подпрограммы выполняется помощью команды вызова включающей себя имя подпрограммы большинстве современных языков команда вызова представляет собой просто имя вызываемой подпрограммы за которым могут следовать фактические параметры см ниже следующем примере на языке паскаль подпрограмма subprog вызывается из основной программы трижды program subprogexample описание подпрограммы subprog procedure subprog заголовок включающий имя подпрограммы begin начало тела подпрограммы writeln bye end конец тела подпрограммы begin writeln hello subprog вызов subprog вызов subprog вызов end результатом выполнения такой программы станет вывод строки hello трёх строк bye для сохранения восстановления контекста выполнения вызывающей процедуры целью исключения побочных эффектов связанных возможным нежелательным изменением используемых машинных регистров компилятор формирует для каждой процедуры специальные команд называемые прологом эпилогом процедуры некоторые языки например паскаль ада модула допускают описание вложенных подпрограмм то есть помещение подпрограмм внутрь других подпрограмм такие вложенные подпрограммы могут использоваться только той подпрограмме которой они описаны иных случаях например языке си вложение подпрограмм не допускается никаких принципиальных преимуществ вложение подпрограмм не даёт но может быть удобно для более логичной структуризации программы если какая то подпрограмма используется только некоторой другой подпрограмме логично поместить первую во вторую параметры подпрограмм назначение параметров подпрограммы часто используются для многократного выполнения стереотипных действий над различными данными подпрограмма обычно имеет доступ объектам данных описанным основной программе по крайней мере некоторым из них поэтому для того чтобы передать подпрограмму обрабатываемые данные их достаточно присвоить например глобальным переменным но такой путь не особенно удобен чреват ошибками для обеспечения контролируемой передачи параметров подпрограмму возврата результатов из неё используется механизм параметров параметры описываются при описании подпрограммы её заголовке могут использоваться внутри процедуры аналогично переменным описанным ней при вызове процедуры значения каждого из параметров указываются команде вызова обычно после имени вызываемой подпрограммы program subprogexample описание подпрограммы subprog procedure subprog line string заголовок включающий имя подпрограммы begin начало тела подпрограммы writeln line end конец тела подпрограммы begin writeln hello subprog good bye вызов subprog my love вызов subprog good bye вызов end приведённом примере параметр line подпрограммы subprog каждом вызове получает различное значение благодаря чему выводятся не одинаковые строки разные формальные фактические параметры чтобы отличать параметры подпрограммы описанные её заголовке теле от параметров указываемых при вызове подпрограммы используются формальные фактические параметры формальные параметры указываются при объявлении или определении подпрограммы фактические непосредственно при её вызове так последнем примере параметр line заголовке теле подпрограммы subprog это формальный параметр строка good bye использованная первом вызове этой подпрограммы фактический параметр при вызове подпрограммы фактические параметры указанные команде вызова становятся значениями соответствующих формальных параметров чем обеспечивается передача данных подпрограмму способ передачи параметров подпрограмму существует несколько способов передачи параметров подпрограмму передача параметров по значению формальному параметру присваивается значение фактического параметра этом случае формальный параметр будет содержать копию значения имеющегося фактическом никакое воздействие производимое внутри подпрограммы на формальные параметры не отражается на параметрах фактических так если качестве фактического параметра будет использована переменная внутри подпрограммы значение формального параметра будет изменено то фактический параметр останется без изменений int func int return передача параметров по ссылке формальный параметр может быть помещён сам фактический параметр обычно это реализуется путём помещения формальный параметр ссылки на фактический при этом любое изменение формального параметра подпрограмме отразится на фактическом параметре оба параметра во время вызова подпрограммы суть одно то же параметры передаваемые по ссылке дают возможность не только передавать параметры внутрь подпрограммы но возвращать вычисленные значения точку вызова для этого параметру внутри подпрограммы просто присваивается нужное значение после возврата из подпрограммы переменная использованная качестве фактического параметра получает это значение void func int передача параметров по имени формальный параметр может быть помещено произвольное выражение при этом вычисление этого выражения произойдёт внутри подпрограммы тот момент когда потребуется его значение если это значение фигурирует несколько раз то вычисляться оно будет тоже несколько раз параметры передаваемые по имени дают возможность писать довольно универсальные подпрограммы такой способ передачи параметров используется примеру языках алгол или алгол передача параметров через стек это фактически разновидность передачи параметра по значению ручным приводом данном случае отсутствует понятие формальных фактических параметров все параметры лежат на стеке причём их типы количество порядок не контролируются компилятором данный подход реализован языке форт язык может предоставлять возможность передавать параметры подпрограммы либо только по значению либо по значению по ссылке либо по имени значению последних двух случаях для различения способов передачи параметра используются отдельные синтаксическая конструкции паскале это ключевое слово var при описании параметра если язык содержит понятие ссылки указателя то можно обойтись без передачи параметра по ссылке её всегда можно смоделировать описав параметр типа ссылка но эта возможность удобна так как позволяет работать формальным параметром ссылкой без разыменования также повышает надёжность безопасность программы на параметры передаваемые по ссылке накладываются естественные ограничения фактический параметр подставляемый на место такого параметра при вызове обязан быть переменной то есть иметь адрес языках со строгой типизацией ещё иметь точности такой же тип данных виды подпрограмм языках высокого уровня используется два типа подпрограмм процедуры функции функция это подпрограмма специального вида которая кроме получения параметров выполнения действий передачи результатов работы через параметры имеет ещё одну особенность она всегда должна возвращать результат вызов функции является точки зрения языка выражением он может использоваться других выражениях или качестве правой части присваивания процедура это независимая именованная часть программы которую после однократного описания можно многократно вызвать по имени из последующих частей программы для выполнения определенных действий подобных языках подпрограмма всегда описывается как функция процедура реализуется как функция типа void то есть имеющая пустой тип соответственно не возвращающая никакого значения подпрограммы входящие состав классов объектных языках обычно называются методами этим термином называют любые подпрограммы члены класса как функции так процедуры когда требуется уточнение говорят методах процедурах или методах функциях см также передача параметра соглашение вызове категория концепции языков