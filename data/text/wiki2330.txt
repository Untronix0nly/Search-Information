решето эратосфе на алгоритм нахождения всех простых чисел до некоторого целого числа который приписывают математику эратосфену киренскому как во многих случаях здесь название алгоритма говорит принципе его работы то есть решето подразумевает фильтрацию данном случае фильтрацию всех чисел за исключением простых по мере прохождения списка нужные числа остаются ненужные они называются составными исключаются история название решето метод получил потому что согласно легенде эратосфен писал числа на дощечке покрытой воском прокалывал дырочки тех местах где были написаны составные числа поэтому дощечка являлась неким подобием решета через которое просеивались все составные числа оставались только числа простые эратосфен дал таблицу простых чисел до алгоритм анимация шагов алгоритма эратосфена для нахождения простых чисел до для нахождения всех простых чисел не больше заданного числа следуя методу эратосфена нужно выполнить следующие шаги выписать подряд все целые числа от двух до пусть переменная изначально равна двум первому простому числу зачеркнуть списке числа от до считая шагами по это будут числа кратные найти первое незачёркнутое число списке большее чем присвоить значению переменной это число повторять шаги пока возможно теперь все незачёркнутые числа списке это все простые числа от до на практике алгоритм можно улучшить следующим образом на шаге числа можно зачеркивать начиная сразу числа потому что все составные числа меньше него уже будут зачеркнуты этому времени соответственно останавливать алгоритм можно когда станет больше чем также все простые числа кроме нечётные числа поэтому для них можно считать шагами по начиная пример для запишем натуральные числа начиная от до ряд первое число списке простое пройдём по ряду чисел зачёркивая все числа кратные то есть каждое второе начиная следующее незачеркнутое число простое пройдём по ряду чисел зачёркивая все числа кратные то есть каждое третье начиная следующее незачеркнутое число простое пройдём по ряду чисел зачёркивая все числа кратные то есть каждое пятое начиная следующее незачеркнутое число его квадрат больше поэтому на этом работа завершена все составные числа уже зачеркнуты псевдокод реализация начинающаяся квадратов на псевдокоде вход натуральное число пусть булевый массив индексируемый числами от до изначально заполненный значениями true для пока если true для пока false выход числа для которых true сложность алгоритма сложность алгоритма составляет операций при составлении таблицы простых чисел до доказательство сложности при выбранном для каждого простого будет выполняться внутренний цикл который совершит действий сложность алгоритма можно получить из оценки следующей величины так как количество простых чисел меньших либо равных оценивается как как следствие простое число примерно равно то сумму можно преобразовать здесь из суммы выделено слагаемое для первого простого числа чтобы избежать деления на нуль данную сумму можно оценить интегралом итоге получается для изначальной суммы более строгое доказательство дающее более точную оценку точностью до константных множителей можно найти книге hardy wright an introduction to the theory of numbers модификации метода неограниченный постепенный вариант этом варианте простые числа вычисляются последовательно без ограничения сверху как числа находящиеся промежутках между составными числами которые вычисляются для каждого простого числа начиная его квадрата шагом или для нечетных простых чисел может быть представлен символически парадигме потоков данных как primes p² p² for in primes используя нотацию абстракции списков где обозначает разницу между арифметическими прогрессиями первое простое число среди возрастающих положительных целых чисел заранее известно поэтому этом самореферентном определении нет порочного круга псевдокод поэтапного отсеивания неэффективной для простоты реализации ср нижеследующими вариантами primes sieve where sieve xs sieve xs p² p² перебор делителей решето эратосфена часто путают алгоритмами которые поэтапно составные числа тестируя каждое из чисел кандидатов на делимость используя по одному простому числу на каждом этапе широко известный функциональный код дэвида тёрнера часто принимают за решето эратосфена но на самом деле это неоптимальный вариант перебором делителей оптимальном варианте не используются делители большие квадратного корня тестируемого числа псевдокоде primes sieve where sieve xs sieve in xs if решето как отмечает соренсон главной проблемой реализации решета эратосфена на вычислительных машинах является не количество выполняемых операций требования по объёму занимаемой памяти при больших значениях диапазон простых чисел может превысить доступную память хуже того даже при сравнительно небольших использование кэша памяти далеко от оптимального так как алгоритм проходя по всему массиву нарушает принцип для решения представленной проблемы используется решето котором за итерацию просеивается только часть диапазона простых чисел данный метод известен годов работает следующим образом разделяем диапазон от до на отрезки сегменты некоторой длины находим все простые числа первом отрезке используя обычное решето каждый из последующих отрезков оканчивается на некотором числе находим все простые числа отрезке следующим образом создаем булевый массив размера для каждого простого числа из уже найденных отмечаем массиве как непростые все числа кратные перебирая числа шагом начиная наименьшего кратного числа данном отрезке если число выбрано равным то сложность алгоритма по памяти оценивается как операционная сложность остаётся такой же что обычного решета эратосфена для случаев когда настолько велико что все просеиваемые простые числа меньшие не могут уместиться памяти как того требует алгоритм сита используют более медленные но гораздо меньшими требованиями по памяти алгоритмы например решето соренсона решето эйлера доказательство тождества эйлера для дзета функции римана содержит механизм отсеивания составных чисел подобный решету эратосфена но так что каждое составное число удаляется из списка только один раз схожее решето описано gries misra как решето линейным временем работы см ниже составляется исходный список начиная числа на каждом этапе алгоритма первый номер списке берется как следующее простое число результаты произведения которого на каждое число списке помечаются для последующего удаления после этого из списка убирают первое число все помеченные числа процесс повторяется вновь здесь показан пример начиная нечетных чисел после первого этапа алгоритма таким образом после го этапа рабочий список содержит только числа взаимно простые первыми простыми числами то есть числа не кратные ни одному из первых простых чисел начинается го простого числа все числа списке меньшие квадрата его первого числа являются простыми псевдокоде primes sieve where sieve xs sieve xs p² for in xs решето только по нечётным числам поскольку все чётные числа кроме составные то можно вообще не обрабатывать никак чётные числа оперировать только нечётными числами во первых это позволит вдвое сократить объём требуемой памяти во вторых это уменьшит количество выполняемых алгоритмом операций примерно вдвое это можно обобщить на числа взаимно простые не только то есть нечетные числа но уменьшение объёма потребляемой памяти алгоритм эратосфена фактически оперирует битами памяти следовательно можно существенно сэкономить потребление памяти храня переменных булевского типа не как байт как бит то есть байт памяти такой подход битовое сжатие усложняет оперирование этими битами любое чтение или запись бита будут представлять собой несколько арифметических операций но другой стороны существенно улучшается компактность памяти бо льшие интервалы умещаются кэш память которая работает гораздо быстрее обычной так что при работе по сегментно общая скорость увеличивается решето эратосфена линейным временем работы этот алгоритм обнаруживает для каждого числа отрезке его минимальный простой делитель от также поддерживается список всех простых чисел массив поначалу пустой ходе работы алгоритма этот массив будет постепенно заполняться изначально все величины заполним нулями дальше следует перебрать текущее число от до здесь может быть два случая это означает что число простое так как для него так не обнаружилось других делителей следовательно надо присвоить добавить конец списка это означает что текущее число составное его минимальным простым делителем является обоих случаях дальше начинается процесс расстановки значений массиве следует брать числа кратные обновлять них значение однако основная цель научиться делать это таким образом чтобы итоге каждого числа значение было бы установлено не более одного раза утверждается что для этого можно поступить таким образом рассматриваются числа вида где последовательно равно всем простым числам не превосходящим как раз для этого понадобилось хранить список всех простых чисел всех чисел такого вида проставим новое значение оно должно быть равно псевдокод вход натуральное число пусть pr целочисленный массив поначалу пустой lp целочисленный массив индексируемый от до заполненный нулями для до если lp lp pr для из pr пока lp lp выход все числа массиве pr сложность алгоритма на практике решето эратосфена является популярным способом оценки компьютера как видно из вышеизложенного доказательства сложности алгоритма избавившись от константы слагаемого очень близкого нулю временная сложность вычисления всех простых чисел меньше следующим соотношением однако алгоритм имеет временную сложность отношении размера входных данных что делает его алгоритмом памяти же для базового алгоритма требуется версия имеет ту же операционную сложность что версия но уменьшает потребность используемой памяти до размера сегмента размер сегмента значительно меньше размера всего массива простых чисел который равен также существует очень редко встречающееся на практике решето эратосфена оно строится за операций занимает бит памяти на практике оказывается что оценка не очень точна даже для максимальных практических диапазонов таких как ознакомившись вышеописанным доказательством сложности нетрудно понять откуда взялась неточность оценки расхождение оценкой можно объяснить следующим образом пределах данного практического диапазона просеивания существенное влияние оказывают постоянные смещения таким образом очень медленно растущий член не становится достаточно большим чтобы константами можно было справедливо пренебречь до тех пор пока не приблизится бесконечности что естественно выходит за границы любого прикладного диапазона просеивания данный факт показывает что для актуальных на сегодняшний день входных данных решета эратосфена намного лучше чем следовало ожидать используя только асимптотические оценки временной сложности следует также отметить что решето эратосфена работает быстрее чем часто сравниваемое ним решето аткина только для значений меньших сказанное справедливо при условии того что операции занимают примерно одно тоже время циклах центрального процессора это является разумным предположением для одного алгоритма работающего огромным битовым массивом учетом этого предположения получается что сито аткина быстрее чем максимально факторизованное решето эратосфена для свыше но при таких диапазонах просеивания потребуется занять огромное пространство оперативной памяти даже если была использована битовая упаковка однако раздел версии решета эратосфена показывает что предположение сохранении равенства во времени затрачиваемом на одну операции между двумя алгоритмами не выполняется при сегментации свою очередь это приводит тому что решето аткина работает медленнее чем решето эратосфена увеличением диапазона просеивания за счёт уменьшения времени на операцию для второго использование нотации большого также не является правильным способом сравнения практических характеристик даже для вариаций решета эратосфена поскольку данная нотация игнорирует константы смещения которые могут быть очень значительными для прикладных диапазонов например одна из вариаций решета эратосфена известная как решето притчарда имеет но её базовая реализация требует либо алгоритма одного большого массива использования обычного массива котором хранятся все числа до который ограничивает его диапазон использования до объема доступной памяти либо он должен быть сегментирован для уменьшения использования памяти работа притчарда уменьшила требования памяти до предела но платой за данное улучшение по памяти является усложнение вычислений что приводит увеличению операционной сложности алгоритмов популярным способом ускорения алгоритмов работающих большими массивами чисел является разного рода факторизация применение методов факторизации даёт значительное уменьшение операционной сложности за счёт оптимизации входного массива данных для индексных алгоритмов часто используют кольцевую факторизацию рассматриваемые данной статье алгоритмы нахождения всех простых чисел до заданного подобные решету эратосфена относятся индексным что позволяет применять ним метод кольцевой факторизации несмотря на теоретическое ускорение получаемое помощью кольцевой факторизации на практике существуют факторы которые не учитываются при расчётах но способны оказать существенное влияние на поведение алгоритма что результате может не дать ожидаемого прироста быстродействии рассмотрим наиболее существенные из них при аналитических расчётах предполагается что скорость выполнения арифметических операций равноценна но на самом деле это не так умножение деление выполняются гораздо медленнее чем сложение вычитание таким образом данный фактор никак не влияет на решето эратосфена поскольку оно использует только сложение вычитание но является весьма существенным для решета питчарда один из результатов усложнения вычислений упомянутого выше компилятор оптимизирует на стадии компиляции все программы для более корректного исполнения машиной но часто бывает очень сложно сказать какой вклад даёт данная оптимизация будет ли этот вклад одинаковым для двух различных алгоритмов процессор использует кэш чтобы ускорить извлечение инструкций данных из памяти наличие кэша приводит тому что программы использующие локализованные ссылки будут работать быстрее но алгоритмы просеивания простых чисел которые используют факторизацию высокой степени часто генерируют случайные ссылки память что снижает их для наглядности представления вклада факторизации алгоритмов просеивания ниже приведены две таблицы таблицах приведены результаты измерения реального времени исполнения решета эратосфена решета питчарда секундах для разных диапазонов разных степеней кольцевой факторизации обозначения для решета эратосфена питчарда соответственно где индекс означает степень кольцевой факторизации стоит отметить что означают отсутствие факторизации из таблицы видно что лучшую имеет решето эратосфена со средней степенью факторизации данный факт можно объяснить влиянием кэш фактора рассмотренного выше на алгоритмы высокой степенью факторизации заключение стоит отметить что увеличением соотношение времен становится всё больше пользу решета эратосфена на диапазоне оно стабильно быстрее при любых факторизациях данный факт ещё раз подтверждает проигрыш быстродействии решета питчарда из за сложных вычислений см также решето сундарама решето аткина корекурсия примечания литература ссылки решето эратосфена от гарднера алгоритм составления таблицы простых чисел от заданного до другого числа реализация алгоритма поиска простых чисел на java доказательство сложности алгоритма еще раз поиске простых чисел категория теоретико числовые алгоритмы категория алгоритмы