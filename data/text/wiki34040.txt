разработка через тестирование техника разработки программного обеспечения которая основывается на повторении очень коротких циклов разработки сначала пишется тест покрывающий желаемое изменение затем пишется код который позволит пройти тест под конец проводится рефакторинг нового кода соответствующим стандартам кент бек считающийся изобретателем этой техники утверждал году что разработка через тестирование поощряет простой дизайн внушает уверенность году при своём появлении разработка через тестирование была тесно связана концепцией сначала тест применяемой экстремальном однако позже выделилась как независимая методология тест это процедура которая позволяет либо подтвердить либо опровергнуть кода когда программист проверяет разработанного им кода он выполняет тестирование вручную требования разработка через тестирование требует от разработчика создания модульных тестов определяющих требования коду непосредственно перед написанием самого кода тест содержит проверки условий которые могут либо выполняться либо нет когда они выполняются говорят что тест пройден прохождение теста подтверждает поведение предполагаемое программистом разработчики часто пользуются библиотеками для тестирования для создания автоматизации запуска наборов тестов на практике модульные тесты покрывают критические нетривиальные участки кода это может быть код который подвержен частым изменениям код от работы которого зависит большого количества другого кода или код большим количеством зависимостей среда разработки должна быстро реагировать на небольшие модификации кода архитектура программы должна базироваться на использовании множества сильно связанных компонентов которые слабо сцеплены друг другом благодаря чему тестирование кода упрощается tdd не только предполагает проверку корректности но влияет на дизайн программы опираясь на тесты разработчики могут быстрее представить какая необходима пользователю таким образом детали интерфейса появляются задолго до окончательной реализации решения разумеется тестам применяются те же требования стандартов кодирования что основному коду цикл разработки через тестирование графическое представление цикла разработки виде блок действий основана на книге кента бека разработка через тестирование на примере добавление теста при разработке через тестирование добавление каждой новой программу начинается написания теста неизбежно этот тест не будет проходить поскольку соответствующий код ещё не написан если же написанный тест прошёл это означает что либо предложенная новая уже существует либо тест имеет недостатки чтобы написать тест разработчик должен чётко понимать предъявляемые новой возможности требования для этого рассматриваются возможные сценарии использования истории новые требования могут также повлечь изменение существующих тестов это отличает разработку через тестирование от техник когда тесты пишутся после того как код уже написан она заставляет разработчика сфокусироваться на требованиях до написания кода тонкое но важное отличие запуск всех тестов убедиться что новые тесты не проходят на этом этапе проверяют что только что написанные тесты не проходят этот этап также проверяет сами тесты написанный тест может проходить всегда соответственно быть бесполезным новые тесты должны не проходить по объяснимым причинам это увеличит уверенность хотя не будет гарантировать полностью что тест действительно тестирует то для чего он был разработан написать код на этом этапе пишется новый код так что тест будет проходить этот код не обязательно должен быть идеален допустимо чтобы он проходил тест каким то неэлегантным способом это приемлемо поскольку последующие этапы улучшат отполируют его важно писать код предназначенный именно для прохождения теста не следует добавлять лишней соответственно не тестируемой запуск всех тестов убедиться что все тесты проходят если все тесты проходят программист может быть уверен что код удовлетворяет всем тестируемым требованиям после этого можно приступить заключительному этапу цикла рефакторинг когда достигнута требуемая на этом этапе код может быть почищен рефакторинг процесс изменения внутренней структуры программы не затрагивающий её внешнего поведения имеющий целью облегчить понимание её работы устранить дублирование кода облегчить внесение изменений ближайшем будущем повторить цикл описанный цикл повторяется реализуя всё новую новую шаги следует делать небольшими от до изменений между запусками тестов если новый код не удовлетворяет новым тестам или старые тесты перестают проходить программист должен вернуться отладке при использовании сторонних библиотек не следует делать настолько небольшие изменения которые буквально тестируют саму стороннюю библиотеку не код её использующий если только нет подозрений что библиотека содержит ошибки стиль разработки разработка через тестирование тесно связана такими принципами как делай проще дурачок вам это не понадобится дизайн может быть чище яснее при написании лишь того кода который необходим для прохождения теста кент бек также предлагает принцип подделай пока не сделаешь тесты должны писаться для тестируемой считается что это имеет два преимущества это помогает убедиться что приложение пригодно для тестирования поскольку разработчику придется самого начала обдумать то как приложение будет тестироваться это также способствует тому что тестами будет покрыта вся когда пишется до тестов разработчики организации склонны переходить реализации следующей не протестировав существующую идея проверять что вновь написанный тест не проходит помогает убедиться что тест реально что то проверяет только после этой проверки следует приступать реализации новой этот приём известный как красный зелёный рефакторинг называют мантрой разработки через тестирование под красным здесь понимают не прошедшие тесты под зелёным прошедшие отработанные практики разработки через тестирование привели созданию техники разработка через приёмочное тестирование котором критерии описанные заказчиком приёмочные тесты используемые потом обычном процессе разработки через модульное тестирование этот процесс позволяет гарантировать что приложение удовлетворяет требованиям при разработке через приёмочное тестирование команда разработчиков на чёткой задаче удовлетворить приёмочные тесты которые отражают соответствующие требования пользователя приёмочные функциональные тесты тесты проверяющие приложения на соответствие требованиям заказчика приёмочные тесты проходят на стороне заказчика это помогает ему быть уверенным том что он получит всю необходимую преимущества исследование года показало что использование разработки через тестирование предполагает написание большего количества тестов свою очередь программисты пишущие больше тестов склонны быть более продуктивными гипотезы связывающие качество кода tdd были неубедительны программисты использующие tdd на новых проектах отмечают что они реже ощущают необходимость использовать отладчик если некоторые из тестов неожиданно перестают проходить откат последней версии которая проходит все тесты может быть более продуктивным нежели отладка разработка через тестирование предлагает больше чем просто проверку корректности она также влияет на дизайн программы изначально на тестах проще представить какая необходима пользователю таким образом разработчик продумывает детали интерфейса до реализации тесты заставляют делать свой код более приспособленным для тестирования например отказываться от глобальных переменных одиночек singletons делать классы менее связанными легкими для использования сильно связанный код или код который требует сложной инициализации будет значительно труднее протестировать модульное тестирование способствует формированию четких небольших интерфейсов каждый класс будет выполнять определенную роль как правило небольшую как следствие зависимости между классами будут снижаться зацепление повышаться контрактное дополняет тестирование формируя необходимые требования через утверждения несмотря на то что при разработке через тестирование требуется написать большее количество кода общее время затраченное на разработку обычно оказывается меньше тесты защищают от ошибок поэтому время затрачиваемое на отладку снижается многократно большое количество тестов помогает уменьшить количество ошибок коде устранение дефектов на более раннем этапе разработки препятствует появлению хронических дорогостоящих ошибок приводящих длительной утомительной отладке дальнейшем тесты позволяют производить рефакторинг кода без риска его испортить при внесении изменений хорошо код риск появления новых ошибок значительно ниже если новая приводит ошибкам тесты если они конечно есть сразу же это покажут при работе кодом на который нет тестов ошибку можно обнаружить спустя значительное время когда кодом работать будет намного сложнее хорошо код легко переносит рефакторинг уверенность том что изменения не нарушат существующую придает уверенность разработчикам увеличивает эффективность их работы если существующий код хорошо покрыт тестами разработчики будут чувствовать себя намного свободнее при внесении архитектурных решений которые призваны улучшить дизайн кода разработка через тестирование способствует более модульному гибкому расширяемому коду это связано тем что при этой методологии разработчику необходимо думать программе как множестве небольших модулей которые написаны протестированы независимо лишь потом соединены вместе это приводит меньшим более классам уменьшению связанности более чистым интерфейсам использование mock объектов также вносит вклад модуляризацию кода поскольку требует наличия простого механизма для переключения между mock обычными классами поскольку пишется лишь тот код что необходим для прохождения теста тесты покрывают все пути исполнения например перед добавлением нового условного оператора разработчик должен написать тест мотивирующий добавление этого условного оператора результате получившиеся результате разработки через тестирование тесты достаточно полны они обнаруживают любые изменения поведения кода тесты могут использоваться качестве документации хороший код расскажет том как он работает лучше любой документации документация комментарии коде могут устаревать это может сбивать толку разработчиков изучающих код так как документация отличие от тестов не может сказать что она устарела такие ситуации когда документация не соответствует не редкость слабые места существуют задачи которые невозможно по крайней мере на текущий момент решить только при помощи тестов частности tdd не позволяет механически адекватность разработанного кода области безопасности данных взаимодействия между процессами безусловно безопасность основана на коде котором не должно быть дефектов однако она основана также на участии человека процедурах защиты данных тонкие проблемы возникающие области взаимодействия между процессами невозможно уверенностью воспроизвести просто запустив некоторый код разработку через тестирование сложно применять тех случаях когда для тестирования необходимо прохождение функциональных тестов примерами может быть разработка интерфейсов пользователя программ работающих базами данных также того что зависит от специфической конфигурации сети разработка через тестирование не предполагает большого объёма работы по тестированию такого рода вещей она на тестировании отдельно взятых модулей используя mock объекты для представления внешнего мира требуется больше времени на разработку поддержку одобрение со стороны руководства очень важно если организации нет уверенности том что разработка через тестирование улучшит качество продукта то время потраченное на написание тестов может рассматриваться как потраченное впустую модульные тесты создаваемые при разработке через тестирование обычно пишутся теми же кто пишет тестируемый код если разработчик неправильно истолковал требования приложению тест тестируемый модуль будут содержать ошибку большое количество используемых тестов может создать ложное ощущение надежности приводящее меньшему количеству действий по контролю качества тесты сами по себе являются источником накладных расходов плохо написанные тесты например содержат жёстко вшитые строки сообщениями об ошибках или подвержены ошибкам дороги при поддержке чтобы упростить поддержку тестов следует повторно использовать сообщения об ошибках из тестируемого кода уровень покрытия тестами получаемый результате разработки через тестирование не может быть легко получен впоследствии исходные тесты становятся всё более ценными течением времени если неудачные архитектура дизайн или стратегия тестирования приводят большому количеству непройденных тестов важно их все исправить индивидуальном порядке простое удаление отключение или поспешное изменение их может привести пробелам покрытии тестами видимость кода набор тестов должен иметь доступ тестируемому коду другой стороны принципы инкапсуляции сокрытия данных не должны нарушаться поэтому модульные тесты обычно пишутся том же модуле или проекте что тестируемый код из кода теста может не быть доступа приватным полям методам поэтому при модульном тестировании может потребоваться дополнительная работа java разработчик может использовать отражение чтобы обращаться полям помеченными как приватные модульные тесты можно реализовать во внутренних классах чтобы они имели доступ членам внешнего класса net framework могут применяться разделяемые классы для доступа из теста приватным полям методам важно чтобы фрагменты кода предназначенные исключительно для тестирования не оставались выпущенном коде си для этого могут быть использованы директивы условной компиляции однако это будет означать что выпускаемый код не полностью совпадает систематический запуск интеграционных тестов на выпускаемой сборке поможет удостовериться что не осталось кода скрыто полагающегося на различные аспекты модульных тестов не существует единого мнения среди программистов применяющих разработку через тестирование том насколько осмысленно тестировать приватные защищённые методы также данные одни убеждены что достаточно протестировать любой класс только через его публичный интерфейс поскольку приватные переменные это всего лишь деталь реализации которая может меняться её изменения не должны отражаться на наборе тестов другие утверждают что важные аспекты могут быть реализованы приватных методах тестирование их неявно через публичный интерфейс лишь усложнит ситуацию модульное тестирование предполагает тестирование наименьших возможных модулей fake mock объекты интеграционные тесты модульные тесты тестируют каждый модуль по отдельности неважно содержит ли модуль сотни тестов или только пять тесты используемые при разработке через тестирование не должны пересекать границы процесса использовать сетевые соединения противном случае прохождение тестов будет занимать большое время разработчики будут реже запускать набор тестов целиком введение зависимости от внешних модулей или данных также превращает модульные тесты интеграционные при этом если один модуль цепочке ведет себя неправильно может быть не сразу понятно какой именно когда разрабатываемый код использует базы данных веб сервисы или другие внешние процессы имеет смысл выделить покрываемую тестированием часть это делается два шага везде где требуется доступ внешним ресурсам должен быть объявлен интерфейс через который этот доступ будет осуществляться см принцип инверсии зависимостей для обсуждения преимуществ этого подхода независимо от tdd интерфейс должен иметь две реализации первая собственно предоставляющая доступ ресурсу вторая являющаяся fake или mock объектом всё что делают fake объекты это добавляют сообщения вида объект person сохранен лог чтобы потом проверить правильность поведения mock объекты отличаются от fake тем что сами содержат утверждения проверяющие поведение тестируемого кода методы fake mock объектов возвращающие данные можно настроить так чтобы они возвращали при тестировании одни те же правдоподобные данные они могут эмулировать ошибки так чтобы код обработки ошибок мог быть тщательно протестирован другими примерами fake служб полезными при разработке через тестирование могут быть служба кодирования которая не кодирует данные генератор случайных чисел который всегда выдает единицу fake или mock реализации являются примерами внедрения зависимости использование fake mock объектов для представления внешнего мира приводит тому что настоящая база данных другой внешний код не будут протестированы результате процесса разработки через тестирование чтобы избежать ошибок необходимы тесты реальных реализаций интерфейсов описанных выше эти тесты могут быть отделены от остальных модульных тестов реально являются интеграционными тестами их необходимо меньше чем модульных они могут запускаться реже тем не менее чаще всего они реализуются используя те же библиотеки для тестирования что модульные тесты интеграционные тесты которые изменяют данные базе данных должны откатывать состоянии базы данных тому которое было до запуска теста даже если тест не прошёл для этого часто применяются следующие техники метод teardown присутствующий большинстве библиотек для тестирования try catch finally структуры обработки исключений там где они доступны транзакции баз данных создание снимка базы данных перед запуском тестов откат нему после окончания тестирования сброс базы данных чистое состояние перед тестом не после них это может быть удобно если интересно посмотреть состояние базы данных оставшееся после не прошедшего теста существуют библиотеки moq jmock nmock easymock typemock jmockit unitils mockito mockachino powermock или rhino mocks также sinon для javascript предназначенные упростить процесс создания mock объектов см также проблемно ориентированное проектирование разработка основанная на англ behaviour driven development bdd примечания литература категория категория тестирование программного обеспечения категория экстремальное