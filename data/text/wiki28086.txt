переполнение буфера явление возникающее когда компьютерная программа записывает данные за пределами выделенного памяти буфера переполнение буфера обычно возникает из за неправильной работы данными полученными извне памятью при отсутствии жесткой защиты со стороны подсистемы компилятор или интерпретатор операционной системы результате переполнения могут быть испорчены данные расположенные следом за буфером или перед ним переполнение буфера является одним из наиболее популярных способов взлома компьютерных систем так как большинство языков высокого уровня используют технологию стекового кадра размещение данных стеке процесса смешивая данные программы управляющими данными том числе адреса начала стекового кадра адреса возврата из исполняемой функции переполнение буфера может вызывать аварийное завершение или зависание программы ведущее отказу обслуживания denial of service dos отдельные виды переполнений например переполнение стековом кадре позволяют злоумышленнику загрузить выполнить произвольный машинный код от имени программы правами учетной записи от которой она выполняется известны примеры когда переполнение буфера намеренно используется системными программами для обхода ограничений существующих программных или программно аппаратных средствах например операционная система is dos для компьютеров zx spectrum использовала возможность переполнения буфера встроенной tr dos для запуска своего загрузчика машинных кодах что штатными средствами tr dos сделать невозможно безопасность программа которая использует уязвимость для разрушения защиты другой программы называется эксплойтом наибольшую опасность представляют эксплойты предназначеные для получения доступа уровню или другими словами повышения привилегий эксплойт переполнения буфера достигает этого путём передачи программе специально изготовленных входных данных такие данные переполняют выделенный буфер изменяют данные которые следуют за этим буфером памяти представим гипотетическую программу системного которая исполняется привилегиями примеру изменение паролей пользователей если программа не проверяет длину введённого нового пароля то любые данные длина которых превышает размер выделенного для их хранения буфера будут просто записаны поверх того что находилось после буфера злоумышленник может вставить эту область памяти инструкции на машинном языке например шелл код выполняющие любые действия привилегиями добавление удаление учётных записей пользователей изменение паролей изменение или удаление файлов если исполнение этой области памяти разрешено дальнейшем программа передаст неё управление система исполнит находящийся там машинный код злоумышленника правильно написанные программы должны проверять длину входных данных чтобы убедиться что они не больше чем выделенный буфер данных однако программисты часто забывают об этом случае если буфер расположен стеке стек растёт вниз например архитектуре то помощью переполнения буфера можно изменить адрес возврата выполняемой функции так как адрес возврата расположен после буфера выделенного выполняемой функцией тем самым есть возможность выполнить произвольный участок машинного кода адресном пространстве процесса использовать переполнение буфера для искажения адреса возврата возможно даже если стек растёт вверх этом случае адрес возврата обычно находятся перед буфером даже опытным программистам бывает трудно определить насколько то или иное переполнение буфера может быть уязвимостью это требует глубоких знаний об архитектуре компьютера целевой программе было показано что даже настолько малые переполнения как запись одного байта за пределами буфера могут представлять собой уязвимости переполнения буфера широко распространены программах написанных на относительно низкоуровневых языках таких как язык ассемблера си которые требуют от программиста управления размером выделяемой памяти устранение ошибок переполнения буфера до сих пор является слабо процессом системы формальной верификации программ не очень эффективны при современных языках многие языки например perl python java ada управляют выделением памяти автоматически что делает ошибки связанные переполнением буфера маловероятными или невозможными perl для избежания переполнений буфера обеспечивает автоматическое изменение размера массивов однако системы времени выполнения библиотеки для таких языков всё равно могут быть подвержены переполнениям буфера вследствие возможных внутренних ошибок реализации этих систем проверки windows доступны некоторые программные аппаратно программные решения которые предотвращают выполнение кода за пределами переполненного буфера если такое переполнение было осуществлено среди этих решений dep windows xp sp ossurance anti execute гарвардской архитектуре исполняемый код хранится отдельно от данных что делает подобные атаки практически невозможными краткое техническое изложение пример рассмотрим пример уязвимой программы на языке си include int main int argc char argv char buf strcpy buf argv return ней используется небезопасная функция strcpy которая позволяет записать больше данных чем вмещает выделенный под них массив если запустить данную программу системе windows аргументом длина которого превышает байт скорее всего работа программы будет аварийно завершена пользователь получит сообщение об ошибке следующая программа не подвержена данной уязвимости include int main int argc char argv char buf strncpy buf argv sizeof buf return здесь strcpy заменена на strncpy которой максимальное число копируемых символов ограничено размером буфера описание на схемах ниже видно как уязвимая программа может повредить структуру стека иллюстрация записи различных данных буфер выделенный стеке файл stack overflow png перед копированием данных файл stack overflow png строка hello была записана буфер файл stack overflow png буфер переполнен что привело перезаписи адреса возврата return address архитектуре стек растёт от бо льших адресов меньшим то есть новые данные помещаются перед теми которые уже находятся стеке записывая данные буфер можно осуществить запись за его границами изменить находящиеся там данные частности изменить адрес возврата если программа имеет особые привилегии например запущена правами root злоумышленник может заменить адрес возврата на адрес шелл кода что позволит ему исполнять команды атакуемой системе повышенными привилегиями эксплуатация техники применения переполнения буфера меняются зависимости от архитектуры операционной системы области памяти например случай переполнением буфера куче используемой для динамического выделения памяти значительно отличается от аналогичного стеке вызовов эксплуатация стеке также известно как stack smashing технически подкованный пользователь может использовать переполнение буфера стеке чтобы управлять программой своих целях следующими способами перезаписывая локальную переменную находящуюся памяти рядом буфером изменяя поведение программы свою пользу перезаписывая адрес возврата стековом кадре как только функция завершается управление передаётся по указанному атакующим адресу обычно область памяти изменению которой он имел доступ перезаписывая указатель на функцию или обработчик исключений которые впоследствии получат управление перезаписывая параметр из другого стекового кадра или нелокальный адрес на который указывается текущем контексте если адрес данных неизвестен но он хранится регистре можно применить метод trampolining адрес возврата может быть перезаписан адресом опкода который передаст управление область памяти данными если адрес хранится регистре то переход команде передающей управление по этому адресу например call вызовет исполнение заданного пользователем кода адреса подходящих опкодов или байтов памяти могут быть найдены dll или самом исполняемом файле однако адреса обычно не могут содержать нулевых символов местонахождения этих опкодов меняются зависимости от приложения операционной системы metasploit project например хранил базу данных подходящих опкодов для систем windows на данный момент она недоступна переполнение буфера стеке не нужно путать переполнением стека также стоит отметить что такие уязвимости обычно находят помощью техники тестирования фаззинг эксплуатация куче переполнение буфера области данных кучи называется переполнением кучи эксплуатируется иным способом чем переполнение буфера стеке память куче выделяется приложением динамически во время выполнения обычно содержит программные данные эксплуатация производится путём порчи этих данных особыми способами чтобы заставить приложение перезаписать внутренние структуры такие как указатели связных списках обычная техника эксплойта для переполнения буфера кучи перезапись ссылок динамической памяти например метаданных функции malloc использование полученного изменённого указателя для перезаписи указателя на функцию программы уязвимость продукте gdi компании microsoft возникающая при обработке изображений формата jpeg пример опасности которую может представлять переполнение буфера куче сложности эксплуатации действия буфером перед его чтением или исполнением могут помешать успешному использованию уязвимости они могут уменьшить угрозу успешной атаки но не полностью исключить её действия могут включать перевод строки верхний или нижний регистр удаление спецсимволов или фильтрацию всех кроме буквенно цифровых однако существуют приёмы позволяющие обойти эти меры буквенно цифровые шелл коды полиморфические коды атака возврата библиотеку те же методы могут применяться для скрытия от систем обнаружения вторжений некоторых случаях включая случаи конвертации символов юникод уязвимость ошибочно принимается за позволяющую провести dos атаку тогда как на самом деле возможно удалённое исполнение произвольного кода предотвращение для того чтобы сделать переполнение буфера менее вероятным используются различные приёмы системы обнаружения вторжения помощью систем обнаружения вторжения сов можно обнаружить предотвратить попытки удалённого использования переполнения буфера так как большинстве случаев данные предназначенные для переполнения буфера содержат длинные массивы инструкций no operation nop или noop сов просто блокирует все входящие пакеты содержащие большое количество nop ов этот способ общем неэффективен так как такие массивы могут быть записаны использованием разнообразных инструкций языка ассемблера последнее время крэкеры начали использовать шелл коды шифрованием кодом полиморфным кодом алфавитно цифровым кодом также атаки возврата стандартную библиотеку для проникновения через сов защита от повреждения стека защита от повреждения стека используется для обнаружения наиболее частых ошибок переполнения буфера при этом проверяется что стек вызовов не был изменён перед возвратом из функции если он был изменён то программа заканчивает выполнение ошибкой сегментации существуют две системы stackguard stack smashing protector старое название propolice обе являются расширениями компилятора gcc начиная gcc stage ssp был интегрирован основной дистрибутив компилятора gentoo linux openbsd включают ssp состав ними gcc размещение адреса возврата стеке данных облегчает задачу осуществления переполнения буфера которое ведёт выполнению произвольного кода теоретически gcc могут быть внесены изменения которые позволят помещать адрес специальном стеке возврата который полностью отделён от стека данных аналогично тому как это реализовано языке forth однако это не является полным решением проблемы переполнения буфера так как другие данные стека тоже нуждаются защите защита пространства исполняемого кода для unix подобных систем защита пространства исполняемого кода может смягчить последствия переполнений буфера делая большинство действий злоумышленников невозможными это достигается рандомизацией адресного пространства aslr или запрещением одновременного доступа памяти на запись исполнение неисполняемый стек предотвращает большинство эксплойтов кода оболочки существует два исправления для ядра linux которые обеспечивают эту защиту pax exec shield ни один из них ещё не включен основную поставку ядра openbsd версии включает систему называемую которая также обеспечивает контроль исполняемого пространства заметим что этот способ защиты не предотвращает повреждение стека однако он часто предотвращает успешное выполнение полезной нагрузки эксплойта программа не будет способна вставить код оболочки защищённую от записи память такую как существующие сегменты исполняемого кода также будет невозможно выполнение инструкций неисполняемой памяти такой как стек или куча aslr затрудняет для взломщика определение адресов функций коде программы помощью которых он мог бы осуществить успешную атаку делает атаки типа ret libc очень трудной задачей хотя они всё ещё возможны контролируемом окружении или если атакующий правильно угадает нужный адрес некоторые процессоры такие как sparc фирмы sun efficeon фирмы transmeta новейшие битные процессоры фирм amd intel предотвращают выполнение кода расположенного областях памяти помеченных специальным битом nx amd называет своё решение nx от intel своё xd от защита пространства исполняемого кода для windows сейчас существует несколько различных решений предназначенных для защиты исполняемого кода системах windows предлагаемых как компанией майкрософт так сторонними компаниями майкрософт предложила своё решение получившее название dep от предотвращение выполнения данных включив его пакеты обновлений для windows xp windows server dep использует дополнительные возможности новых процессоров intel amd которые были предназначены для преодоления ограничения на размер адресуемой памяти присущий разрядным процессорам для этих целей некоторые служебные структуры были увеличены эти структуры теперь содержат бит nx dep использует этот бит для предотвращения атак связанных изменением адреса обработчика исключений так называемый seh эксплойт dep обеспечивает только защиту от seh эксплойта он не защищает страницы памяти исполняемым кодом кроме того майкрософт разработала механизм защиты стека предназначенный для windows server стек помечается помощью так называемых осведомителей целостность которых затем проверяется если осведомитель был изменён значит стек повреждён существуют также сторонние решения предотвращающие исполнение кода расположенного областях памяти предназначенных для данных или реализующих механизм aslr использование безопасных библиотек проблема переполнений буфера характерна для языков си потому что они не скрывают детали низкоуровневого представления буферов как контейнеров для типов данных таким образом чтобы избежать переполнения буфера нужно обеспечивать высокий уровень контроля за созданием изменениями программного кода осуществляющего управление буферами использование библиотек абстрактных типов данных которые производят автоматическое управление буферами включают себя проверку на переполнение один из инженерных подходов предотвращению переполнения буфера два основных типа данных которые позволяют осуществить переполнение буфера этих языках это строки массивы таким образом использование библиотек для строк списковых структур данных которые были разработаны для предотвращения или обнаружения переполнений буфера позволяет избежать многих уязвимостей цена таких решений снижение из за лишних проверок других действий выполняемых кодом библиотеки поскольку он пишется на все случаи жизни каждом конкретном случае часть выполняемых им действий может быть излишней история переполнение буфера было понято частично ещё году публикации computer security technology planning study самое раннее злонамеренное использование переполнения буфера произошло году на нём был основан один из нескольких эксплойтов применявшихся червём морриса для через интернет программа использовала уязвимость сервисе finger системы unix позднее году томас лопатик независимо переоткрыл переполнение буфера занёс результаты исследования список багтрак годом позже опубликовал пошаговое введение использование переполнения буфера при работе со стеком smashing the stack for fun and profit журнале phrack тех пор как минимум два известных сетевых червя применяли переполнение буфера для заражения большого количества систем году червь code red использовал эту уязвимость продукте компании microsoft internet information services iis году sql slammer заражал машины microsoft sql server году использование присутствующего лицензионных играх для xbox переполнения буфера позволило запускать на консоли нелицензионное программное обеспечение без модификации аппаратных средств использованием так называемых модчипов ps independence exploit также использовал переполнение буфера чтобы достичь того же результата для playstation аналогичный эксплойт для wii twilight применял эту уязвимость игре the legend of zelda twilight princess см также переполнение стека ошибка на единицу heap spraying примечания литература ссылки переполнение буфера немного удачи локальный брутфорс уязвимости переполнение буфера переполнение буфера под windows константин третьяков атаки на переполнение буфера андрей колищак атаки на переполнение стека windows nt андрей колищак перезапись указателя на окно памяти история одной уязвимости анализ переполнения буфера iis червя code red smashing the stack for fun and profit phrack by aleph one buffer overflows demystified wired slammed подробный обзор переполнения буфера червём slammer the tao of windows buffer overflow библиотеки другие средства защиты the better string library улучшенная строковая библиотека stack smashing protector расширение gcc обеспечивающее защиту от переполнения стека категория уязвимости защиты категория ошибки категория статьи примерами кода си