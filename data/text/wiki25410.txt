jit компиляция компиляция на лету динамическая компиляция технология увеличения программных систем использующих байт код путём компиляции байт кода машинный код или другой формат непосредственно во время работы программы таким образом достигается высокая скорость выполнения по сравнению байт кодом сравнивая компилируемыми языками за счёт увеличения потребления памяти для хранения результатов компиляции затрат времени на компиляцию jit базируется на двух более ранних идеях касающихся среды исполнения компиляции байт кода динамической компиляции так как jit компиляция является по сути одной из форм динамической компиляции она позволяет применять такие технологии как адаптивная оптимизация динамическая рекомпиляция благодаря этому jit компиляция может показывать лучшие результаты плане чем статическая компиляция интерпретация jit компиляция особенно хорошо подходят для динамических языков при этом среда исполнения справляется поздним связыванием типов гарантирует безопасность исполнения проекты llvm gnu lightning libjit часть проекта dotgnu rpython часть проекта pypy могут быть использованы для создания jit интерпретаторов любого скриптового языка особенности реализации jit компиляция может быть применена как ко всей программе так её отдельным частям например текстовый редактор может на лету компилировать регулярные выражения для более быстрого поиска по тексту aot компиляцией такое сделать не представляется возможным для случаев когда данные предоставляются во время исполнения программы не момент компиляции jit используется реализациях java javascript net framework одной из реализаций python pypy существующие наиболее интерпретаторы языков php ruby perl python им подобных имеют ограниченные или неполные jit большинство реализаций jit имеют структуру сначала приложение компилируется байт код виртуальной машины среды исполнения aot компиляция потом jit компилирует байт код непосредственно машинный код итоге при запуске приложения тратится лишнее время что впоследствии компенсируется более быстрой его работой описание языках таких как java php lua perl gnu clisp исходный код транслируется одно из промежуточных представлений называемое байт кодом байт код не является машинным кодом какого либо конкретного процессора может переноситься на различные компьютерные архитектуры исполняться точно так же байт код исполняется виртуальной машиной jit читает байт код из некоторых секторов редко сразу из всех компилирует их машинный код этим сектором может быть файл функция или любой фрагмент кода однажды код может кэшироваться дальнейшем повторно использоваться без перекомпиляции динамически компилируемая среда это среда которой компилятор может вызываться приложением во время выполнения например большинство реализаций common lisp содержат функцию compile которая может создать функцию во время выполнения python это функция eval это удобно для программиста так как он может контролировать какие части кода действительно подлежат компиляции также помощью этого приёма можно компилировать динамически сгенерированный код что некоторых случаях приводит даже лучшей чем реализация статически коде однако стоит помнить что подобные функции могут быть опасны особенно когда данные передаются из недоверенных источников основная цель использования jit достичь превзойти статической компиляции сохраняя при этом преимущества динамической компиляции большинство тяжеловесных операций таких как парсинг исходного кода выполнение базовых оптимизаций происходит во время компиляции до развёртывания то время как компиляция машинный код из байт кода происходит быстрее чем из исходного кода байт код более переносим отличие от машинного кода среда может контролировать выполнение байт кода после компиляции поэтому приложение может быть запущено песочнице стоит отметить что для нативных программ такая возможность тоже существует но реализация данной технологии сложнее компиляторы из байт кода машинный код легче реализации так как большинство работы по оптимизации уже было проделано компилятором jit как правило эффективней чем интерпретация кода тому же некоторых случаях jit может показывать большую по сравнению со статической компиляцией за счёт оптимизаций возможных только во время исполнения компиляция может осуществляться непосредственно для целевого процессора операционной системы на которой запущено приложение например jit может использовать векторные sse расширения процессора если он обнаружит их поддержку среда может собирать статистику работающей программе производить оптимизации учётом этой информации некоторые статические компиляторы также могут принимать на вход информацию предыдущих запусках приложения среда может делать глобальные оптимизации кода например встраивание библиотечных функций код без потери преимуществ динамической компиляции без накладных расходов присущих статическим компиляторам линкерам более простое перестраивание кода для лучшего использования кэша задержка при запуске средства борьбы ней типичная причина задержки при запуске jit компилятора расходы на загрузку среды компиляцию приложения машинный код общем случае чем лучше чем больше оптимизаций выполняет jit тем дольше получается задержка поэтому разработчикам jit приходится искать компромисс между качеством генерируемого кода временем запуска однако часто оказывается так что узким местом процессе компиляции оказывается не сам процесс компиляции задержки системы ввода вывода так например rt jar java virtual machine jvm имеет размер мб поиск метаданных нём занимает достаточно большое количество времени ещё одно средство оптимизации компилировать только те участки приложения которые используются чаще всего этот подход реализован pypy hotspot java virtual machine компании sun microsystems качестве эвристики может использоваться счётчик запусков участков приложения размер байт кода или детектор циклов порой достаточно сложно найти правильный компромисс так например sun java virtual machine имеет два режима работы клиент сервер режиме клиента количество компиляций оптимизаций минимально для более быстрого запуска то время как режиме сервера достигается максимальная но из за этого увеличивается время запуска ещё одна техника называемая pre jit компилирует код до запуска преимуществом данной техники является уменьшенное время запуска то же время недостатком является плохое качество кода по сравнению runtime jit история самую первую реализацию jit можно отнести lisp написанную mccarthy году его книге recursive functions of symbolic expressions and their computation by machine part он упоминает функции компилируемые во время выполнения тем самым избавив от надобности вывода работы компилятора на перфокарты другой ранний пример упоминания jit можно отнести кену томпсону который году впервые применил регулярные выражения для поиска подстрок текстовом редакторе qed для ускорения алгоритма томпсон реализовал компиляцию регулярных выражений машинный код ibm важный метод получения кода был предложен митчелом году когда он реализовал язык lc smalltalk был пионером области jit технологий трансляция машинный код выполнялась по требованию кэшировалась для дальнейшего использования когда память кончалась система могла удалить некоторую часть кэшированного кода из оперативной памяти восстановить его когда он снова потребуется язык self некоторое время был самой быстрой реализацией smalltalk работал всего лишь два раза медленней будучи полностью объектно ориентированным self был заброшен sun но исследования продолжились рамках языка java термин just in time компиляция был заимствован из термина точно срок популяризован джеймсом гослингом использовавшим этот термин данный момент jit используется почти во всех реализациях java virtual machine также большой интерес представляет диссертация защищённая году университете eth швейцария цюрих михаэлем францем динамическая кодогенерация ключ переносимому программному обеспечению реализованная им система juice динамической кодогенерации из переносимого семантического дерева для языка оберон система juice предлагалась как плагин для интернет браузеров безопасность так как jit составляет исполняемый код из данных возникает вопрос безопасности возможных уязвимостей jit компиляция включает себя компиляцию исходного кода или байт кода машинный код его выполнение как правило результат записывается память исполняется сразу же без промежуточного сохранения на диск или его вызов как отдельной программы современных архитектурах для повышения безопасности произвольные участки памяти не могут быть исполнены как машинный код nx bit для корректного запуска регионы памяти должны быть предварительно помечены как исполняемые при этом для большей безопасности флаг исполнения может ставиться только после снятия флага разрешения записи схема защиты см также aot двоичная трансляция hotspot common language runtime crusoe gnu lightning llvm код tracing just in time compilation примечания категория технологии компиляторов