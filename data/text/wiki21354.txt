статусы процессов современных ос проце сс программа которая выполняется текущий момент стандарт iso определяет процесс как совокупность взаимосвязанных действий преобразующих входящие данные исходящие компьютерная программа сама по себе это только пассивная инструкций то время как процесс это выполнение этих инструкций также процессом называют выполняющуюся программу все её элементы адресное пространство глобальные переменные регистры стек открытые файлы так далее представление процесса обычно процесс вычислительной системе представлен также говорят владеет следующими ресурсами образом исполняемого машинного кода программой памятью обычно некоторой областью виртуальной памяти которая включает себя исполняемый код входные выходные данные процесса стек вызовов для отслеживания активных подпрограмм кучу для хранения промежуточных результатов вычислений генерируемых во время выполнения дескрипторами ресурсов операционной системы выделенными для процесса например файл файловыми дескрипторами терминологии ос unix или хэндлами терминологии ос windows атрибутами безопасности такими как владелец набор полномочий процесса допустимых операций состоянием процессора контекстом таким как содержимое регистров схема преобразования виртуальных адресов физические контекст текущего процесса выгружается память когда выполняется переключение на другой процесс операционная система хранит большую часть информации процессах таблице процессов операционных системах поддерживающих потоки выполнения нити потоки также владеют собственными ресурсами обычно это только состояние процессора хотя потоки могут использовать другие ресурсы для снижения вероятности влияния процессов друг на друга вероятности отказа системы например взаимных блокировок или пробуксовки операционная система обеспечивает изоляцию процессов выделяет необходимые им ресурсы также операционная система предоставляет механизмы для взаимодействия процессов безопасными предсказуемыми способами представление процесса памяти данном разделе рассмотрено представление процесса памяти операционной системы linux архитектуры подобное представление мало отличается от многих других многозадачных операционных систем архитектур например amd наследнике стек вызовов точно так же растёт сверху вниз но размер адресного пространства увеличен до байт представление программы памяти пространстве пользователя linux использует плоскую модель памяти поэтому данной архитектуре каждому процессу доступно байт памяти вся виртуальная память делится на пространство пользователя пространство ядра пространство ядра занимает один гигабайт памяти начиная самого старшего адреса всё остальное пространство то есть три гигабайта отведено под пространство пользователя на схеме справа показано представление пространства любого процесса пространство ядра едино для всех процессов так как операционной системе может существовать только один экземпляр ядра после запуска программы оперативную память импортируются команды процессора машинный код данные то же время старшие адреса импортируются аргументы запуска также переменные окружения области данных хранятся данные доступные только для чтения это могут быть например строковые литералы области данных как правило хранятся глобальные переменные куча heap используется для выделения памяти во время работы программы linux для этого существует системный вызов mmap область стека используется для вызова процедур также немаловажной деталью является наличие случайного отступа между стеком верхней областью также между областью данных кучей делается это целях безопасности например для предотвращения встраивания стек других функций динамически подключаемые библиотеки отображения файлов располагаются между стеком кучей иерархия процессов многозадачных операционных системах появилась возможность работать одновременно несколькими процессами операционные системы вытесняющей позволяли добиться ощущения работы нескольких процессов одновременно при этом потребовались средства управления несколькими процессами unix unix одна из первых многозадачных ос каждый процесс имеет уникальный числовой идентификатор pid процессы ней имеют древовидную иерархию где корнем является процесс init pid новый процесс можно создать системным вызовом fork он будет являться точной копией процесса родителя любой процесс кроме init всегда имеет процесс родитель атрибут ppid процессы родитель которых завершил свою работу становятся дочерними процессами init процессы также объединяются группы за управление идентификатором группы pgid отвечают системные вызовы setpgid getpgid pgid равен pid лидера группы процесс потомок наследует группу от родителя группы используются для управления заданиями группы процессов объединяются сессии за создание новой сессии отвечает системный вызов setsid процессы из одной группы не могут принадлежать разным сессиям поэтому лидер группы не может стать лидером сессии при создании сессии дочерний процесс автоматически становится лидером сессии лидером новой группы сессии используются для отслеживания всех процессов запущенных после входа пользователя каждая сессия может иметь не более одного управляющего терминала эмулятор терминала имеет дочерним процессом оболочку команд чаще всего bash или sh которая перед запуском становится лидером новой сессии устанавливает себе управляющим терминал создание процесса простейшей операционной системе не требуется создание новых процессов поскольку внутри них работает одна единственная программа запускаемая во время включения устройства более сложных системах надо создавать новые процессы обычно они создаются при запуске ос например когда происходит инициализация драйверов устройств при появлении запроса на создание процесса происходит случае если работающий процесс выполняет системный вызов состояния процесса процесс помимо главного рабочего состояния может находиться других состояниях например ожидания linux граф переходов процесс ос linux может находиться одном из следующих состояний running runnable процесс исполняется либо ожидает своей очереди исполняться непрерываемый сон процесс ожидает определённого события прерываемый сон процесс ожидает определённого события либо сигнала остановка процесс приостановлен например отладчиком zombie процесс уже завершился но ещё не передал родительскому процессу свой код возврата завершение процесса минимум этапа завершения процесс удаляется из всех очередей планирования то есть ос больше не планирует выделение каких либо ресурсов процессу сбор статистики потреблённых процессом ресурсах последующим удалением его из памяти причины завершения процесса обычный выход выход по исключению или ошибке недостаточный объём памяти превышение лимита отведённого программе времени выход за пределы отведённой области памяти неверная команда данные программы как инструкции для процессора ошибка защиты выполнение команды завершение родительского процесса ошибка ввода вывода вмешательство оператора примечания литература таненбаум вудхалл операционные системы разработка реализация спб isbn таненбаум современные операционные системы изд спб питер ил isbn категория операционная система категория потоки выполнения