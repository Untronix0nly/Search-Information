сортировка выбором selection sort алгоритм сортировки может быть как устойчивый так неустойчивый на массиве из элементов имеет время выполнения худшем среднем лучшем случае предполагая что сравнения делаются за постоянное время алгоритм без дополнительного выделения памяти сортировка выбором шаги алгоритма находим номер минимального значения текущем списке производим обмен этого значения со значением первой позиции обмен не нужен если минимальный элемент уже находится на данной позиции теперь сортируем хвост списка исключив из рассмотрения уже отсортированные элементы для реализации устойчивости алгоритма необходимо пункте минимальный элемент непосредственно вставлять первую позицию не меняя порядок остальных элементов пример неустойчивой реализации include include using namespace std template void selection_sort array size_t size for size_t idx_i idx_i public static ilist selection ilist list for int pl sql type is table of integer index by binary_integer function sort_choice return is list l_min pls_integer l_dummy pls_integer begin for in loop list dbms_random random инициализация массива случайными числами end loop for in list first list last loop l_min for in list last loop if list java public static void sort int arr for int min min ruby def selection_sort array for min in array count least min for in min array count if arrayj покажем почему данная реализация является неустойчивой рассмотрим следующий массив из элементов каждый из которых имеет два поля сортировка идет по первому полю массив до сортировки уже после первой итерации внешнего цикла будем иметь отсортированную теперь заметим что взаимное расположение элементов изменилось таким образом рассматриваемая реализация является неустойчивой так как после каждого прохода по внутреннему циклу делается только один обмен то общее число обменов равно что раз меньше чем сортировке пузырьком число проходов по внутреннему циклу равно даже случае сортировки частично или полностью массива наихудший случай число сравнений теле цикла равно число сравнений заголовках циклов число сравнений перед операцией обмена суммарное число сравнений число обменов наилучший случай время сортировки коротких целых чисел на одном том же программно аппаратном комплексе сортировкой выбором составило сек ещё более улучшенной сортировкой пузырьком сек пирамидальная сортировка сильно улучшает базовый алгоритм используя структуру данных куча для ускорения нахождения удаления минимального элемента существует также двунаправленный вариант сортировки методом выбора котором на каждом проходе отыскиваются устанавливаются на свои места минимальное максимальное значения реализация на vba sub vsort for to step for to step if activesheet cells activesheet cells then activesheet cells activesheet cells activesheet cells activesheet cells activesheet cells activesheet cells activesheet cells activesheet cells activesheet cells end if next next end sub использованием переменной sub vsort for to step for to step if activesheet cells activesheet cells then activesheet cells activesheet cells activesheet cells activesheet cells end if next next end sub здесь сортируются ячейки напрямую activesheet cells обращение ячейке обратите внимание что координаты ячеек vba задаются как номер колонки номер ряда котором расположена ячейка также помните что ячейки индексируются литература см также список алгоритмов сортировки сортировка пузырьком сортировка вставками ссылки динамическая визуализация алгоритмов сортировки открытым исходным кодом категория алгоритмы сортировки