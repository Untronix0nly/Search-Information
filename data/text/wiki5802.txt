haskell чистый функциональный язык общего назначения является одним из самых языков поддержкой отложенных вычислений система типов полная сильная статическая автоматическим выводом типов основанная на системе типов хиндли милнера поскольку язык функциональный то основная управляющая структура это функция отличительная черта языка серьёзное отношение типизации во многом связи этим язык назван честь исследователя теории типов изобретателя комбинаторной логики хаскелла карри имеются средства взаимодействия кодом на других языках есть встроенная поддержка многозадачного параллельного развитый инструментарий средства автоматического тестирования отладки профилирования том числе для параллельных программ существует несколько тысяч библиотек открытым исходным кодом история haskell принадлежит семейству языков ml непосредственно на него оказал большое влияние язык миранда разработанный году дэвидом тёрнером миранда была первым чистым функциональным языком имевшим коммерческую поддержку была относительно популярна годах но оставалась программным обеспечением это затрудняло развитие исследования возможностей ленивого функционального поэтому буквально за пару лет появилось более десятка схожих языков чтобы объединить усилия разных разработчиков году на конференции по функциональным языкам компьютерной архитектуре орегоне fpca было решено создать комитет для разработки открытого стандарта году была предложена первая версия языка haskell дальнейшем работа комитета продолжилась году был опубликован the haskell report который стал стабильным стандартом языка на много лет язык однако продолжал бурно развиваться компилятор ghc был фактическим стандартом отношении новых возможностей разработка новых версий языка идёт открыто этот процесс получил название haskell haskell prime ˈhæskəl praɪm хаскелл штрих все желающие могут выдвигать свои предложения обсуждению предложения обсуждаются течение года комитет отбирает объявляет предложения которые готов принять формируется новый комитет концу года готовится новая версия языка таким образом новые версии языка теперь могут появляться каждый год планируется объявлять некоторые ревизии значительными поддерживать такие ревизии на протяжении длительного времени версия языка haskell была объявлена конце но последней значительной версией стандартом остаётся haskell характеристики языка качестве основных характеристик языка haskell можно выделить следующие недопустимость побочных эффектов чистота языка возможность писать программы побочными эффектами без нарушения парадигмы функционального помощью монад статическая сильная полная типизация автоматическим выведением типов основанная на типизации хиндли милнера функции высшего порядка том числе лямбда абстракции частичное применение ленивые вычисления lazy evaluation сопоставление образцом функциональные образцы охраняющие выражения guards параметрический полиморфизм его объединение ad hoc полиморфизмом единую модель посредством классов типов алгебраические типы данных том числе за счёт ленивости генераторы списков list comprehensions возможность интеграции программами реализованными на императивных языках посредством открытых интерфейсов стандартное расширение языка момента принятия последнего стандарта языка haskell прошло много времени тех пор ведущие реализации языка ghc hugs были расширены множеством дополнительных возможностей параметрический полиморфизм высших рангов за счёт квантификации переменных типа вплоть до естественно исключающая выведение типов функциональные зависимости fd functional dependencies реализации языка есть несколько реализаций языка haskell некоторые реализации ориентированы на практическое применение то время как другие представляют прежде всего академический интерес компиляторы интерпретаторы наиболее популярен на практике оптимизирующий компилятор ghc который создаёт быстрый код позволяет использовать многие расширения языка ghc может оптимизировать как скорость так компактность программ способен создавать многозадачный код комплекте компилятором ghc поставляется также интерактивная среда ghci со встроенным отладчиком ghc работает windows macos на нескольких юникс подобных платформах linux bsd solaris именно ghc является стандартным компилятором haskell platform именно на нём первую очередь тестируются все новые библиотеки другая популярная реализация языка интерпретатор hugs он написан на си имеет малый размер дистрибутива работает практически на всех платформах hugs предоставляет интерактивную среду но может также запускать программы на haskell стиле скриптовых языков пользователи windows могут использовать графическую интерактивную среду winhugs поскольку hugs это интерпретатор то программы запущенные нём выполняются медленнее чем код созданный большинством компиляторов языка haskell hugs часто рекомендуют качестве среды для изучения языка hugs полностью поддерживает стандарт языка haskell также некоторые наиболее популярные расширения языка другие известные реализации nhc быстрый компилятор поддерживающий стандарт haskell написанный на haskell доступен для всех юникс подобных платформ включая macos windows cygwin yhc york haskell compiler форк nhc ставящий целью быть более переносимым эффективным поддерживает отладчик hat генерирует промежуточный байт код который можно использовать для генерации кода на других языках uhc utrecht haskell compiler компилятор поддерживающий haskell почти полностью также некоторые расширения поддерживает глобальный анализ программ имеет несколько кодогенераторов том числе почти полностью функциональный генератор jvm кода кодогенераторы для llvm clr состоянии разработки работает на юникс подобных системах включая macos windows cygwin hbi hbc интерпретатор компилятор поддерживающие стандарт haskell некоторыми расширениями точно работает linux поддерживается слабо lhc the luxurious lhc haskell optimization system альтернативный кодогенератор для ghc поддерживающий глобальную низкоуровневую оптимизацию программы целом jhc компилятор для исследования возможностей глобальной оптимизации программ yale haskell ранняя реализация языка haskell на lisp haskell platform году сформировалась концепция haskell platform стандартного дистрибутива языка включающего кроме компилятора ghc также дополнительный инструментарий систему сборки развёртывания пакетов cabal набор популярных библиотек сейчас haskell platform это рекомендованный базовый дистрибутив для разработчиков готовые сборки haskell platform доступны для windows macos ряда дистрибутивов linux альтернативные целевые платформы большинство компиляторов языка haskell создают непосредственно машинный код для используемой платформы но есть несколько проектов позволяющих производить код для виртуальных машин или генерировать код на других языках степень зрелости уровень поддержки подобных проектов сильно разнится llvm патч для ghc добавляющий генератор кода для llvm настоящее время включен компилятор ghc использование llvm позволяет достичь большей на ряде задач альтернативный кодогенератор uht работоспособен частично виртуальная машина java jvm lambdavm патч для ghc добавляющий генератор байткода jvm jvm bridge мост между haskell jvm для ghc jaskell генератор байт кода jvm вероятно заброшен альтернативный кодогенератор uhc работоспособен почти полностью common language runtime net прототип генератора msil кода для компилятора eht uht некоторые проекты по поддержке clr упоминаются ghc faq на начало года их состояние не ясно javascript кодогенератор javascript для ghc патч для ghc позволяющий компилировать программы javascript код ycr js конвертер байт кода компилятора yhc javascript fay компилятор подмножества haskell javascript языки описания архитектуры verilog vhdl clash альтернативный способ разработки asic fpga несколько интересных целевых платформ доступны при использовании компилятора yhc частности существуют интерпретатор байт кода yhc на python конвертер байт кода yhc erlang core но эти разработки пока ещё также существуют реализации подмножеств языка на разных целевых платформах расширения языка макрорасширение контролем типов объектно ориентированное haskell haskell mondrian расширения реализаций языка относится ghc развитие системы типизации многопоточность параллельные вычисления распределённые вычисления транзакционная память примеры вычисление факториала следующий пример показывает синтаксис языка haskell при реализации функции для вычисления факториала fac integer integer fac fac fac это определение описывает процесс вычисления факториала виде рекурсивной функции это определение похоже на то которое можно найти учебниках по информатике большая часть исходного кода на языке haskell походит на математическую нотацию аспектах синтаксиса использования например вышеприведённый пример можно переписать виде fac product что соответствует математическому определению факториала первая строка приведённом выше коде необязательна является объявлением функционального типа то есть задаёт типы аргументов указаны до последней тип возвращаемого значения указан после последней эта строка может быть прочитана как функция fac имеет тип из целого целое это значит что она получает на вход один целочисленный аргумент записан слева от возвращает результат также целого типа записан справа от если программист не указал типы явно компилятор или интерпретатор может определить их автоматически вторая третья строки формируют определение тела функции определение состоит из предложений или клауз каждое предложение представляет собой пару образец выражение компилятор или интерпретатор использует механизм сопоставления образцом для выбора одного из выражений данном случае вторая строка определения будет выбрана тогда когда фактический параметр при вызове функции fac будет равен нулю третьей строке помимо механизма сопоставления образцами использовано охраняющее выражение оно гарантирует что функция не будет работать для отрицательных чисел для которых факториал не определён если отрицательное число будет передано качестве фактического параметра функцию fac то программа остановится сообщением об ошибке калькулятор простейший калькулятор для вычисления выражений обратной польской записи может быть определён на языке haskell при помощи одной функции calc string float calc head foldl words where float string float zs zs zs zs zs zs zs zs zs flip zs zs abs abs zs xs read xs исходная строка со входным выражением тут разбивается стандартной функцией words на список слов строк между пробельными символами который обрабатывается функцией левосторонней свёртки foldl слева направо по одному слову помощью функции которая поддерживает рабочий список прочитываемых чисел промежуточных значений поначалу пустой список интерпретирует каждое входное слово как обозначение арифметической функции или как число ходе вычисления ею окончательного значения выражения которое будет первым оставшимся значением рабочем списке по окончании обработки списка слов входного выражения так что его можно достать оттуда помощью стандартной функции head здесь есть оператор композиции функций например main calc abs числа фибоначчи другой пример показывает способ вычисления бесконечного списка чисел фибоначчи за линейное время fibs zipwith fibs tail fibs бесконечный список здесь определен при помощи механизма корекурсии последующие значения списка здесь задаются на основе предыдущих начальными качестве первых двух элементов списка выражением генератором zipwith fibs tail fibs вычисляющим все элементы начиная третьего на основании предшествующих двух через стандартную функцию zipwith которая суммирует попарно элементы двух своих входных списков это определение является примером применения механизма ленивых вычислений который является важнейшей частью языка haskell для понимания того как это определение работает можно рассмотреть вычисление первых семи чисел фибоначчи его помощью fibs tail fibs zipwith fibs то же самое может быть записано также при использовании определителей списков fibs или расширения языка haskell реализованного компиляторе ghc параллельных определителей списков fibs или помощью напрямую самореферентной генерирующей функции fibs next fibs where next next простые числа этих примерах показано как можно использовать списочные выражения генераторы списков реализация нахождения всех простых чисел обычным путём проверка каждого числа на простоту общее определение все натуральные числа которые являются простыми primenums rem true primenums или помощью решета эратосфена прототипичном неэффективном варианте primes map head scanl minus map primes или эффективно предварительным каскадным объединением потоков составных чисел primes minus unionall map where unionall xs union xs unionall pairs pairs xs ys union xs ys pairs или посегментно массивами import data array import data list tails inits ps px false true использованием канонических функций minus union из модуля data list ordered union xs ys case compare of lt union xs ys eq union xs ys gt union xs ys union minus xs ys case compare of lt minus xs ys eq minus xs ys gt minus xs ys minus описание игральных карт простой пример использования алгебраических типов данных для описания игральных карт идентификаторы типов начинаются заглавных букв идентификаторы переменных функций со строчных новые алгебраические типы определяются ключевым словом data синонимы типов определяются ключевым словом type алгебраический тип сумма масть перечисление значением типа масть может быть одно из указанных справа или пики или трефы или бубны или червы масть здесь выступает конструктором пики трефы конструкторами data масть пики трефы бубны червы необязательное автоматическое выведение экземпляров классов позволяющее преобразовывать значения строки функцией show из show обратно функцией read из read также сравнивать их между собой функциями классов eq ord deriving show read eq ord алгебраический тип сумма достоинство data достоинство семёрка восьмёрка девятка десятка туз deriving show read eq ord алгебраический тип произведение карта тип кортеж значения типа карта комбинации значений типов достоинство масть объединённые конструктором данных часто имена конструктора данных конструктора типа совпадают data карта достоинство масть deriving show read eq ord синоним списка значений типа карта type рука карта функция определяющая есть ли руке марьяж король дама одной масти естьмарьяж рука bool естьмарьяж карты достаточно найти марьяж хотя бы одной масти any естьмарьяжмасти пики трефы бубны червы where проверить есть ли дама король заданной масти руке естьмарьяжмасти дама elem карты король elem карты примеры раздач рука дама трефы семёрка червы король трефы туз бубны десятка пики король пики дама червы main do проверить рука проверить проверить пустая раздача where проверить кк putstrln show кк show естьмарьяж кк вывод дама трефы семёрка червы король трефы туз бубны true десятка пики король пики дама червы false false численное интегрирование численное интегрирование методом трапеций sum map where main do print sin pi вывод проверка палиндромов примере ниже демонстрируется работа со строками юникоде import data char tolower isalpha palindrom char bool palindrom norm reverse norm where norm map tolower filter isalpha test char io test putstrln show palindrom main do test енисее синева test роза упала на лапу азора test не роза упала на лапу азора test мир как рим test мир не рим test prefer pi test حوت فمه مفتوح test ne mateno bone tamen вывод енисее синева true роза упала на лапу азора true не роза упала на лапу азора false мир как рим true мир не рим false prefer pi true حوت فمه مفتوح true ne mateno bone tamen true приложения написанные на языке haskell мозаичный оконный менеджер xmonad для window system целиком написан на языке haskell darcs распределённая система управления версиями рядом уникальных возможностей написана на haskell первая реализация компилятора интерпретатора языка perl pugs была написана на haskell за несколько месяцев компилятор ghc часто выступает площадкой для проверки новых возможностей функционального оптимизации коммерческие приложения haskell всё чаще используется коммерческой среде этому способствует принятая сообществе традиция выпускать библиотеки под либеральными лицензиями более свободно доступных библиотек на условиях лицензий bsd mit или являются общественным достоянием вот примеры некоторых коммерческих приложений написанных на haskell bluespec systemverilog встраиваемый язык проектирования верификации схем является расширением языка haskell cryptol коммерческий язык для разработки проверки алгоритмов реализован на haskell примечательно что первое формально микроядро sel было тоже написано на haskell haskell активно применяется области финансового анализа рисков системах поддержки принятия решений haskell применяют разработчики генератора городских ландшафтов для игр моделирования gamr есть примеры успешного применения языка для разработки частных информационных систем коммерческих организациях том числе странах снг приложения открытым исходным кодом также на haskell написано много приложений открытым исходным кодом большинство из них доступны архиве hackage ниже приведены некоторые из них базы данных haskelldb строго типизированный интерфейс доступа sql базам данных hdbc универсальный интерфейс доступа реляционным базам данных поддерживаются sqlite mysql postgresql odbc takusen библиотека доступа базам данных использующая интерфейс левой свёртки есть библиотеки для работы berkeleydb couchdb mongodb redis tokyocabinet tokyotyrant simpledb sqlite графика blobs редактор диаграмм diagrams библиотека для схем диаграмм fieldtrip библиотека для функционального описания объектов glome один из множества трассировщиков лучей glut opengl интерфейсы для использования glut opengl gpipe функциональный интерфейс для gpu grapefruit библиотека для функционального реактивного графики интерфейсов haven библиотека отрисовки масштабируемой векторной графики haskellcharts библиотека для отрисовки двумерных графиков sdl интерфейс для использования libsdl из haskell yampa встраиваемый язык для функционального реактивного помощью стрелок графические интерфейсы gtk hs библиотека для создания графических интерфейсов на основе gtk grapefruit wxfruit библиотеки декларативного интерфейсов на основе реактивного qthaskell библиотека для создания графических интерфейсов на основе qt wxhaskell библиотека для создания графических интерфейсов на основе wxwidgets htk библиотека для создания графических интерфейсов на основе tk игры bloxorz трёхмерная логическая игра frag трёхмерный шутер от первого лица monadius двумерный скроллер raincat рисованная игра головоломка интернет gitit вики платформа основанная на системах контроля версиями darcs git или mercurial happstack фреймворк для веб аналог django или ruby on rails twidge терминальный клиент для микроблоггинга обработка текста haxml библиотека для работы xml hxt комбинаторная библиотека для работы xml использующая выразительный предметно ориентированный язык основанный на leksah интегрированная среда разработки написанная на haskell основном для разработки на haskell поддерживает навигацию по исходным текстом автодополнение отладку сборку пакетов pandoc универсальный конвертер текста между различными языками разметки parsec комбинаторная библиотека для синтаксического анализа the grammatical framework библиотека для работы текстом на естественных языках yi текстовый редактор подобный emacs написанный на haskell использующий его качестве скриптового языка параллельное многозадачное многопоточное chp communicating haskell processes библиотека реализующая модель параллельных процессов без общей памяти data parallel haskell расширение языка обеспечивающие параллелизм данных на многоядерных процессорах parallel стандартная библиотека для параллельного stm реализация программной транзакционной памяти разработка alex генератор лексических анализаторов cabal install инструмент для сетевой установки автоматической сборки развёртывания приложений на haskell happy генератор синтаксических анализаторов haddock инструмент автоматической генерации документации для библиотек haskell hunit библиотека для модульного тестирования quickcheck библиотека для автоматического тестирования системные программы darcs продвинутая распределённая система контроля версий house операционная система написанная на haskell xmonad мозаичный менеджер окон himerge графическая оболочка для emerge пакетного менеджера gentoo freearc архиватор языки компиляторы agda язык зависимыми типами доказатель теорем curry функционально логический язык реализованный поверх хаскела cpphs реализация препроцессора языка си язык зависимыми типами flapjax язык для реактивного веб приложений language python библиотека лексического синтаксического анализа кода на языке python language библиотека анализа генерации кода на языке си lava язык аппаратных схем llvm интерфейс для работы llvm из haskell pugs компилятор интерпретатор языка perl webbits библиотека для работы кодом на языке javascript см также сравнение возможностей haskell другими языками см статье сравнение языков класс типов примечания литература bryan sullivan john goerzen don stewart real world haskell reilly isbn isbn graham hutton programming in haskell cambrige university press isbn isbn kees doets jan van eijck the haskell road to logic maths and programming isbn ссылки основной сайт посвящённый языку haskell содержит различные справочные материалы список интерпретаторов компиляторов haskell настоящий момент все интерпретаторы компиляторы бесплатны кроме того имеется обширный список ссылок на ресурсы по теории функционального другим языкам standard ml clean учебный справочный материал полный перевод описания языка haskell на русский язык сайт книга learn you haskell for great good роман душкин курс лекций по функциональному читается мифи года артём гавриченков фёдор сахаров спецкурс теория функционального язык haskell лецкии презентации прочитан на вмик мгу году категория haskell категория языки семейства haskell категория языки автоматическим управлением памятью