фортра первый язык высокого уровня получивший практическое применение имеющий транслятор испытавший дальнейшее развитие создан период по год группой программистов под руководством джона бэкуса корпорации ibm название fortran является сокращением от for mula tran slator переводчик формул фортран широко используется первую очередь для научных инженерных вычислений одно из преимуществ современного фортрана большое количество написанных на нём программ библиотек подпрограмм имеется большое количество написанных на фортране большей части на старых версиях языка различных математических библиотек для матричной алгебры решения систем линейных уравнений библиотеки для решения уравнений интегральных уравнений их систем аппроксимации функций специальных функций быстрых преобразований фурье математической статистики других математических дисциплин эти библиотеки поставляются как правило компилятором ряд таких пакетов создавался на протяжении десятилетий популярен научной среде по сей день например imsl большинство таких библиотек является фактически достоянием человечества они доступны исходных кодах хорошо документированы отлажены весьма эффективны современный фортран fortran fortran приобрёл черты необходимые для эффективного для новых вычислительных архитектур позволяет применять современные технологии частности обобщённое модульное ооп сохраняя при этом преемственность более ранними версиями одна из главных концепций развития современного фортрана средства поддержки параллельности векторные операции эволюция стандартов языка фортран жёстко язык поэтому он легко переносится на различные платформы новые стандарты языка значительной мере сохраняют преемственность более старыми что позволяет использовать коды ранее написанных программ модифицировать их при этом по мере развития языка заранее объявляются устаревшие конструкции которые будущем возможно будут удалены fortran на базе стандарта фирмы ibm fortran iv программа на fortran выдачей компилятора fortran введено множество улучшений введены операторы открытия закрытия файла open close вывода на стандартное устройство print добавлены строковый тип данных функции для его обработки введён блочный оператор if конструкция if then else if then end if также оператор включения фрагмента программы include введена возможность работы файлами прямого доступа увеличена максимальная размерность массива до сняты ограничения на индексы массива расширены возможности работы процедурами введено понятие внутреннего файла каковыми являются массивы числовые строковые переменные внутренние файлы позволяют частности осуществлять преобразование число строка строка число стандартным операторами чтения записи read write fortran значительно переработан стандарт языка введён свободный формат написания кода появились дополнительные описания implicit none type allocatable pointer target namelist введены управляющие операторы конструкции добавлены do end do вместо завершения цикла меткой do while оператор передачи управления на начало цикла cycle конструкция выбора select case для замены громоздких конструкций if операторов goto также заключительный оператор программной единицы модульной или внутренней процедуры end введён инструментарий указателей функции для работы оперативной памятью по аналогии языком введены операторы работы динамической памятью allocate deallocate nullify добавлены программные компоненты module private public contains interface use intent введено маскирование присваивания массивов присваивание при выполнении наложенного на элементы массива логического условия без использования операторов условия также работа сечениями массивов введён оператор конструкция where для частичной замены циклов правая часть оператора присваивания не изменяется маскирование присваивания практически на все операторы конструкции функции оперирующие массивами стандартные операции присваивания сложения вычитания также деления умножения на число распространены на массивы их секции определяемые сечениями этом случае осуществляется поэлементное присваивание появились новые встроенные функции первую очередь для работы массивами функции для вычислений массивах all лог произведение mask логическое сложение count число истинных элементов product произведение элементов массива sum сложение элементов массива dot_product скалярное произведение matmul умножение матриц добавились справочные функции также функции свёртки массивов языке появились элементы ооп введены производные типы данных отдельно объявлен список устаревших черт языка предназначенных для удаления будущем добавлены дополнительные функции для работы со строковыми данными частности функции trim удаление завершающих пробелов repeat кратное копирование строки функции выравнивания по левой правой границам fortran коррекция предыдущего стандарта введён оператор конструкция forall позволяющие более гибко чем оператор конструкция where присваивать массивы заменять громоздкие циклы forall позволяет заменить любое присваивание сечений или оператор конструкцию where частности обеспечивает доступ диагонали матрицы данный оператор считается перспективным параллельных вычислениях способствуя более эффективному чем циклы осуществлению fortran дальнейшее развитие поддержки ооп языке взаимодействие операционной системой добавлены также следующие возможности асинхронный ввод вывод данных средства взаимодействия языком динамического размещения данных fortran стандартом предполагается поддержка средствами языка параллельных вычислений co arrays fortran также предполагается увеличить максимальную размерность массивов до добавить встроенные специальные математические функции др возможности характерные особенности языка фортран имеет большой набор встроенных математических функций поддерживает работу целыми вещественными комплексными числами двойной повышенной точности при бинарных операциях используется real имеет богатый инструментарий работы массивами внешними файлами вопреки мнению современный фортран выше имеет полноценный инструментарий для работы символьными данными изначально выразительные средства языка были не очень велики поскольку фортран был первым реализованным языком высокого уровня дальнейшем фортран были добавлены многие лексические конструкции характерные для структурного модульного обобщённого объектно формат записи кода перфокарта разметкой колонок для фортрана ранних версий структура программ изначально была ориентирована на ввод перфокарт имела ряд удобных именно для этого случая свойств так по колонку располагалась область меток служила для маркировки текста как продолжения предыдущей строки любым символом кроме пробела по располагался собственно текст оператора или комментария колонки по могли служить для нумерации карт чтобы восстановить случайно рассыпавшуюся колоду или для краткого комментария транслятором они игнорировались если текст оператора не вписывался отведённое пространство по колонку колонке следующей карты ставился признак продолжения затем оператор продолжался на ней расположить два или более оператора одной строке карте было нельзя когда перфокарты ушли историю эти достоинства превратились серьёзные неудобства именно поэтому стандарту фортрана начиная fortran сохранением фиксированного формата исходного текста был добавлен вободный формат который не регламентирует позиции строки позволяет записывать более одного оператора на строку введение свободного формата современных способов структурного позволило создавать код читаемость ясность которого не уступает коду созданному при помощи других современных языков таких как паскаль или java современные среды разработки позволяют комбинировать форматы например расширять длину строки до свободного формата обычно символа позволяют записывать несколько операторов строке но при этом позволяют также сохранять отступ слева делать левое поле характерный для старого фиксированного формата оставляя тем самым выделенную колонку для меток ошибок форматов также колонку продолжения строки своего рода визитной карточкой старого фортрана является огромное количество меток которые использовались операторах безусловного перехода goto операторах циклов условных операторах операторах описания форматного ввода вывода format большое количество меток операторов goto часто делало программы на фортране трудными для понимания именно этот негативный опыт стал причиной по которой ряде современных языков например языке java метки связанные ними операторы безусловного перехода сильно видоизменены однако современный фортран основном начиная версии fortran избавлен от избытка меток за счёт введения таких операторов как do end do do while select case конструкции if then elseif then else end if др более того современных стандартах языка оставлен лишь классический оператор goto применяемый во многих языках поныне вычисляемый оператор goto также конструкция entry множественного входа процедуры были исключены из стандарта хотя как правило продолжают поддерживаться компиляторами hello world фиксированный формат символами выделены пробелы позициях строки по print hello world end свободный формат print hello world end замечания оператор начала главной программы program не является обязательным строго говоря единственный обязательный оператор фортран программы оператор end выбор прописных или строчных букв для написания операторов программы произволен точки зрения современных стандартов языка фортран множество прописных букв множество строчных букв совпадают типы данных фортран поддерживает основных элементарных встроенных типов данных действительный real комплексный complex целый integer со знаком или без логический logical символьный character кроме того возможно создавать производные типы данных помощью ключевого слова type самого начала создания языка существовали типа данных действительный комплексный целый логический существует понятие разновидности типа данных или параметры типа это позволяет параметризовать вещественные комплексные данные то есть указывать точность диапазон десятичного порядка другие данные повышая мобильность приложений для всех числовых данных определены обычные арифметические операции присваивания существуют встроенные функции встроенная функция log качестве аргумента может иметь только действительное или комплексное число не целое как правило для действительных чисел одинарной точности отводится байта real или параметр разновидности типа kind двойной байт для комплексных чисел число байт удваивается целые числа могут занимать от до байт современные компиляторы позволяют программисту оперировать числами учетверённой точности арифметических операциях изменение типа производится по умолчанию от целого действительное далее комплексное число либо применением специальной встроенной числовой функции так эквивалентны следующие выражения целое log log real строковые символьные данные задаются указанием длины скобках либо после атрибута типа либо после имени строки для задания строки теле программы используются одинарные или двойные кавычки так эквивалентны записи it is hot или it is hot это удобно тех случаях когда самой строке присутствуют кавычки it isn hot для строк существует встроенная операция конкатенации сложения строк существует встроенных функций для символьных данных помимо универсальных обрабатывающих все типы данных метки это целые числа числом цифр не более символы не допускаются метки используются операторах go to операторах чтения записи форматирования также при обработке ошибок исключений помимо меток фортране имеется возможность именовать управляющие конструкции циклы логические условия конструкции forall end forall where end where select case end select type end type др причём имя конструкции может содержать любые допустимые именах переменных символы встроенные функции для символьных данных для преобразования число символ char achar преобразуют целое соответствующий ему символ операционной системы или символ таблицы ascii для преобразования символ число ichar iachar осуществляют обратные преобразования функции сравнения строк lge lgt lle llt результат функций истина если длины строк выраженные символах ascii удовлетворяют следующим неравенствам соответственно функции длины len len_trim первая возвращает длину строки количество символов вторая возвращает длину строки без завершающих пробелов если они имеются функции преобразования trim adjustl adjustr repeat функция trim возвращает строку без завершающих пробелов функции adjustl adjustr выравнивают строку удаляют пробелы слева справа соответственно функция repeat возвращает копий строки функции поиска строке scan back index back verify back факультативный параметр back определяет направление поиска по умолчанию слева для back false направо для back true функция scan определяет номер позиции строке слева или справа первого найденного символа из списка строки если результат отрицательный то функция возвратит целочисленный функция index определяет номер позиции которой впервые начинается полное вхождение строки строку причём поиск может вестись как слева так справа но номер позиции исчисляется всегда слева от начала строки при неудачном поиске функция возвратит функция verify обратна функции index так verify возвращает номер позиции такого символа строки которого нет строке маске если же все различные символы строки присутствуют строке маске то функция вернёт все эти функции являются элементными их аргументом может быть массив символов или целых чисел результатом будет согласованный численный символьный или логический массив стандарты фортрана начиная версии предусматривают возможность работы символами юникода помимо указанных возможностей фортран позволяет обрабатывать символьные данные средствами своего встроенного матричного векторного анализа что существенно повышает гибкость обработки символьных данных фортране для совместимости программами написанными на языке си существует понятие си строки которая задаётся добавлением символа после кавычки это си строка нулевая строка будет задана так подпрограммы процедуры функции подпрограммы фортране существовали самого первого стандарта поныне являются одним из главных инструментов фортране вызов подпрограмм функций передача их параметров происходят исключительно по ссылке не по значению поэтому подпрограмма может изменить переданный ей аргумент главной программе если специальным образом это не предотвратить такой механизм позволяет сделать естественной нотацию при записи математических формул сохранить при этом высокое быстродействие при работе большими массивами данных подпрограммы фортрана могут содержать списке параметров называемых формальными параметрами необязательные опциональные параметры могут вообще не содержать параметров стандарт языка позволяет осуществлять перегрузку процедур операций посредством родового интерфейса объединяя различные процедуры оперирующая каждая например целыми действительными комплексными числами символьными переменными под одним родовым именем этом случае главной программе достаточно обратиться родовой процедуре характер выполняемых операций будет зависеть от типа данных предложенных процедуре для обработки по такому принципу сделаны все встроенные функции подпрограммы например cos перегрузка процедур функций операторов причём символы перегруженных операторов программист может предложить свои помимо встроенных не только на встроенные типы данных но на типы определённые программистом виды подпрограмм процедуры разделяются на подпрограммы функции подпрограммы удобнее если необходимо возвратить большое число разнородных результатов функции при возвращении результата одного типа том числе массива подпрограмма определяется оператором описания subroutine список формальных аргументов функция оператором function имя_функции список формальных аргументов вызов подпрограммы осуществляется оператором call список фактических аргументов вызов функции осуществляется по имени указанием списка фактических аргументов без использования какого либо специального оператора начиная со стандарта поддерживаются рекурсивные процедуры отсутствовавшие ранних версиях из за ограниченной машинной памяти для объявления которых необходим явный спецификатор recursive при этом результат функции должен отличаться от имени самой функции чистые процедуры функции pure subroutine function введённые стандартом процедуры функции не имеющие побочных эффектов чистая функция должна возвращать значение не должна изменять ни одного из своих входных параметров или глобальных данных чистая процедура должна изменять только те параметры которые явно указаны как результирующие выходные посредством атрибута intent out или inout возможность побочных эффектов фортране то есть конечном итоге возможность изменения переменных главной программе через подпрограмму побочное следствие быстрого метода передачи по адресу чистые программные единицы не могут содержать операторов write read во внешние файлы устройства включая клавиатуру экран также операторов паузы останова программы все встроенные функции подпрограммы фортрана том числе математические кроме обращающихся операционной системе функций даты времени также датчиков случайных чисел являются чистыми то есть не создают побочных эффектов чистые функции введены целью повышения культуры повышения эффективности алгоритмов аргументы подпрограмм качестве аргументов подпрограмм могут быть любые встроенные типы данных включая массивы их секции указатели также типы определяемые программистом аргументами подпрограмм также могут быть функции другие подпрограммы кроме внутренних подпрограмм операторной функции родовых обобщённых процедур допускаются только специфические имена некоторых др встроенных типов аргументы подразделяются на формальные фактические аргументы заключаются скобки после имени подпрограммы разделяются запятыми имена фактических формальных аргументов могут совпадать формальные аргументы это аргументы подпрограммы функции указанные при её описании при отсутствии аргументов подпрограммы скобки могут быть опущены функции скобки расставляются при отсутствии формальных аргументов формальный параметр процедура называется формальной процедурой фактические аргументы это аргументы передаваемые подпрограмме или функции для выполнения при её вызове функция без аргументов вызывается пустым списком скобках подпрограмма без скобок формальные фактические аргументы должны быть согласованы типы аргументов разновидности их вида должны быть одинаковыми массиву должен соответствовать массив или сечение массива той же конфигурации существуют массивы перенимающие конфигурацию перенимающие размер как формальные аргументы процедур массив перенимающий конфигурацию это формальный аргумент массив который наследует конфигурацию ему фактического массива такого массива при его объявлении задаётся размерность совпадающая размерностью фактического аргумента массива опускаются верхние границы по умолчанию нижние границы равны но могут быть заданы произвольными число значение элементов массива перенимающего конфигурацию точно наследуются от фактического аргумента массива массив перенимающий размер это оставленный для совместимости более ранний свойственный языку fortran способ описания наследующих массивов таких массивов наследуется только последнее измерение верхняя граница которого описывается звёздочкой при этом формальный фактический массивы аргументы могут иметь разную размерность массивы перенимающие конфигурацию размер не могут быть динамическими или быть указателями процедуры имеющие наследующие массивы должны иметь явный интерфейс строки формальные аргументы также могут наследовать перенимать длину фактического аргумента строки строки перенимающие длину описываются посредством символа character len имя_строки при явном задании длины строки длина строки формального аргумента не может быть больше фактического аргумента строки аргументы бывают позиционными ключевыми позиционные формальные фактические аргументы связываются друг другом по порядку их расположения списке аргументов который должен совпадать ключевые по имени ключа который совпадает именем формального аргумента ключевые позволяют нарушить порядок следования аргументов или пропустить часть из них так для подпрограммы заголовком subroutine one вызов может быть таким call one где фактические аргументы ключевые аргументы позволяют иметь необязательные аргументы которые могут быть опущены этом случае необязательные аргументы должны иметь атрибут optional например если задано optional то этом случае возможен вызов call one процедуры необязательными параметрами должны иметь явный интерфейс работа массивами массивы центральный пункт философии фортрана все конструкции языка данные программные единицы операторы встроенные функции циклы созданы создаются для эффективной обработки прежде всего массивов фортран по мере своего развития следует принципу максимального насколько это возможно ухода от детального поэлементного описания обработки массивов особенно это эффективно при обработке многомерных массивов предельная размерность массивов стандарта такой взгляд на массивы не был свойственен ранним версиям языка первые элементы обобщённого подхода массивам появились fortran развиваются они поныне массивы бывают статические динамические динамические разделяются на размещаемые автоматические образуемые при вызове подпрограммы элементы двумерного массива фортране размещаются по столбцам не по строкам как например си таким образом быстрее всего изменяется первый индекс массива поэтому для эффективной работы массивами во вложенных циклах следует индексировать внутренние циклы левыми индексами внешние правыми по умолчанию присваивание ввод вывод инициализация массивов осуществляются по столбцам do do do arr правильно brr работоспособно но медленнее несколько раз end do end do end do массивы могут быть нулевого размера том числе если нижняя граница превосходит верхнюю индексами границ массивов могут быть любые целые числа по умолчанию нижняя граница равна real allocatable arr объявление размещаемого динамического действительного массива integer allocatable ari arsi целых динамического статического массивов character allocatable arc arc динамического массива строк длиной символа статического массива строк allocate arr ari arc размещение динамических массивов print size arr size ari size arc size arsi arc это присваивание строки строку номер будет записано это присваивание строки сечения массивов операторы forall where фортран позволяет эффективно присваивать массивы без циклов посредством маскирования присваивания помощью операторов where forall также сечений массивов векторных индексов во всех случаях первоначально вычисляется правая часть выражения целиком для всех индексов массива лишь затем выполняется присваивание для индексов удовлетворяющих массиву маске вычисления помощью этих инструментов позволяют повышать быстродействие облегчают компилятору работу по выделению участков программы которые могут быть выполнены независимо то есть распараллелены real arr arr arr real frr frr или real frr arr присваивание массива встроенная перегрузка для оператора присваивания arr sin arr arr элементная функция sin применяется каждому элементу массива arr arr присваивание элементов шагом назад заданное индексным триплетом frr присваивание одномерного массива посредством циклического списка forall arr brr log arr замена циклов условных операторов конструкций маскирование присваивания маска arr forall crr sin расширение возможностей сечений forall конструкция forall для нескольких операторов присваивания drr доступ диагонали матрицы err диагонали трёхмерного массива end forall возможны менее очевидные операции integer reshape source shape инициализация массива порядковыми номерами помощью конструктора массива функции print вывод dos окно будет произведён по строкам столбец повернуть кусочек массива print вывод dos окно будет произведён по строкам замена ем столбце на замена столбце на возможности оператора конструкции forall введённого стандартом шире возможностей оператора конструкции where однако последний некоторых случаях логического ветвления позволяет упростить код ввиду наличия альтернативы elsewhere избегая вложенных условных операторов массивов масок оператор конструкция forall допускает использование только чистых процедур функций при маскировании присваивания операторах where forall также специальных встроенных функциях для массивов например sum логический массив маска вычисляется до присваивания позволяет заменять циклы логическими условиями внутри них что позволяет избежать дополнительной работы для предсказателя переходов микропроцессора векторный индекс целочисленный одномерный массив значения которого индексы некоторого другого массива векторные индексы используются для создания произвольных сечений многомерных массивов являются их обобщениями при использовании векторных индексов следует следить за повторяющимися значениями индексов левой части оператора присваивания так как этом случае будет осуществлена попытка записи одну ячейку памяти возможно разных значений порядок индексов произвольный хотя этим не следует злоупотреблять во избежание снижения быстродействия integer vi vj инициализация массивов векторных индексов real arr brr brr arr векторные индексы можно задавать внутри использующего их массива brr vj arr vi vj размерность векторных индексов должна совпадать слева справа их значения не выходить за пределы границ использующих их массивов размер векторных индексов может быть меньше размера рабочих массивов встроенные функции для массивов современном фортране имеется большое количество встроенных функций для работы численными символьными массивами помимо разобранных выше общих способов аргументами функций выступают численный или символьный массив array логический массив mask являющийся например условием array измерение dim массива array формирующее если задан аргумент dim сечение массива вдоль одного из измерений номером dim массив array может быть если не указано иное целочисленным содержать действительные или комплексные числа если массив маска не задан то его значение считается тождественно истинным логический массив mask если задан должен иметь ту же форму что массив array либо скалярное значение true основная масса функций введена стандартом all mask dim логическая функция возвращает истина если все элементы логического массива mask истинны вдоль факультативного измерения dim наоборот противном случае any mask dim логическая функция имеет значение истина если хотя бы один элемент логического массива mask истинен вдоль факультативного измерения dim count mask dim целочисленная функция результат равен числу истинных элементов массива mask вдоль факультативного измерения dim maxloc array mask dim minloc array mask dim целочисленные функции возвращающие соответственно индекс максимального минимального элемента или индексы максимальных минимальных элементов вдоль факультативного измерения dim для элементов удовлетворяющих массиву маске функции возвращают индекс первого по порядку следования элемента массива array если аргумент функций dim не задан или если array одномерный массив то результат записывается одномерный массив для многомерных массивов array результат записывается массив рангом на единицу меньшим ранга массива array исключается измерение номером dim значения индексов отсчитываются по порядку от нижних границ массива то есть случае если номер нижней границы массива array отличается от единицы то для доступа максимальному или минимальному элементу массива следует прибавить результату функций maxloc minloc разницу между индексом нижней границы единицей maxval array mask dim minval array mask dim функции поиска максимального минимального элемента соответственно массиве array для элементов удовлетворяющих логическому массиву маске mask вдоль факультативного измерения dim результат функции такого же типа разновидности что массив array массив array может быть только вещественным или целочисленным для одномерного массива array или при отсутствии аргумента dim результатом является скаляр иначе массив рангом на единицу меньшим ранга массива array findloc array value dim mask целочисленная функция возвращающая индекс равного value элемента массива array введена стандартом искомые элементы массива удовлетворяют логическому массиву маске mask вдоль факультативного измерения dim тип аргумента value должен совпадать типом массива array может быть любого встроенного типа включая комплексный логический или символьный остальные свойства функции аналогичны свойствам функций maxloc minloc начиная со стандарта функции maxloc minloc как функция findloc оперируют также символьными данными sum array mask dim product array mask dim осуществляют соответственно суммирование умножение элементов массива смысл аргументов функций sum product тот же что выше рассмотренных функций функция product оперирует комплексными данными начиная со стандарта dot_product vector_ vector_ осуществляет скалярное произведение по правилам линейной алгебры векторов vector_ vector_ одномерных массивов одинакового размера одномерные массивы vector_ vector_ могут содержать данные любого численного логического типа вектора vector_ vector_ могут быть либо оба численными либо оба логическими matmul matrix_a matrix_b встроенная функция матричного перемножения перемножает две матрицы матрицу на вектор вектор на матрицу по правилам линейной алгебры аргументы функции matrix_a matrix_b двумерные или одномерные численные любых встроенных численных типов или логические массивы аргументами функции не могут быть одновременно два вектора один из аргументов обязан быть матрицей двумерным массивом число элементов первого либо единственного измерения массива matrix_b должно быть равно числу элементов последнего измерения массива matrix_a введена стандартом некоторых случаях при расчёте произведения вектор столбца на вектор строку требующего при использовании функции matmul дополнительного векторов матрицы формы эффективность matmul по данным бартеньева заметно уступает обычному вложенному циклу по тестам nasa для произведения матриц двумерных массивов быстродействие matmul компилятора фирмы intel при использовании полной оптимизации существенно некоторых случаях на порядок превышает быстродействие вложенных циклов хотя для матриц размером больше несколько уступает быстродействию подпрограммы dgemm библиотеки lapak то же время для матриц меньше matmul превосходит по скорости dgemm компилятор фортрана фирмы ibm начиная версии использует для matmul алгоритм винограда штрассена со сложностью отметим что стандартом алгоритмические реализации математических функций обычно не оговариваются остаются на усмотрение разработчика компилятора merge t_source f_source mask функция создающая новый массив под управлением маски массива mask из элементов массивов t_source f_source той же формы того же размера что исходные массивы массивы аргументы массив результат могут быть любого встроенного типа совпадать по типу данных размеру форме если элемент mask есть истина тrue то соответствующий ему элемент массива результата равен элементу массива t_source если ложь false то элементу массива f_source аргументами функции могут быть скаляры этом случае например merge где целочисленная функция хэвисайда move_alloc from to встроенная подпрограмма позволяющая динамически переразмещать ранее размещённый динамический массив to новыми границами размером как динамического массива from при этом данные из массива from копируются массив to тип данных ранг массивов from to должны совпадать после переразмещения массива to массив from освобождает память становится неразмещённым может быть полезна численных методах изменяющейся дискретизацией задачи многосеточных адаптивных методах введена стандартом transpose matrix функция транспонирующая меняющая местами строки столбцы двумерную матрицу современном фортране предусмотрены встроенные функции упаковки распаковки многомерного массива одномерный массив из одномерного массива соответственно под управлением логического условия для повышения быстродействия экономии памяти pack array mask vector функция упаковывает многомерный массив любого типа array одномерный массив вектор под управлением логического массива mask необязательный одномерный массив vector должен иметь тот же тип данных что array причём количество элементов vector если он задан должно быть не меньше числа истинных элементов mask если mask скаляр со значением true то число элементов массиве vector если он задан должно быть не меньше чем общее число элементов array результатом функции будет одномерный массив того же типа что array длина результата будет равна длине вектора vector если он задан если нет то числу истинных элементов массиве маске mask если vector не задан mask скаляр со значением истина то длина результирующего одномерного вектора равна числу элементов массива array результирующий массив последовательно заполняется элементами массива array порядке их размещения компьютерной памяти истинным значениям массива mask при этом если задан vector из него выбираются недостающие возможно элементы массиве результате причём начиная индекса следующего за последним по порядку истинным элементом массива array так для массива результатом функции pack mask ne будет одномерный массив если дополнительно задан вектор то результатом pack mask ne будет файлы операции ввода вывода фортран обладает богатым встроенным инструментарием для операций ввода вывода том числе для больших массивов данных файлы фортране бывают внутренние внешние внутренний файл это любой массив символьная строка или подстрока внутренние файлы всегда открыты по умолчанию внешний файл это любой файл внешний по отношению выполняемой программе обоими типами файлов используются одни те же операторы записи write чтения read внутренние файлы используются для преобразований число строка число для создания смешанных числовых символьных записей character string real xyz integer intg write string xyz запись строку числа print string string string read string intg чтение из строки целого числа print intg intg intg внешние файлы подразделяются на форматные текстовые cr lf потоки бинарные двоичные непосредственно отображающие оперативную память неформатные не двоичные кроме того они могут быть файлами прямого доступов записями фиксированной переменной длины переменной только для файлов также записями для очень больших неформатных файлов таким образом фортран позволяет создавать обрабатывать довольно большое количество видов файлов способов организации максимальный размер одной записи байт файлы прямого доступа позволяют осуществлять операции ввода вывода записями заданным номером без затирания или записей файле при открытии файла его можно позиционировать начало конец перед записью конец файла что позволяет добавлять данные по мере их накопления без затирания ранее введённых также либо начало либо конец зависимости от ранее определённого статуса файла был он открыт ранее или нет работа памятью современных стандартах языка начиная fortran или fortran возможна работа тремя видами динамических массивов автоматическими размещаемыми массивами ссылками указателями ссылками имеются встроенные процедуры для работы памятью напрямую процедуры для побитовых операций стандарты языка предполагают автоматическое освобождение оперативной памяти занятой любым типом динамического массива после завершения работы программы или подпрограммы процедуры функции даже если программистом освобождение не было выполнено явно это позволяет избегать возникновения утечек памяти при работе динамическими массивами средствами фортрана при использовании указателей других случаях утечки возможны при небрежности автоматические массивы размещаемые компилятором создаются при вызове подпрограммы являются её локальными объектами их границы определяются всякий раз при обращении процедуре при этом при выходе из неё они уничтожаются память очищается автоматические массивы во время выполнения программы находятся стеке размещаемые помощью оператора allocate куче указатели фортрана аналогичны указателям си однако при решении вычислительных задач разработке математических алгоритмов они большинстве случаев успехом заменяются иными инструментами фортрана управляющие конструкции начиная со стандарта конструкция условного перехода if then elseif then end if не отличается от подобных конструкций других современных языках заменила арифметический if метками признанный устаревшим существует более простая форма условного оператора if логическое условие оператор где исполняемый оператор должен быть единственным после оператора if например goto метка конструкция выбора select case case case default end select наоборот отличается от конструкции switch case си подобных языках языке java несколько напоминает по возможностям оператор case паскале integer выражение выбора это целое логическое символьное выражение или целочисленый массив или массив символов любым ненулевым числом элементов namesc select case namesc имя конструкции элемент массива case выполняется для всех меньших либо равных шагом блок case для переменной равной блок case для диапазоне от до включительно шаг блок case для блок case для диапазоне от до включительно блок case default для всех прочих ситуаций case default опциональный необязательный оператор блок по умолчанию end select namesc если значение переменной называемой выражением выбора совпадёт со списком селекторов списком значений или диапазоном либо операторе case например третьем для то после выполнения блока операторов блок происходит выход из конструкции select case операторов прерывания типа break не требуется оператор case default равно как имя конструкции не является необходимым диапазоны списках селекторов различных операторов case не должны пересекаться или иметь хотя бы одного общего элемента качестве выражения выбора может быть элемент целочисленного массива диапазоны списках селекторов применяются только для целых или для символов по возрастанию от нижней границы верхней для символов по возрастанию их кодов современном фортране существуют две формы циклов со счётчиком итераций традиционная конструкция do enddo цикл меткой последняя признана устаревшей конструкцией начиная со стандарта однако до сих пор входит стандарты для вложенных циклов большим уровнем вложенности последняя форма может быть более лаконичной синтаксис устаревшей конструкции цикла do это метка конца цикла do метка может быть одинаковой для вложенных циклов do arr continue метка может стоять только перед либо оператором do однако современная запись допускает именовать циклы do что больше соответствует концепции структурного do позволяет легче избежать ошибок arr end do end do end do заголовок цикла со счётчиком имеет следующий полный вид name do dn имя конструкции необязательно начальное значение счётчика конечное dn шаг параметры цикла end do name параметры цикла целые числа произвольного знака dn не равно нулю число выполнения тела цикла без прерывания равно nс max int dn dn может быть равным нулю например цикл выполнится нуль раз если шаг положителен dn если шаг отрицательный dn если шаг dn опущен то по умолчанию он считается равным единице dn значение переменной цикла после выхода из него всегда равно nс то есть на единицу больше числа итераций цикла не менее единицы возможен также цикл условием do while логическое условие end do бесконечный цикл do end do имеющие стандартную форму оператор cycle имя цикла прерывает текущую итерацию цикла переходит следующей итерации этого же цикла если имя цикла не указано то выполняется прерывание итерации текущего цикла котором расположен оператор cycle оператор exit имя цикла прерывает выполнение цикла указанным именем передаёт управление далее при отсутствии имени прерывает текущий цикл который вложен оператор exit операторы cycle exit логически тождественны оператору goto соответствующих обстоятельствах но существенно облегчают понимание обслуживание кода программистом компиляторы момента первоначальной разработки языка компиляторы фортрана производит фирма ibm настоящее время фирмой ibm поставляется оптимизирующий компилятор vs fortran для мэйнфреймов ibm system история развития различных версий которого восходит ещё году также компилятор xl fortran для платформ на базе архитектуры powerpc aix linux суперкомпьютера blue gene выпускалась также версия для mac os когда компьютеры macintosh использовали процессоры powerpc оба этих компилятора содержат очень сложные оптимизаторы являющиеся результатом непрерывной научной работы специалистов ibm на протяжении полувека на базе компилятора ibm fortran xl фирмой absoft бизнес партнёром ibm создан поставляется компилятор absoft pro fortran для систем на базе процессоров powerpc linux mac os intel linux mac os windows до крупным производителем компилятора фортран для операционной системы windows была корпорация microsoft впоследствии она отказалась от их разработки связи низкой прибыльностью после этого компилятор поставляла фирма dec вошедшая году состав compaq вместе последней году слившаяся hp дальнейшей разработкой этой версии компилятора стала заниматься фирма intel компилятор называется intel fortran compiler который позволяет оптимизировать код под платформы intel ia ia компания dec поставляет компилятор интегрированный среду разработки digital visual fortran основанную на microsoft visual studio наиболее известными продуктами этой линейки являются fps microsoft fortran power station dvf каждый компилятор может поддерживать несколько стандартов фортрана слияния компаний явились причиной того что последующие продукты появлялись на рынке под торговыми марками compaq hp настоящее время hp продаёт среду разработки версии для intel win поддержка фортрана реализована также для всех платформ hp другим крупным поставщиком систем разработки на фортране является фирма lahey предлагающая интегрированные решения для windows linux долгое время лучшим компилятором фортрана для pc считался компилятор фирмы watcom который был выделен отдельный проект open watcom развивающий компилятор на открытой основе среди бесплатных компиляторов фортран следует выделить компилятор от бывшей sun microsystems сейчас oracle входящий состав sun studio который генерирует эффективный код под sparc доступен для ос solaris opensolaris gnu linux фонд свободного программного обеспечения gnu выпускал открытый компилятор фортрана доступный практически для любой платформы полностью совместимый gcc сейчас ему на смену пришёл компилятор gfortran котором реализованы практически все конструкции стандарта фортран многие конструкции стандартов фортран фортран он также полностью обратно совместим фортран также существует независимый проект по созданию на основе gcc компилятора фортран взаимодействие другими языками многие системы позволяют компоновать полученные результате трансляции фортрановской программы объектные файлы объектными файлами полученными от компиляторов других языков что позволяет создавать более гибкие приложения для языка фортран также доступно большое количество библиотек содержащих как подпрограммы решения классических вычислительных задач lapack imsl blas задач организации распределённых вычислений mpi pvm так задач построения графических интерфейсов quickwin fortran tk или доступа субд oracle фортран ссср фортран ссср появился позже чем на западе поскольку поначалу ссср более перспективным языком считался алгол во внедрении фортрана большую роль сыграло общение советских физиков со своими коллегами из cern где годах почти все расчёты велись использованием программ на фортране первый советский компилятор фортрана был создан году для машины минск однако он не получил большой известности широкое внедрение фортрана началось после создания году компилятора фортран дубна для машины бэсм фортран основной язык для асвт см эвм часто использовался вместе препроцессором ратфор машины ес эвм появившиеся году уже изначально имели транслятор фортрана ibm вместе другим программным обеспечением годах ипм была разработана графическая библиотека графор графическое расширение фортрана конце начале физик андрей зарецкий создал серию детских книжек одним из главных героев которых был профессор фортран доступным языком объяснявший детям основы компьютерной грамотности примечания литература стандарты iso iec information technology programming languages fortran part base language iso iec information technology programming languages fortran part varying length character strings гост язык фортран гост язык базисный фортран ссылки старом фортране замолвлено слово professional programmer guide to fortran компиляторы фортран бесплатно fortran to translator марта года умер создатель языка fortran gfortran компилятор фортрана часть коллекции компиляторов gnu фортран живее всех живых или что нового дедушки ifort хабрахабр блог компании intel нежданчики языка фортран хабрахабр блог компании intel fortran учим фортран дружить хабрахабр блог компании intel знакомство coarray fortran будем параллельны хабрахабр блог компании intel статья фортран прогопедии энциклопедии языков категория объектно ориентированные языки категория языки по алфавиту категория статьи примерами кода фортран