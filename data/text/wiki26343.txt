расстояние левенштейна также редакционное расстояние или дистанция редактирования между двумя строками теории информации компьютерной лингвистике это минимальное количество операций вставки одного символа удаления одного символа замены одного символа на другой необходимых для превращения одной строки другую впервые задачу упомянул году советский математик владимир иосифович левенштейн при изучении впоследствии более общую задачу для произвольного алфавита связали его именем большой вклад изучение вопроса внёс дэн гасфилд применение расстояние левенштейна его обобщения активно применяется для исправления ошибок слове поисковых системах базах данных при вводе текста при автоматическом распознавании текста или речи для сравнения текстовых файлов утилитой diff ей подобными здесь роль символов играют строки роль строк файлы биоинформатике для сравнения генов хромосом белков точки зрения приложений определение расстояния между словами или текстовыми полями по левенштейну обладает следующими недостатками при перестановке местами слов или частей слов получаются сравнительно большие расстояния расстояния между совершенно разными короткими словами оказываются небольшими то время как расстояния между очень похожими длинными словами оказываются значительными редакционное предписание редакционным предписанием называется действий необходимых для получения из первой строки второй кратчайшим образом обычно действия обозначаются так удалить англ insert вставить заменить совпадение например для строк connect conehead можно построить следующую таблицу преобразований найти только расстояние левенштейна более простая задача чем найти ещё редакционное предписание подробнее см ниже обобщения разные цены операций цены операций могут зависеть от вида операции вставка удаление замена или от участвующих ней символов отражая разную вероятность мутаций биологии разную вероятность разных ошибок при вводе текста общем случае цена замены символа на символ цена вставки символа цена удаления символа необходимо найти замен минимизирующую суммарную цену расстояние левенштейна является частным случаем этой задачи при при как частный случай так задачу для произвольных решает алгоритм вагнера фишера приведённый ниже здесь ниже мы считаем что все неотрицательны действует правило треугольника если две операции можно заменить одной это не ухудшает общую цену например заменить символ на потом на не лучше чем сразу на транспозиция если списку разрешённых операций добавить транспозицию два соседних символа меняются местами получается расстояние дамерау левенштейна для неё также существует алгоритм требующий mn операций дамерау показал что ошибок при наборе текста человеком являются транспозициями кроме того расстояние дамерау левенштейна используется биоинформатике формула здесь далее считается что элементы строк нумеруются первого как принято математике не нулевого как принято некоторых языках пусть две строки длиной соответственно над некоторым алфавитом тогда редакционное расстояние расстояние левенштейна можно подсчитать по следующей рекуррентной формуле где где равна нулю если единице противном случае возвращает наименьший из аргументов здесь шаг по символизирует удаление из первой строки по вставку первую строку шаг по обоим индексам символизирует замену символа или отсутствие изменений очевидно справедливы следующие утверждения пример работы алгоритма доказательство рассмотрим формулу более подробно очевидно что редакционное расстояние между двумя пустыми строками равно нулю так же очевидно то что чтобы получить пустую строку из строки длиной нужно совершить операций удаления чтобы получить строку длиной из пустой нужно произвести операций вставки осталось рассмотреть нетривиальный случай когда обе строки непусты для начала заметим что оптимальной операций их можно произвольно менять местами самом деле рассмотрим две операции две замены одного того же символа неоптимально если мы заменили на потом на выгоднее было сразу заменить на две замены разных символов можно менять местами два стирания или две вставки можно менять местами вставка символа его последующим стиранием неоптимально можно их обе отменить стирание вставку разных символов можно менять местами вставка символа его последующей заменой неоптимально излишняя замена вставка символа замена другого символа меняются местами замена символа его последующим стиранием неоптимально излишняя замена стирание символа замена другого символа меняются местами пусть кончается на символ кончается на символ есть три варианта символ на который кончается какой то момент был стёрт сделаем это стирание первой операцией тогда мы стёрли символ после чего превратили первые символов на что потребовалось операций значит всего потребовалось операций символ на который кончается какой то момент был добавлен сделаем это добавление последней операцией мы превратили первые символов после чего добавили аналогично предыдущему случаю потребовалось операций оба предыдущих утверждения неверны если мы добавляли символы справа от финального то чтобы сделать последним символом мы должны были или какой то момент добавить его но тогда утверждение было бы верно либо заменить на него один из этих добавленных символов что тоже невозможно потому что добавление символа его последующей заменой неоптимально значит символов справа от финального мы не добавляли самого финального мы не стирали поскольку утверждение неверно значит единственный способ изменения последнего символа его замена заменять его или больше раз неоптимально значит если мы последний символ не меняли поскольку мы его также не стирали не приписывали ничего справа от него он не влиял на наши действия значит мы выполнили операций если мы последний символ меняли один раз сделаем эту замену первой дальнейшем аналогично предыдущему случаю мы должны выполнить операций значит всего потребуется операций алгоритм вагнера фишера для нахождения кратчайшего расстояния необходимо вычислить матрицу используя вышеприведённую формулу её можно вычислять как по строкам так по столбцам псевдокод алгоритма для всех от до для всех от до вычислить вернуть или более развёрнутом виде при произвольных ценах замен вставок удалений для всех от до цена вставки символа для всех от до цена удаления символа для всех от до min цена удаления символа цена вставки символа цена замены символа на символ вернуть напоминаем что элементы строк нумеруются первого не нулевого для восстановления редакционного предписания требуется вычислить матрицу после чего идти из правого нижнего угла левый верхний на каждом шаге ища минимальное из трёх значений если минимально цена удаления символа добавляем удаление символа идём если минимально цена вставки символа добавляем вставку символа идём если минимально цена замены символа на символ добавляем замену на если они не равны иначе ничего не добавляем после чего идём здесь клетка матрицы которой мы находимся на данном шаге если минимальны два из трёх значений или равны все три это означает что есть или равноценных редакционных предписания этот алгоритм называется алгоритмом вагнера фишера он предложен вагнером wagner фишером fischer году память алгоритм виде описанном выше требует операций такую же память последнее может быть неприятным так для сравнения файлов длиной строк потребуется около гигабайт памяти если требуется только расстояние легко уменьшить требуемую память до для этого надо учесть что после вычисления любой строки предыдущая строка больше не нужна более того после вычисления не нужны также поэтому алгоритм можно переписать как для всех от до для всех от до вычислить если стереть строку вернуть или даже для всех от до для всех от до вычислить если стереть вернуть если требуется редакционное предписание экономия памяти усложняется для того чтобы обеспечить время при памяти определим матрицу минимальных расстояний между суффиксами строк то есть расстояние между последними символами последними символами очевидно матрицу можно вычислить аналогично матрице так же быстро теперь опишем алгоритм считая что кратчайшая из двух строк если длина одной из строк или обеих не больше задача тривиальна если нет выполним следующие шаги разделим строку на две подстроки длиной если нечётно то длины подстрок будут обозначим подстроки для вычислим последнюю строку матрицы для последнюю строку матрицы найдём такое что минимально здесь матрицы из предыдущего шага но мы используем только их последние строки таким образом мы нашли разбиение на две подстроки минимизирующее сумму расстояния левой половины до левой части расстояния правой половины до правой части следовательно левая подстрока соответствует левой половине правая правой рекурсивно ищем редакционное предписание превращающее левую часть то есть подстроку рекурсивно ищем редакционное предписание превращающее правую часть то есть подстроку объединяем оба редакционных предписания время выполнения удовлетворяет точностью до умножения на константу условию откуда следует доказывается индукцией по следовательно требуемая память пропорциональна кроме того есть алгоритмы экономящие память за счёт существенного замедления например время становится кубическим не квадратичным по длине строк см также алгоритм хирчберга расстояние дамерау левенштейна расстояние йенцена шаннона расстояние хэмминга фонетический поиск soundex метод сходство джаро винклера примечания ссылки визуализатор алгоритма нечёткий поиск тексте словаре пошаговое объяснение алгоритма на примере код на python реализация алгоритма левенштейна субд oracle категория автоматическая обработка текстов категория динамическое категория строковые алгоритмы категория меры схожести строк