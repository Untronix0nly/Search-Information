руткит то есть набор root набор программных средств например исполняемых файлов скриптов файлов обеспечивающих маскировку объектов процессов файлов каталогов драйверов управление событиями происходящими системе сбор данных параметров системы термин rootkit исторически пришёл из мира unix под этим термином понимается набор утилит или специальный модуль ядра которые злоумышленник устанавливает на взломанной им компьютерной системе сразу после получения прав этот набор как правило включает себя разнообразные утилиты для заметания следов вторжения систему делает незаметными снифферы сканеры кейлоггеры троянские программы замещающие основные утилиты unix случае не ядерного руткита rootkit позволяет взломщику закрепиться во взломанной системе скрыть следы своей деятельности путём скрытия файлов процессов также самого присутствия руткита системе систему руткит может быть установлен различными способами загрузка посредством эксплойта после получения шелл доступа таком случае может использоваться средство типа wget или исходный ftp клиент для загрузки руткита удаленного устройства исходном коде или ресурсах программного продукта классификация руткитов по уровню привилегий уровень пользователя user mode уровень ядра kernel mode по принципу действия изменяющие алгоритмы выполнения системных функций modify execution path изменяющие системные структуры данных direct kernel object manipulation основные методы реализации microsoft windows существуют разнообразные технологии руткитов наиболее захват таблиц вызовов iat idt ssdt gdt перехват функций например модификацией начальных байт изменение системных объектов dkom методы использования драйверов захват таблиц вызовов таблица вызовов представляет собой массив котором каждый элемент хранит адрес соответствующей процедуры такие таблицы существуют режиме ядра idt cpu msrs gdt ssdt irp dispatch table режиме пользователя iat import address table iat основная таблица вызовов модулей режима большинство исполняемых файлов имеет одну или несколько встроенных iat содержащих адреса библиотечных процедур импортируемых из dll на машине существуют несколько экземпляров таблиц вызовов например idt gdt msr так как каждый процессор имеет собственные системные регистры частности gdtr регистр глобальной таблицы дескрипторов gdt idtr регистр дескриптора таблицы прерываний idt ia содержит виртуальный адрес входной точки режим ядра msr он также имеет собственные системные структуры при изменении записи таблице вызовов контролируется исполнение программ при необходимости на требуемые функции перехваченная процедура может блокировать вызовы производимые определенными приложениями например антивирус замещать исходную процедуру производить мониторинг системы путём перехвата вводимых параметров фильтровать выходные параметры общая идея захвата состоит следующем таблицу вызовов получить её адрес сохранить существующую таблице запись подменить запись новым адресом восстановить исходную запись общий вид функции перехвата если функция перехвата предполагает вызов исходной процедуры то блокирование мониторинг производятся до вызова фильтрация параметров после iat таблица вызовов размещаемая файловой структуре приложения iat сохраняет адрес процедур экспортируемых определенной dll каждая dll которой сцепляется приложение во время загрузки имеет собственную iat для захвата iat необходимо выполнить следующие действия получить доступ адресному пространству процессора локализировать iat образе памяти процессора модифицировать требуемую iat перехват таблицы вызовов iat для манипуляции iat требуется доступ адресному пространству приложения которому таблица принадлежит одним из способов является внедрение dll среди методов внедрения dll адресное пространство процесса можно указать модификация значения реестра appinit_dll api вызов использование удаленных потоков перехват модификацией кода функции принцип работы основан на том что первые байты перехватываемых функций замещаются на код перехватчика необходимо подчеркнуть что при установке перехватчика не производится анализ кода перехватываемой функции изменяется первых байт не первые машинных команд следствием этого факта является код перехватчика может быть установлен только начале функции для каждого вызова перехваченной функции перехватчику необходимо восстановить её машинный код до вызова повторно перехватить после завершения вызова алгоритм работы руткита теле перехватчика создается массив который записываются первые байт каждой из перехваченных функций обычно размер кода не превышает байт массив заполняется эталонным машинным кодом перехватываемых функций начало каждой перехватываемой функции записывается код осуществляющий передачу управления перехватчику алгоритм работы перехватчика действий определенных злоумышленником восстановление первых байт перехваченной функции вызов перехваченной функции повторная модификация машинного кода перехваченной функции перезапись кода передающего управление перехватчику первые байты анализ при необходимости модификация результатов выполнения исходной функции выполнение операции ret возвращение управления вызвавшей функцию программе перехват функции модификацией первых байт для перехвата достаточно модифицикации пяти первых байт функции на место которых записывается операция jmp передающая управление перехватчику руткита следует отметить что простейшие системы защиты от атак такого типа проверяют первый байт вызываемых функций на предмет наличия них машинного кода операции jmp качестве меры противодействия разработчики руткитов применяют методики маскировки кода записываемого начало функции перехватчика применения команд вида push ret размещения нескольких операторов nop или мусорного кода типа push ax pop ах также элементы полиморфизма метод модификации первых байт функций имеет ряд недостатков связанных основном необходимостью восстановления машинного кода перехваченных функций перед их вызовом повторного перехвата после вызова данные операции снижают быстродействие системы могут послужить причиной сбоев работе многопоточных приложений dkom direct kernel object manipulation прямая манипуляция объектами ядра операционные системы семейства windows nt используют стандартные модели объектов различные компоненты исполняющей системы определяют один или несколько типов объектов каждый компонент экспортирует режиме ядра набор поддерживаемых функции свойств называемый com интерфейсом для манипуляции этим типом объектов ни один компонент не может напрямую получить доступ другому объекту компонента типичными объектами режима ядра являются объект типа устройства определяемый менеджером ввода вывода тип объекта режима используемый для представления физического логического или виртуального устройства файловый объект символьные ссылки ключи реестра потоки процессы диспетчерский объект класс типов объектов режима используемый для управления процессами диспетчеризации синхронизации такой дизайн обеспечивает гибкость портируемость переносимость например будущие релизы операционной системы могут содержать компоненты ядра определяющие аналогичные объекты но имеющие совершенно другую внутреннюю структуру если такие компоненты будут экспортировать функции сохранившимися названиями параметрами изменение не возымеет эффекта манипулирование объектами ядра является достаточно мощной технологией трудной для обнаружения однако при этом существует ряд недостатков таких как нестабильность метода зависимость от версий сложность реализации силу отсутствия описания структур свойств объектов несмотря на эти ограничения данный метод позволяет скрывать процессы драйверы устройств порты повышать уровень привилегий потоков следовательно процессов eprocess это структура служащая для внутреннего представления процесса объект процесса windows использует круговой двусвязный список структур eprocess для отслеживания процесса исполнения ссылки связывающие объекты eprocess содержатся поле структура которого list_entry typedef struct struct flink struct blink list_entry plist_entry простейший алгоритм скрытия процесса получение указателя на процесс которому принадлежит текущий поток помощью вызова получение pid процесса при несовпадении pid искомым осуществляется переход по двусвязному списку поле тип list_entry изменение полей частности ссылка на следующий блок eprocess блока устанавливается на блок аналогично ссылка на предыдущий блок блоке ссылки блока замыкаются на своей записи таким образом создаются два списка один из которых состоит из одного элемента исключение процесса из списка процессов не влияет на его исполнение windows планирование кода на исполнение производится на уровне потоков процессы определяют контекст котором запускаются потоки скрытие процесса производится на внешнем уровне инструментах опирающихся на объекты процессов eprocess таких как диспетчер задач диспетчер ядра использует другую схему учета ресурсов полагающуюся на другие структуры данных главным образом объекта ethread данный метод позволяет скрывать процессы без потери драйверы модель драйверов microsoft поддерживает многоуровневую архитектуру поэтому запрос ввода вывода request обмен данными между приложениями драйверами может обслуживаться серией подключенных драйверов каждый из которых выполняет свою задачу цепь драйверов обслуживающих физическое устройство называется стеком такой модульный подход позволяет новым драйверам быть включенными стек для увеличения при этом изменяется или добавляется только отдельный участок цепи также некоторые периферийные устройства используют одинаковые контроллеры соответственно шины ввода вывода модульность позволяет оптимизировать использование одинаковых блоков кода вместо написания отдельного драйвера для каждого устройства модели wdm определено три типа драйверов драйвер шины функциональные драйверы драйверы фильтры драйверы фильтры обычно располагаются между другими модулями захватывают проходящие через них irps перед отправлением irp смежному драйверу фильтр может просмотреть содержимое или изменить его для воздействия на дальнейшее поведение системы пример при снятии образа диска сервера критичного простою драйвер фильтр может использоваться для изменения потока данных целью скрытия некоторых файлов irp пакет request packet структура данных ядра windows обеспечивающая обмен данными между приложениями драйвером также между драйвером драйвером при поступлении запроса от приложения менеджер ввода вывода формирует соответствующий irp который локализует пересылается верхнему объекту стеке драйверов если верхний драйвер смог самостоятельно обработать поступивший irp он завершает запрос возвращает irp менеджеру ввода вывода противном случае драйвер выполняет частичную обработку локализует нижележащий объект стеке запрашивает менеджер ввода вывода на передачу irp следующему драйверу при создании irp менеджер ввода вывода резервирует область памяти находящуюся после заголовка выделенная память используется для записи массива структур выделяемых для каждого драйвера стека размер памяти соответствует количеству драйверов стеке массив нумеруется соответствующую нижнему драйверу стека структура содержит информацию вызываемой менеджером ввода вывода функции управления драйвера поля majorfunction minorfunction передаваемые функции параметры поле parameters содержимое варьируется зависимости от функции указатель на объект драйвера deviceobject указатель на функцию завершения поле данная функция находится драйвере верхнего уровня функция управления драйвера при первом получении irp восстанавливает из соответствующей позиции стека ввода вывода параметры производя вызов далее выполняются предписанные действия после чего случае пересылки irp нижнему драйверу стека происходит установка позиции стека ввода вывода irp регистрация функции завершения опционально отправка irp нижнему драйверу возврат кода статуса ntstatus существуют два стандартных способа установить позицию стека для следующего драйвера текущая позиция пересылается без изменений функция void in pirp irp функция уменьшает на единицу указатель на массив таким образом при пересылке irp произойдет восстановление указателя автоматически увеличится на единицу итоге будет использован тот же участок стека при использовании данного способа возникнет неиспользуемый участок конце стека если необходимо передать содержимое текущей позиции стека за исключением указателя на функцию завершения поле используется void in pirp irp пересылка irp следующему драйверу производится помощью функции ntstatus iocalldriver in pdevice_object deviceobject in out pirp irp первым аргументом является указатель на нижележащий объект драйвера способ получения такого адреса определяется конкретной функцией управления стандартного метода не существует завершение обработки irp каждый запрос должен быть завершен либо последним драйвером стеке дальнейшая пересылка irp невозможна либо одним из вышестоящих менеджер ввода вывода инициализирует процесс завершения для данного irp когда любой из драйверов обрабатывающих irp вызывает функцию завершения при её вызове менеджер ввода вывода заполняет участок стека ввода вывода текущего драйвера нулями после чего вызывает драйвер более высокого уровня установленной функцией завершения данному irp для определения способа обработки запроса драйвером нижнего уровня функции завершения драйвера более высокого уровня доступен только блок статуса ввода вывода irp собственно установленный таким образом драйвер фильтр позволяет обрабатывать не только приходящие irp пакеты например блокировать чтение определенного сектора диска но управлять результатами обработки нижестоящих драйверов посредством инициализации функции завершения еще одним методом реализации руткитов является модификация mbr загрузка до ядра операционной системы буткиты например backdoor maosboot данный вид вредоносных кодов среде windows известен начала годов под названием стелс вирусов unix linux реализуемые подменой основных системных утилит очень легко обнаруживаются средствами контроля целостности кроме того легко блокируются средствами мандатного управления доступом типа selinux или apparmor реализованные виде модуля ядра основанные на патчинге vfs или перехвате таблицы системных вызовов sys_call_table основанные на модификации физической памяти ядра дополнительные возможности кроме непосредственно себя руткит как правило может маскировать присутствие системе любых описанных его конфигурации каталогов файлов на диске ключей реестре по этой причине естественным образом появились навесные руткитные библиотеки многие руткиты устанавливают систему свои драйверы службы они естественно также являются невидимыми руткиты для против drm руткитами по сути является большинство программных средств защиты от копирования средств обхода этих защит например эмуляторы cd dvd приводов году корпорация sony bmg встраивала свои аудиодиски защиту на основе руткита который устанавливался без ведома пользователя антируткиты это утилиты или резидентные модули обнаруживающие системе присутствие руткитов разной мере удаляющие их существует множество конкурирующих средств для этого как платных так бесплатных но все они используют сходные принципы действия методы детектирования руткитов известен алгоритм отлова mep руткитов его суть заключается том что одна та же информация регистрируется несколькими способами использованием api напрямую после чего полученные данные сравниваются поисках расхождeний наиболее часто сканируются таблицы импорта таблицы вызовов native api также структурно вся файловaя система базовый арсенал средств отлова руткитов основывается на следующих мeтодах сигнатурный поиск применяется еще со времен первых антивирусов пpедставляет собой поиск проверяемом файле уникальнoй цепочки байтов сигнатуры присущей вредоносной прогpамме эвристический или поведенческий анализатор эта технология основывается на поиске отклонений настройкaх системы файлах linux или реестре windows подозрительном повeдении процессов модулей так далее контроль целостности этот тип поиcка основан на сравнении контрольной суммы md тому подобное или цифровой пoдписи разнообразных системных файлов базой содержащей контрольную сумму оpигинальных файлов случае несовпадения программа делает вывод что файл был мoдифицирован или вовсе заменен примечания литература ссылки обзорная статья руткитах сайт hell knights crew исследователей занимающихся том числе vx rat руткит технологиями сайт gretis software российского разработчика антивирусного антишпионского антируткитного по категория атаки эксплойты категория вредоносное программное обеспечение