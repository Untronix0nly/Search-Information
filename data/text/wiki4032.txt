система типов совокупность правил языках назначающих свойства именуемые типами различным конструкциям составляющим программу таким как переменные выражения функции или модули основная роль системы типов заключается уменьшении числа багов программах посредством определения интерфейсов между различными частями программы последующей проверки согласованности взаимодействия этих частей эта проверка может происходить статически или динамически во время выполнения также быть комбинацией обоих видов определение по система типов разрешимый синтаксический метод доказательства отсутствия определённых поведений программы путём классификации конструкций соответствии видами вычисляемых значений описание пример простой системы типов можно видеть языке си части программы на си оформляются виде определений функций функции вызывают друг друга интерфейс функции задаёт имя функции список значений которые передаются её телу вызывающая функция постулирует имя функции которую хочет вызвать имена переменных хранящих значения которые требуется передать во время исполнения программы значения помещаются во временное хранилище затем исполнение передаётся тело вызываемой функции код вызываемой функции осуществляет доступ значениям использует их если инструкции теле функции написаны предположении что им на обработку должно быть передано целое значение но вызывающий код передал число плавающей точкой то вызванная функция вычислит неверный результат компилятор си проверяет типы заданные для каждой переданной переменной отношении типам заданным для каждой переменной интерфейсе вызываемой функции если типы не совпадают компилятор порождает ошибку времени компиляции технически система типов назначает тип каждому вычисленному значению затем отслеживая этих вычислений предпринимает попытку проверить или доказать отсутствие ошибок согласования типов конкретная система типов может определять что именно приводит ошибке но обычно целью является предотвращение того чтобы операции предполагающие определённые свойства своих параметров получали параметры для которых эти операции не имеют смысла предотвращение логических ошибок дополнительно это также предотвращает ошибки адресации памяти системы типов обычно определяются как часть языков встраиваются их интерпретаторы компиляторы однако система типов языка может быть расширена посредством осуществляющих дополнительные проверки на основе исходного синтаксиса типизации языке компилятор также может использовать статический тип значения для оптимизации хранилища для выбора алгоритмической реализации операций над этим значением например во многих компиляторах си тип float представляется битами соответствии со спецификацией ieee для операций плавающей точкой одинарной точности на основании этого будет использоваться специальный набор инструкций микропроцессора для значений этого типа сложение умножение другие операции количество налагаемых на типы ограничений способ их вычисления определяют типизацию языка помимо этого случае полиморфизма типов язык может также задать для каждого типа операцию варьирования конкретных алгоритмов изучением систем типов занимается теория типов хотя на практике конкретная система типов языка основывается на особенностях архитектуры компьютера реализации компилятора общем образе языка формальное обоснование формальным обоснованием для систем типов служит теория типов состав языка включается система типов для осуществления проверки типов или во время выполнения требующая явного провозглашения типов или выводящая их самостоятельно марк мэнесси сформулировал проблему так основная проблема решаемая теорией типов состоит том чтобы убедиться что программы являются осмысленными основная проблема порождаемая теорией типов состоит том что осмысленные программы могут не соответствовать поведению ожидаемому от них по замыслу следствием этой напряжённости является поиск более мощных систем типов операция назначения типа называемая типизацией придаёт смысл цепочкам бит таким как памяти компьютера или объектам таким как переменная компьютер не имеет возможности отличить примеру адрес памяти от инструкции кода или символ от целого числа или числа плавающей запятой поскольку цепочки бит представляющие эти различные по смыслу значения не имеют каких либо явных особенностей позволяющих делать предположения об их смысле назначение цепочкам бит типа предоставляет это осмысление превращая тем самым программируемое аппаратное обеспечение состоящую из этого аппаратного обеспечения программы проверка согласования типов процесс проверки установления ограничений для типов контроль типов или проверка соответствия типов может осуществляться как статическая типизация так во время выполнения динамическая типизация если спецификация языка требует чтобы правила типизации исполнялись строго то есть допуская той или иной мере лишь те автоматические преобразования типов которые не теряют информацию такой язык называется сильно типизированным русской литературе преобладает вариант перевода строго типизированным противном случае слабо типизированным эти термины являются условными не используются формальных обоснованиях статическая проверка типов динамическая проверка типов информация типах строгий нестрогий контроль типов защита адресации памяти типизированные бестиповые языки язык называют типизированным если спецификация каждой операции определяет типы данных которым эта операция может применяться подразумевая её неприменимость иным типам например данные которые представляет этот текст кавычках имеют тип строка большинстве языков деление числа на строку не имеет смысла большинство современных языков отвергнет программу которая пытается выполнить такую операцию одних языках бессмысленная операция будет выявлена статическая типизация отвергнута компилятором других она будет выявлена во время выполнения программы динамическая типизация порождая исключительную ситуацию особый случай типизированных языков представляют однотиповые языки то есть языки единственным типом обычно это языки сценариев или разметки такие как rexx sgml единственным типом данных которых является символьная строка используемая для представления как символьных так числовых данных бестиповые языки типизированным позволяют осуществлять любую операцию над любыми данными которые них представляются цепочками бит произвольной длины бестиповыми является большинство языков ассемблера примерами высокоуровневых бестиповых языков служат bcpl forth рефал на практике лишь некоторые языки могут считаться типизированными точки зрения теории типов разрешая или отвергая все операции большинство современных языков предлагают лишь некую степень многие промышленные языки предоставляют возможность обойти или нарушить систему типов поступаясь ради более точного контроля над исполнением программы каламбур типизации типы полиморфизм термин полиморфизм означает способность кода выполняться над значениями множества разных типов или возможность разных экземпляров одной той же структуры данных содержать элементы разных типов некоторые системы типов допускают полиморфизм для потенциального повышения коэффициента повторного использования кода языках полиморфизмом программистам достаточно реализовать структуры данных такие как список или ассоциативный массив лишь единожды не требуется разрабатывать по одной реализации для каждого типа элементов которые планируется хранить этих структурах по этой причине некоторые учёные области информатики иногда называют использование определённых форм полиморфизма обобщённым обоснования полиморфизма точки зрения теории типов практически те же что для абстракции модульности ряде случаев утиная типизация специальные системы типов ряд специальных систем типов был разработан для использования определённых условиях определёнными данными также для статического анализа программ большинстве своём они основываются на идеях формальной теории типов используются лишь составе систем типы типы то есть типы определённые посредством квантификатора квантора существования представляют собой механизм инкапсуляции на уровне типов это композитный тип скрывающий реализацию некоего типа своём составе понятие типа часто используется совместно понятием типа записи для представления модулей абстрактных типов данных что обусловлено их назначением отделением реализации от интерфейса например тип int описывает интерфейс модуля семейства модулей одинаковой сигнатурой имеющий своём составе значение данных типа функцию принимающую параметр точности этого же типа возвращающую целое число реализация может быть различной intt int int int floatt float float int оба типа являются подтипами более общего типа соответствуют конкретно реализованным типам так что любое значение принадлежащее любому из них принадлежит также типу если значение типа то проходит проверку типов вне зависимости от того какому абстрактному типу принадлежит это даёт гибкость при выборе типов подходящих для конкретной реализации так как пользователи извне обращаются только значениям интерфейсного типа изолированы от этих вариаций общем случае механизм проверки согласования типов не способен определить какому именно типу принадлежит данный модуль примере выше также мог бы иметь тип простейшим решением является явное указание для каждого модуля нём типа например intt int int int as int хотя абстрактные типы данных модули использовались языках довольно давно формальная модель типов была построена лишь году теория представляет собой типизированное лямбда исчисление второго порядка аналогичное системе но квантификацией вместо универсальной типы явным образом доступны качестве расширения языка haskell где они представляют собой специальный синтаксис позволяющий использовать переменную типа определении алгебраического типа не вынося её сигнатуру конструктора типов то есть не повышая его арность язык java предоставляет ограниченную форму типов посредством языках реализующих классический let полиморфизм стиле ml типы могут быть симулированы посредством так называемых значений индексированных типами явное неявное назначение типов многие статические системы типов например такие как языках си java требуют провозглашения типа программист должен явно назначать каждой переменной конкретный тип другие такие как система типов хиндли милнера применяемая языках ml haskell осуществляют выведение типов компилятор выстраивает заключение типах переменных на основании того как программист использует эти переменные например для функции осуществляющей сложение компилятор может сделать вывод что должны быть числами поскольку операция сложения определена только для чисел следовательно вызов где либо программе функции для параметров отличных от числовых например для строки или списка сигнализирует об ошибке числовые строковые константы выражения обычно зачастую выражают тип конкретном контексте например выражение может подразумевать вещественное число тогда как может быть списком целых обычно массивом вообще говоря выведение типов возможно если оно принципиально разрешимо теории типов более того даже если выведение неразрешимо для данной теории типов выведение зачастую возможно для многих реальных программ система типов языка haskell являющаяся разновидностью системы типов хиндли милнера представляет собой ограничение для так называемых полиморфных типов первого ранга на которых выведение разрешимо многие компиляторы хаскела предоставляют полиморфизм произвольного ранга качестве расширения но это делает выведение типов неразрешимым так что требуется явное провозглашение типов однако проверка согласования типов остаётся разрешимой для программ полиморфизмом первого ранга типы по прежнему выводимы унифицированные системы типов некоторые языки например имеют унифицированную системы типов это означает что все типы языка вплоть до примитивных наследуются от единого корневого объекта случае от класса object java есть несколько примитивных типов не являющихся объектами наряду ними java также предоставляет обёрточные объектные типы так что разработчик может использовать примитивные или объектные типы по своему усмотрению совместимость типов механизм проверки согласования типов языке со статической типизацией проверяет что всякое выражение соответствует типу ожидаемому тем контекстом котором оно присутствует например операторе присваивания вида выведенный для выражения тип должен соответствовать типу который провозглашён или выведен для переменной нотация соответствия называемая совместимостью специфична для каждого языка если имеют единый тип присваивание разрешено для этого типа то это выражение является корректным поэтому простейших системах типов вопрос совместимости двух типов упрощается до вопроса их равенства эквивалентности однако разные языки имеют разные критерии для определения совместимости типов двух выражений эти теории эквивалентности варьируются между двумя крайними случаями которых два типа эквивалентны если описывают одинаковую внутреннюю структуру значения которых синтаксически различные типы никогда не эквивалентны то есть два типа равны только том случае если равны их идентификаторы языках правила совместимости более сложные например если является подтипом то значение принадлежащее типу может быть использовано контексте ожидающем значение типа даже если обратное неверно как случае эквивалентности отношения подтипов различаются разных языках здесь возможно много вариантов правил наличие языке или ситуативного полиморфизма может также влиять на совместимость типов влияние на стиль одни программисты предпочитают статические системы типов другие динамические статически типизированные языки сигнализируют об ошибках согласования типов на могут порождать более эффективно исполняемый код для таких языков осуществимо более релевантное автодополнение интегрированных средах разработки сторонники динамической типизации утверждают что они лучше подходят для быстрого что ошибки согласования типов составляют лишь малую часть возможных ошибок программах другой стороны статически типизированных языках явная декларация типов обычно не требуется если язык поддерживает вывод типов некоторые динамически типизированные языки производят оптимизацию на этапе выполнения программы зачастую посредством применения частичного вывода типов см также сравнение систем типов ковариантность полиморфизм перегрузка операторов примечания литература ссылки ликбез по типизации языках категория формальные методы категория теория типов категория типы данных