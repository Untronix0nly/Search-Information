lua лу скриптовый язык разработанный подразделении tecgraf computer graphics technology group католического университета рио де жанейро бразилия интерпретатор языка является свободно открытыми исходными текстами на языке си по идеологии реализации язык lua ближе всего javascript частности он также реализует прототипную модель ооп но отличается паскале подобным синтаксисом более мощными гибкими конструкциями характерной особенностью lua является реализация большого числа программных сущностей минимумом синтаксических средств так все составные типы данных массивы структуры множества очереди списки реализуются через механизм таблиц механизмы объектно включая множественное наследование использованием метатаблиц которые также отвечают за перегрузку операций ряд других возможностей язык широко используется для создания тиражируемого программного обеспечения например на нём написан графический интерфейс пакета adobe lightroom также получил известность как язык уровней расширений во многих играх том числе world of warcraft из за удобства встраивания скорости исполнения кода лёгкости обучения история язык разработан подразделением tecgraf группа технологий компьютерной графики католического университета рио де жанейро бразилии история языка ведёт отсчёт года авторы языка роберту иерузалимски луиш энрике ди фигейреду luiz henrique de figueiredo валдемар селиш waldemar celes lua свободно открытыми исходными текстами на языке си историческими родителями языка были языки описания данных sol simple object language del data entry language они были независимо разработаны tecgraf годах для добавления некоторой гибкости два отдельных проекта оба были интерактивными графическими приложениями для конструкторских нужд компании petrobras sol del отсутствовали какие либо управляющие конструкции petrobras чувствовал растущую необходимость добавлении ним полноценного как пишет автор языка the evolution of lua году единственным реальным претендентом был tcl который был специально создан для встраивания приложения однако tcl был непривычный синтаксис не было хорошей поддержки описания данных запускался он только на платформах unix мы не рассматривали лисп или scheme из за их недружелюбного синтаксиса python был ещё во младенческом возрасте атмосфере сделай сам которая тогда царила tecgraf было вполне естественно что мы решили разработать наш собственный скриптовый язык из за того что большинство пользователей не были программистами языку следовало избегать замысловатого синтаксиса семантики реализация нового языка должна быть легко портируема так как клиенты tecgraf имели очень разнообразные платформы наконец поскольку мы ожидали что другим продуктам tecgraf также понадобится встроенный скриптовый язык новый язык должен следовать примеру sol предоставляться виде библиотеки api на lua была спроектирован таким образом что конструкторы объектов тогда чуть отличающиеся от текущего лёгкого гибкого стиля включали себя синтаксис языка sol отсюда название lua по португальски солнце луна управляющие конструкции lua основном заимствованы из модулы if while repeat until хотя на них также повлияли клу параллельное присваивание множественное возвращаемое значение функции как более простая альтернатива вместо передачи параметров по ссылке или явных указателей отличная идея объявлять локальные переменные лишь тогда когда они нужны снобол awk ассоциативные массивы создатели lua также признают что единый вездесущий механизм данных лиспе scheme связный список оказал большое влияние на их решение выборе таблиц качестве основной структуры данных для lua версии lua вплоть до выпускались под лицензией подобной лицензии bsd начиная версии выше lua под лицензией mit обе лицензии являются пермиссивными практически идентичны общая характеристика lua предназначена для использования качестве отдельного либо встроенного приложение скриптового языка она изначально создавалась достаточно простой компактной чтобы поместиться на различных исполняющих платформах обеспечить приемлемую также при проектировании учитывались требования простоты обучения возможности использования не программистами lua это процедурный динамически типизированный модульный язык автоматическим управлением памятью включает базовые элементы для поддержки функционального объектного стилей таким образом lua можно называть языком встроенные средства параллельного позволяют писать многопоточные программы только средствами языка не обращаясь api операционной системы или внешним библиотекам так как основным назначением lua является встраивание она имеет эффективные средства межъязыкового взаимодействия ориентированные главным образом на вызов библиотек си на работу си окружении язык поддерживает небольшое количество встроенных типов данных логические значения числа строки функции потоки типичные комбинированные структуры данных такие как массивы наборы списки записи отсутствуют вместо всех их используется одна базовая структура lua таблица см ниже отдельный тип userdata предназначен специально для низкоуровневого обмена данными внешним кодом на других языках функции lua являются объектами первого класса могут присваиваться передаваться параметрах поддерживаются замыкания есть возможность создания функций высших порядков объектная система прототипная отсутствует явная поддержка наследования однако оно легко реализуется помощью метатаблиц вообще lua стремится обеспечить гибкие метафункции которые могут быть расширены по мере необходимости не поставлять набор функций специфичных для конкретной парадигмы как результат основа языка проста легко адаптируема большинству приложений предоставляя минимальный набор базовых средств lua пытается найти баланс между мощностью размером синтаксис синтаксис lua основном построен на основе поздних паскалеподобных языков таких как модула или оберон формат записи текста свободный команды тексте программы разделяются любыми пробельными символами допускается но не является обязательным применение точки запятой для разделения операций лексика основной алфавит языка английский строковых литералах допускается использование символов других языков идентификаторы могут состоять из букв цифр знака подчёркивания но не могут начинаться цифры или совпадать одним из ключевых слов руководство по языку не рекомендует использовать идентификаторы начинающиеся подчёркивания так как такие идентификаторы используются для системных целей язык регистро зависимый все ключевые слова пишутся нижнем регистре идентификаторы отличающиеся только регистром букв считаются различными lua ключевых слова and break do else elseif end false goto for function if in local nil not or repeat return then true until while комментарии для комментариев используется следующий синтаксис близкий языкам ada sql vhdl простой однострочный комментарий lua начинаются двойного дефиса продолжается до конца строки dim one two three строчный комментарий не обязан начинаться начала строки он может следовать за другими языковыми конструкциями поясняя их многострочный комментарий начинается идущих подряд за двумя минусами двух открывающихся квадратных скобок продолжается до двух подряд закрывающихся квадратных скобок как здесь интересный эффект можно получить сочетанием строчных многострочных комментариев чтобы код ниже достаточно добавить этой строке пробел между минусами скобками for dim do print dimi end если выше между минусами скобками будет добавлен пробел то здесь конец многострочного комментария превратится обычный строчный типы данных lua представляет собой язык неявным динамическим определением типов данных переменная языка может содержать значения любого типа все значения lua могут храниться переменных использоваться качестве аргументов при вызове функций возвращаться виде результата их выполнения lua восемь основных типов nil неопределенный boolean логический number числовой string строковый function функция userdata данные thread поток table таблица nil это тип значения nil пустое значение главное свойство которого отличаться от всех остальных значений обозначать отсутствие пригодного значения типу boolean относятся значения false ложь true истина типу number относятся обычно вещественные числа double первых версиях lua целые числа не выделялись отдельный тип такое решение мотивируется тем что вещественное представление позволяет точно представить достаточно широкий диапазон целых чисел начиная версии добавлена возможность явного определения целого или вещественного формата числа внутреннее представление чисел можно изменить при сборке интерпретатора тип string обозначает массивы символов строки lua могут содержать любые битные символы включая ноль строки неизменяемы строковые литералы могут записываться одинарных или двойных кавычках служебные символы помещаются них стандартной для нотации ведущим обратным слэшем многострочные литералы ограничиваются двумя подряд открывающимися двумя подряд закрывающимися квадратными скобками встроенная язык поддержка юникода отсутствует хотя допускается использование символов utf строковых литералах сама система представления utf позволяет вводить выводить частично обрабатывать строки этой кодировке стандартными системными средствами последние версии lua входит библиотека utf обеспечивающая более развитую поддержку utf существуют также библиотеки сторонних разработчиков предоставляющие средства работы юникод строками различных кодировках функции lua являются полноправными объектами допускающими присваивание передачу функцию параметре возврат из функции как одного из значений тип thread имеют сопрограммы тип userdata предназначен для представления внешних данных полученных или предоставляемых из код на другом языке главным образом на операции присваивание оператором присваивания служит символ подобно таким скриптовым языкам как perl python ruby icon допускает параллельное присваивание простейшем случае это позволяет писать выражения вида отличие например от языка go параллельное присваивание lua очень либерально оно не требует точного соответствия числа переменных числу значений если значений больше чем переменных то последние значения отбрасываются если значений меньше последние переменные списке получают значение nil сравнения логические операторы операторы сравнения последние два означают соответственно сравнение на равенство на неравенство сравнения на равенство неравенство применимы любым типам данных прочие только строкам числам логические операторы and or not логические или не соответственно могут применяться значениям любых типов возвращают true либо false параметрах этих операция значения nil false считаются ложными любые другие значения истинными отличие от ряда других языков даже числовой нуль или пустая строка точки зрения логических операторов представляют значение истина вычисление бинарных логических операторов традиционно выполняется до тех пор пока результат не будет определён причём качестве результата возвращается последнее вычисленное подвыражение поэтому их можно использовать как тернарный оператор языке си аналогично арифметические операторы сложение вычитание умножение деление унарный минус остаток от деления возведение степень все арифметические операторы поддерживают вещественные операнды давая предсказуемый результат так возвращает квадратный корень из значение обратное кубическому корню из оператор определяется выражением где функция вычисляет целую часть своего аргумента для целых аргументов его результат вполне обычен для вещественного делимого нужно учитывать что операция не производит никаких дополнительных округлений или отбрасывания дробной части поэтому результат сохранит дробную часть делимого например вернёт не такая реализация даёт некоторые дополнительные возможности например для усечения до трёх знаков после запятой достаточно взять выражение таблицы таблица lua это динамический гетерогенный ассоциативный массив то есть множество пар ключ значение ключами могут быть значения любых типов lua кроме nil ключи также могут быть литералами lua запись nil элемент таблицы равносильна удалению данного элемента таблицы являются единственным lua составным типом данных они являются фундаментом для всех типов данных таких как структуры массивы множества другие таблица общего вида empty пустая таблица empty первый добавление элемента целым индексом empty второй добавление элемента целым индексом empty третий третий добавление элемента со строковым индексом empty nil удаление элемента из таблицы классический массив строки индексируются по умолчанию целыми числами начиная days понедельник вторник среда четверг пятница суббота воскресенье массив произвольной индексацией days воскресенье понедельник вторник среда четверг пятница суббота запись структура значения различных типов индексируются литералами person tabnum табельный номер fio иванов степан васильевич post слесарь должность salary оклад sdate дата приёма на работу bdate дата рождения pfio person fio обращение элементу структуры множество индексы используются для хранения значений workdays понедельник true вторник true среда true четверг true пятница true workdays суббота true добавление субботы число рабочих дней workdays среда nil по средам больше не работаем проверка является ли рабочим днём if workdaysd then print рабочий день else print выходной день end мультимножества множества которые могут содержать более одного экземпляра одного того же элемента реализуются аналогично последнему примеру только качестве значений используются не логические целые счётчики числа соответствующих элементов множестве связанные списки могут быть представлены как массивы двухэлементных массивов хранящих значение ссылку на следующий элемент многомерные массивы могут быть реализованы как массивы массивов более сложные структуры такие как очереди графы сети также реализуются на основе таблиц конкретный способ реализации определяется задачей замыкания lua поддерживает концепцию замыканий например function makeaddfunc возвращает новую анонимную функцию которая добавляет аргументу return function когда мы ссылаемся на переменную которая вне текущей области время жизни которой меньше чем этой анонимной функции lua создаёт замыкание return end end plustwo makeaddfunc print plustwo выводит каждый раз когда вызывается makeaddfunc создаётся новое замыкание для переменной так что каждая возвращаемая анонимная функция будет ссылаться на свой параметр как любого другого объекта lua временем жизни замыкания управляет сборщик мусора средства методы метатаблицы механизм метатаблиц обеспечивает многие возможности других языках предоставляемые за счёт введения отдельных синтаксических механизмов метатаблицы по структуре являются обычными таблицами luа подчиняющимися всем правилам ограничениям языка особенность их состоит применении метатаблица хранит дополнительные метаданные типов объектов то есть информацию параметрах функциях связанных ними сведения хранящиеся метатаблицах используются интерпретатором lua их использование позволяет изменить или расширить программных объектов метатаблица lua может быть связана со значением любого типа скалярные типы данных все кроме userdata таблиц имеют общие метатаблицы для каждого типа таблицы значения типа userdata имеют индивидуальные ссылки на метатаблицы каждом экземпляре изменять метатаблицы всех типов кроме таблиц можно только посредством внешнего кода на си непосредственно из lua доступны только метатаблицы таблиц созданная нуля таблица lua не имеет метатаблицы её ссылка на метатаблицу равна nil но метатаблица для неё может быть любой момент создана либо получена от другой таблицы встроенная функция getmetatable возвращает метатаблицу таблицы функция setmetatable устанавливает для таблицы метатаблицу для метатаблиц документирован набор полей которые могут использоваться интерпретатором языка для указания на особую роль этих полей для них принято специальное правило именования их идентификаторы начинаются двух подчёркиваний некоторые из таких полей содержат информацию специфических свойствах объекта которому относится метатаблица например параметр когда он задан может превратить таблицу слабую то есть таблицу все ссылки на объекты которой являются слабыми ссылками но значениями большинства возможных полей метатаблицы являются так называемые метаметоды то есть ссылки на функции которые интерпретатор вызывает при определённых условиях общая логика использования метаметодов интерпретатором состоит следующем когда интерпретатор встречает программе операцию которая не определена для объекта операнда он обращается связанной операндом метатаблице находит ней соответствующий метаметод вызывает его создание операции сложения для таблиц операнды создание метатаблицы mt запись метатаблицу метаметода mt function local res for in pairs do resk ak bk end return res end привязка метатаблицы таблице setmetatable mt теперь сложение таблиц корректная операция соединяем метатаблицу метаметодом setmetatable function local res for in pairs do res res tostring end return res end результате будет выведено for in ipairs do io write end print tostring выведет lua поддерживаются метаметоды для всех арифметических операций операций сравнения так что их помощью можно реализовать арифметику для любых объектов созданных программистом помимо стандартных можно использовать так называемые библиотечные метаметоды которые поддерживаются не ядром языка конкретными библиотеками примере выше это метаметод поддерживаемый библиотекой string этот метод выполняет конвертацию таблицы строку наибольший интерес представляет поле обращение нему происходит тогда когда интерпретатор пытается прочитать элемент таблицы но не находит его поле может ссылаться либо на метод либо на таблицу первом случае интерпретатор не найдя искомого значения основной таблице будет искать его таблице во втором вместо обращения таблице будет происходить вызов этого метода задавая таблицы или метаметоды для данного поля lua можно реализовать наследование сокрытие данных объекта отслеживание операций данными таблицы многое другое объектно ориентированное основой для ооп lua являются таблицы принципе таблица есть объект ооп смысле так как она может иметь поля именованные помощью идентификаторов хранить этих полях произвольные значения свойства объекта функции для реализации поведения объекта методы объекта некоторый синтаксический сахар предоставляемый lua делает описание обращение объектами более привычным для программистов имеющих опыт работы традиционными ооп языками понятия класса lua нет поэтому описывается отдельный объект все поля методы относятся именно нему свойства описываются аналогично элементам таблицы ключами методы как поля функции подобно классическому оберону описание методов включает явное указание первом параметре так называемого получателя параметра который при вызове метода ссылается на объект для которого он вызван но помимо стандартного обращения полю таблицы через точку которое требует вызове метода явно указывать получателя lua поддерживает дополнительный синтаксис когда вызове или описании метода его заголовок записываются виде объект метод то получатель не указывается при этом теле метода он всё равно доступен под именем self объект account объект счёт id name balance свойства объекта номер название баланс credit function self метод расход описание внутри объекта явным указанием получателя if self balance наследование том числе множественное реализуется помощью метатаблиц метаметодов также помощью метаметодов можно реализовать сокрытие данных контролируемый доступ полям таблицы объекта если сравнивать данный подход другими языками где всё реализуется помощью специальных языковых средств то можно заметить что реализация lua сложнее требует более тщательного кодирования но обеспечивает бо льшую гибкость упрощает интерпретатор примеры кода классическая программа hello world на lua выглядит так print hello world факториал пример рекурсивной функции function factorial if then return else return factorial end end цикл со счётчиком for do statements end работа функциями как объектами первого класса демонстрируется следующем примере котором модифицируется поведение функции print do local oldprint print сохраняем текущую функцию print как oldprint function print переопределяем функцию print if foo then oldprint bar else oldprint end end end любой будущий вызов print теперь будет перенаправлен новой функции благодаря поддержке lua лексического контекста старая функция print будет доступна только посредством новой функции print lua также поддерживает замыкания как описано выше соответствующем разделе ключевой особенностью lua является расширяемая семантика механизм метатаблиц даёт большие возможности по настройке уникального поведения для таблиц lua следующем примере демонстрируется бесконечная таблица для любого fibsn даст число фибоначчи использованием мемоизации fibs первоначальные значения для fibs fibs setmetatable fibs function name вызов функции если fibsn не существует namen namen namen расчёт мемоизация fibsn return namen end реализация как многие языки реализация lua имеет отдельно компилятор исходного языка исполняемый байт код виртуальную машину для исполнения байт кода причём байт код это не команды стековой машины команды некоего виртуального процессора несколькими регистрами что повышает эффективность исполнения стандартной виртуальной машине lua используется распределение памяти со сборкой мусора аналогично java или net lua использует единый строковый пул что позволяет снизить расходы памяти на хранение строк для задач критичных по времени имеется jit компилятор lua luajit также разработан компилятор llvm lua генерирующий код для виртуальной машины llvm предоставляющей возможность последующей компиляции очень эффективный машинный код для процессоров различной архитектуры использование настоящее время используется различных проектах где требуется встроить достаточно быстрый нетрудный освоении скриптовый язык например разработке игр где lua часто используется качестве прослойки между игровым движком данными для написания сценариев поведения взаимодействия объектов благодаря компактности применим портативных устройствах частности один из графических texas instruments использует язык вместо традиционного для такого класса устройств бейсика игры первыми разработку компьютерных игр язык lua внедрила компания lucasarts начиная игры grim fandango авторы языка своём докладе на конференции вспоминают что январе они получили сообщение от брета могилефски главного разработчика grim fandango где он писал что прочитав языке статье года dr dobb journal он планирует заменить используемый ими самодельный скриптовый язык scumm на lua результате им был создан игровой движок grime используемый также более поздним квестом от lucasarts escape from monkey island году результате опроса на сайте gamedev net lua был признан самым популярным скриптовым языком для разработки игр примером игры программируемой помощью lua является world of warcraft на языке lua описываются уровни игры головоломки enigma доступен ряд свободных игровых движков программируемых на lua таких как defold аркадный движок löve игровой конструктор novashell ориентированный на квесты преимущественно текстовые instead также используется авиасимуляторе plane движке ray для для популярной игры minecraft созданы модификации computercraft его более совершенный аналог opencomputers которые добавляют компьютеры программируемые на языке lua достаточно известная игра garry mod программируется также поддерживает модификации написанные на lua команда croteam разработчики serious sam the talos principle используют lua скриптах начиная версии serious engine для игры gta san andreas создаются модификации написанные на языке lua поддерживаемые плагином moonloader ide существует как минимум две родные среды разработки для lua это zerobrane studio среда разработки написанная на самом lua decoda среда разработки под windows написанная на богатыми возможностями отладки lua скриптов том числе работающих приложениях на год последний выпуск среды датируется годом имеет статус beta версии кроме того lua поддерживается некоторыми универсальными ide частности geany lua development tools для среды eclipse плагин emmylua для среды intellij idea также оснащенный проверкой синтаксиса на лету развитой системой аннотаций типов существовал модуль поддержки lua для среды netbeans но его развитие прекратилось году он доступен только для версии netbeans более ранних netbeans плагин не поддерживается примечания литература оригинал история языка интервью роберту иерузалимски для computerworld языке lua ссылки официальный сайт разработчиков lua сайт проектов lua сайт пользователей lua lua на русском переводы руководств lua руководство пользователя справочное руководство по языку lua включая дополнительные библиотеки используемые при работе mediawiki русскоязычный мануал по lua фрагмент справочного руководства по языку lua для написания скриптов для игр heroes of might and magic серп молот справочное руководство по языку lua статьи обзоры мартин страйчер создание встраиваемых сценариев на языке lua андрей зубинский еще один летний язык часть часть часть ash matheson введение lua перевод статьи an introduction to lua keith fieldhouse введение lua перевод статьи introducing lua серия статей lua linux format люблю lua уроки по языку lua его встраиванию приложения новый сайт использование lua робототехнике категория lua категория свободные библиотеки программ категория свободные компиляторы интерпретаторы категория прототипно ориентированные языки