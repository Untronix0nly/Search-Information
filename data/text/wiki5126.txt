компиля тор программа или техническое средство выполняющее компиляцию компиля ция сборка программы включающая трансляцию всех модулей программы написанных на одном или нескольких исходных языках высокого уровня или языке ассемблера эквивалентные программные модули на низкоуровневом языке близком машинному коду абсолютный код объектный модуль иногда на язык ассемблера или непосредственно на машинном языке или ином двоичнокодовом низкоуровневом командном языке последующую сборку исполняемой машинной программы если компилятор генерирует исполняемую машинную программу на машинном языке то такая программа непосредственно исполняется физической программируемой машиной например компьютером других случаях исполняемая машинная программа выполняется соответствующей виртуальной машиной входной информацией для компилятора исходный код является описание алгоритма или программы на предметно ориентированном языке на выходе компилятора эквивалентное описание алгоритма на машинно ориентированном языке объектный код компили ровать проводить трансляцию машинной программы предметно языка на машинно ориентированный язык виды компиляторов векторизующий базируется на трансляторе транслирующем исходный код машинный код компьютеров оснащённых векторным процессором гибкий сконструирован по модульному принципу управляется таблицами на языке высокого уровня или реализован помощью компилятора компиляторов диалоговый см диалоговый транслятор инкрементальный пересобирает программу заново транслируя только измененные фрагменты программы без перетрансляции всей программы пошаговый последовательно выполняет независимую компиляцию каждого отдельного оператора команды исходной программы компилятор компиляторов транслятор воспринимающий формальное описание языка генерирующий компилятор для этого языка отладочный устраняет отдельные виды синтаксических ошибок резидентный постоянно находится оперативной памяти доступен для повторного использования многими задачами написан на том же языке которого осуществляется трансляция универсальный основан на формальном описании синтаксиса семантики входного языка составными частями такого компилятора являются ядро синтаксический семантический загрузчики виды компиляции пакетная компиляция нескольких исходных модулей одном задании построчная машинный код порождается затем исполняется для каждой завершённой грамматической конструкции языка внешне воспринимается как интерпретация но устройство имеет иное условная компиляция при которой транслируемый текст зависит от условий заданных исходной программе директивами компилятора яркий пример работа препроцессора языка производных от него так зависимости от значения некой константы некая заданная часть исходного текста программы транслируется или не транслируется структура компилятора процесс компиляции состоит из следующих этапов трансляция программы трансляция всех или только изменённых модулей исходной программы компоновка машинно ориентированной программы первом случае компилятор представляет собой пакет программ включающий себя трансляторы разных языков компоновщики такой компилятор может компилировать программу разные части исходно текста которой написаны на разных языках нередко такие компиляторы управляются встроенным интерпретатором того или иного командного языка яркий пример таких компиляторов имеющийся во всех unix системах частности linux компилятор make во втором случае компилятор де факто выполняет только трансляцию далее вызывает компоновщик как внешнюю подпрограмму который компонует машинно ориентированную программу этот факт нередко служит поводом считать компилятор разновидностью транслятора что естественно неверно все современные компиляторы такого типа поддерживают организацию импорта программой процедуры функции из уже программного модуля написанного на другом языке так программу на можно импортировать функцию написанную например pascal или fortran аналогично напротив написанная на функция может быть импортирована pascal или fortran программу соотвественно это как правило было бы невозможно без поддержки многими современными компиляторами организации обработки входных данных процедуру функций соответствии соглашениями других языков например современные компиляторы языка pascal помимо соглашения самого pascal поддерживает организацию обработки процедурая функцией входных соответствии соглашениями языка чтобы на уровне машинного кода написанная на pascal процедура функция работала входными параметрами соответствии соглашениями языка оператор объявления такой pascal процедуры pascal функции должен содержать ключевое слово cdecl примерами таких компиляторов являются компиляторы со всех без исключения языков используемые непосредственно трансляция программы как неотъемлемая составляющая компиляции включает себя лексический анализ на этом этапе символов исходного файла преобразуется лексем синтаксический грамматический анализ лексем преобразуется дерево разбора семантический анализ дерево разбора обрабатывается целью установления его семантики смысла например привязка идентификаторов их декларациям типам проверка совместимости определение типов выражений результат обычно называется промежуточным представлением кодом может быть дополненным деревом разбора новым деревом абстрактным набором команд или чем то ещё удобным для дальнейшей обработки оптимизация выполняется удаление излишних конструкций упрощение кода сохранением его смысла оптимизация может быть на разных уровнях этапах например над промежуточным кодом или над конечным машинным кодом генерация кода из промежуточного представления порождается код на целевом машинно ориентированном языке генерация кода генерация машинного кода большинство компиляторов переводит программу некоторого языка машинный код который может быть непосредственно выполнен физическим процессором как правило этот код также ориентирован на исполнение среде конкретной операционной системы поскольку использует предоставляемые ею возможности системные вызовы библиотеки функций архитектура набор программно аппаратных средств для которой компилируется собирается машинно ориентированная программа называется целевой машиной результат компиляции исполнимый программный модуль обладает максимально возможной однако привязан конкретной операционной системе семейству или подсемейству ос процессору семейству процессоров не будет работать на других для каждой целевой машины ibm apple sun эльбрус каждой операционной системы или семейства операционных систем работающих на целевой машине требуется написание своего компилятора существуют также так называемые кросс компиляторы позволяющие на одной машине среде одной ос генерировать код предназначенный для выполнения на другой целевой машине или среде другой ос кроме того компиляторы могут оптимизировать код под разные модели из одного семейства процессоров путём поддержки специфичных для этих моделей особенностей или расширений наборов команд например код под процессоры семейства pentium может учитывать особенности инструкций использовать их специфичные расширения mmx sse некоторые компиляторы переводят программу языка высокого уровня не прямо машинный код на язык ассемблера пример purebasic транслирующий бейсик код ассемблер fasm это делается для упрощения части компилятора отвечающей за генерацию кода повышения его переносимости задача окончательной генерации кода привязки его требуемой целевой платформе перекладывается на ассемблер либо для возможности контроля исправления результата компиляции ручной оптимизации программистом генерация байт кода результатом работы компилятора может быть программа на специально созданном низкоуровневом языке двоично кодовых команд выполняемых виртуальной машиной такой язык называется псевдокодом или байт кодом как правило он не есть машинный код какого либо компьютера программы на нём могут исполняться на различных архитектурах где имеется соответствующая виртуальная машина но некоторых случаях создаются аппаратные платформы напрямую выполняющие псевдокод какого либо языка например псевдокод языка java называется байт кодом java выполняется java virtual machine для его прямого исполнения была создана спецификация процессора picojava для платформы net framework псевдокод называется common intermediate language cil среда исполнения common language runtime clr некоторые реализации языков высокого уровня например perl используют байт код для оптимизации исполнения затратные этапы синтаксического анализа преобразование текста программы байт код выполняются один раз при загрузке затем соответствующий код может многократно использоваться без перекомляции динамическая компиляция из за необходимости интерпретации байт код выполняется значительно медленнее машинного кода сравнимой однако он более переносим не зависит от операционной системы модели процессора чтобы ускорить выполнение байт кода используется динамическая компиляция когда виртуальная машина транслирует псевдокод машинный код непосредственно перед его первым исполнением при повторных обращениях коду исполняется уже вариант наиболее популярной разновидностью динамической компиляции является jit другой разновидностью является cil код также компилируется код целевой машины jit компилятором библиотеки net framework компилируются заранее трасляция байт кода машинный код трансляция байт кода машинный код специальным транслятором байт кода как указано выше неотъемлемая фаза динамической компиляции но трансляция байт кода применима для простого преобразования программы на байт коде эквивалентную программу на машинном языке машинный код может транслироваться как заранее байт код но также трансляция байт кода машинный код может выполняться компилятором байт кода сразу следом за компиляцией байт кода практически всегда последнем случае трансляция байт кода выполняется внешним транслятором вызываемым компилятором байт кода декомпиляция существуют программы которые решают обратную задачу перевод программы низкоуровневого языка на высокоуровневый этот процесс называют декомпиляцией такие программы декомпиляторами но поскольку компиляция это процесс потерями точно восстановить исходный код скажем на общем случае невозможно более эффективно декомпилируются программы байт кодах например существует довольно надёжный декомпилятор для flash разновидностью декомпиляции является машинного кода код на языке ассемблера который почти всегда благополучно выполняется при этом сложность может представлять код или код котором собственно код данные не разделены связано это тем что между кодами машинных команд командами ассемблера имеется практически взаимно однозначное соответствие раздельная компиляция раздельная компиляция трансляция частей программы по отдельности последующим объединением их компоновщиком единый загрузочный модуль исторически особенностью компилятора отражённой его названии собирать вместе составлять являлось то что он производил как трансляцию так компоновку при этом компилятор мог порождать сразу машинный код однако позже ростом сложности размера программ увеличением времени затрачиваемого на перекомпиляцию возникла необходимость разделять программы на части выделять библиотеки которые можно компилировать независимо друг от друга процессе трансляции программы сам компилятор или вызываемый компилятором транслятор порождает объектный модуль содержащий дополнительную информацию которая потом процессе компоновки частей исполнимый модуль используется для связывания разрешения ссылок между частями программы раздельная компиляция также позволяет писать разные части исходного текста программы на разных языках появление раздельной компиляции выделение компоновки как отдельной стадии произошло значительно позже создания компиляторов связи этим вместо термина компилятор иногда используют термин транслятор как его синоним либо старой литературе либо когда хотят подчеркнуть его способность переводить программу машинный код наоборот используют термин компилятор для подчёркивания способности собирать из многих файлов один вот только использование таком контексте терминов компилятор транслятор неправильно даже если компилятор выполняет трансляцию программы самостоятельно поручая компоновку вызываемой внешней программе компоновщику такой компилятор не может считаться разновидностью транслятора транслятор выполняет трансляцию исходной программы только уж тем более не являются трансляторами компиляторы вроде системной утилиты компилятра make имеющейся во всех unix системах утилита собственно утилита make яркий пример довольно удачной реализации раздельной компиляции работа утилиты make управляется сценарием на утилитой входном языке известном как makefile содержащемся задаваемом при запуске утилиты входном текстовом файле сама утилита не выполняет ни трансляцию ни компоновку де факто утилита make функционирует как диспетчер процесса компиляции организующий компиляцию программы соответствии заданным сценарием частности ходе компиляции целевой программы утилита make вызывает трансляторы языков транслирующие разные части исходной программы объектный код уже после этого вызывается тот или иной компоновщик компонующий конечный исполняемый программный или библиотечный программный модуль при этом разные части программы оформляемые виде отдельных файлов исходно текста могут быть написаны как на одном языке так на разных языках процессе перекомпиляции программы транслируются только измененные части файлы исходного текста программы следствие чего длительность перекомпиляции программы значительно порой на порядок сокращается история на заре развития компьютеров первые компиляторы трансляторы называли программами так как тот момент программой считался только машинный код программирующая программа была способна из человеческого текста сделать машинный код то есть эвм см также компиляторы принципы технологии инструменты corc ssa транспайлер примечания литература карпов классическая теория компиляторов можно воспользоваться для поисков прочих источников запросом теория формальных языков ссылки новым процессорам новые компиляторы