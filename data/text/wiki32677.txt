непрерывная интеграция ci это практика разработки программного обеспечения которая заключается слиянии рабочих копий общую основную ветвь разработки несколько раз день выполнении частых сборок проекта для скорейшего выявления потенциальных дефектов решения интеграционных проблем обычном проекте где над разными частями системы разработчики трудятся независимо стадия интеграции является заключительной она может непредсказуемо задержать окончание работ переход непрерывной интеграции позволяет снизить трудоёмкость интеграции сделать её более предсказуемой за счет наиболее раннего обнаружения устранения ошибок противоречий но основным преимуществом является сокращение стоимости исправления дефекта за счёт раннего его выявления непрерывная интеграция впервые названа предложена гради бучем непрерывная интеграция является одним из основных приёмов экстремального требования проекту исходный код всё что необходимо для сборки тестирования проекта хранится репозитории системы управления версиями операции копирования из репозитория сборки тестирования всего проекта легко вызываются из внешней программы организация на выделенном сервере организуется служба задачи которой входят получение исходного кода из репозитория сборка проекта выполнение тестов развёртывание готового проекта отправка отчетов локальная сборка может осуществляться по внешнему запросу по расписанию по факту обновления репозитория по другим критериям сборка по расписанию случае сборки по расписанию они как правило проводятся каждой ночью автоматическом режиме ночные сборки чтобы началу рабочего дня были готовы результаты тестирования для различия дополнительно вводится система нумерации сборок обычно каждая сборка нумеруется натуральным числом которое увеличивается каждой новой сборкой исходные тексты другие исходные данные при взятии их из репозитория хранилища системы контроля версий помечаются номером сборки благодаря этому точно такая же сборка может быть точно воспроизведена будущем достаточно взять исходные данные по нужной метке запустить процесс снова это даёт возможность повторно выпускать даже очень старые версии программы небольшими исправлениями преимущества проблемы интеграции выявляются исправляются быстро что оказывается дешевле немедленный прогон модульных тестов для свежих изменений постоянное наличие текущей стабильной версии вместе продуктами сборок для тестирования демонстрации немедленный эффект от неполного или неработающего кода приучает разработчиков работе итеративном режиме более коротким циклом недостатки затраты на поддержку работы непрерывной интеграции потенциальная необходимость выделенном сервере под нужды непрерывной интеграции немедленный эффект от неполного или неработающего кода отучает разработчиков от выполнения периодических резервных включений кода репозиторий случае использования системы управления версиями исходного кода поддержкой ветвления эта проблема может решаться созданием отдельной ветки англ branch проекта для внесения крупных изменений код разработка которого до варианта займет несколько дней но желательно более частое сохранение результата репозиторий по окончании разработки индивидуального тестирования такой ветки она может быть объединена англ merge основным кодом или стволом англ trunk проекта примечания литература ссылки martin fowler continuous integration непрерывная интеграция buildbot категория отладка программ категория непрерывная интеграция категория экстремальное