хэш табли ца или хеш табли ца это структура данных реализующая интерфейс ассоциативного массива именно она позволяет хранить пары ключ значение выполнять три операции операцию добавления новой пары операцию поиска операцию удаления пары по ключу введение существуют два основных варианта хеш таблиц цепочками открытой адресацией хеш таблица содержит некоторый массив элементы которого есть пары хеш таблица открытой адресацией или списки пар хеш таблица цепочками выполнение операции хеш таблице начинается вычисления хеш функции от ключа получающееся хеш значение играет роль индекса массиве затем выполняемая операция добавление удаление или поиск объекту который хранится соответствующей ячейке массива ситуация когда для различных ключей получается одно то же хеш значение называется коллизией такие события не так уж редки например при вставке хеш таблицу размером ячеек всего лишь элементов вероятность коллизии уже превысит если каждый элемент может равновероятно попасть любую ячейку см парадокс дней рождения поэтому механизм разрешения коллизий важная составляющая любой хеш таблицы некоторых специальных случаях удаётся избежать коллизий вообще например если все ключи элементов известны заранее или очень редко меняются то для них можно найти некоторую совершенную хеш функцию которая распределит их по ячейкам хеш таблицы без коллизий хеш таблицы использующие подобные хеш функции не нуждаются механизме разрешения коллизий называются хеш таблицами прямой адресацией число хранимых элементов делённое на размер массива число возможных значений хеш функции называется коэффициентом заполнения хеш таблицы load factor является важным параметром от которого зависит среднее время выполнения операций свойства хеш таблицы важное свойство хеш таблиц состоит том что при некоторых разумных допущениях все три операции поиск вставка удаление элементов среднем выполняются за время но при этом не гарантируется что время выполнения отдельной операции мало это связано тем что при достижении некоторого значения коэффициента заполнения необходимо осуществлять перестройку индекса хеш таблицы увеличить значение размера массива заново добавить пустую хеш таблицу все пары разрешение коллизий существует несколько способов разрешения коллизий метод цепочек разрешение коллизий при помощи цепочек каждая ячейка массива является указателем на связный список цепочку пар ключ значение соответствующих одному тому же хеш значению ключа коллизии просто приводят тому что появляются цепочки длиной более одного элемента операции поиска или удаления элемента требуют просмотра всех элементов соответствующей ему цепочки чтобы найти ней элемент заданным ключом для добавления элемента нужно добавить элемент конец или начало списка случае если коэффициент заполнения станет слишком велик увеличить размер массива перестроить таблицу при предположении что каждый элемент может попасть любую позицию таблицы равной вероятностью независимо от того куда попал любой другой элемент среднее время работы операции поиска элемента составляет где коэффициент заполнения таблицы открытая адресация пример хеш таблицы открытой адресацией линейным пробированием получающейся при вставке элементов левой колонке сверху вниз массиве хранятся сами пары ключ значение алгоритм вставки элемента проверяет ячейки массива некотором порядке до тех пор пока не будет найдена первая свободная ячейка которую будет записан новый элемент этот порядок вычисляется на лету что позволяет сэкономить на памяти для указателей требующихся хеш таблицах цепочками которой просматриваются ячейки хеш таблицы называется проб общем случае она зависит только от ключа элемента то есть это где ключ элемента произвольные функции сопоставляющие каждому ключу ячейку хеш таблице первый элемент как правило равен значению некоторой хеш функции от ключа остальные считаются от него одним из приведённых ниже способов для успешной работы алгоритмов поиска проб должна быть такой чтобы все ячейки хеш таблицы оказались просмотренными ровно по одному разу алгоритм поиска просматривает ячейки хеш таблицы том же самом порядке что при вставке до тех пор пока не найдется либо элемент искомым ключом либо свободная ячейка что означает отсутствие элемента хеш таблице удаление элементов такой схеме несколько затруднено обычно поступают так заводят булевый флаг для каждой ячейки помечающий удален элемент ней или нет тогда удаление элемента состоит установке этого флага для соответствующей ячейки хеш таблицы но при этом необходимо модифицировать процедуру поиска существующего элемента так чтобы она считала удалённые ячейки занятыми процедуру добавления чтобы она их считала свободными сбрасывала значение флага при добавлении проб ниже приведены некоторые типы проб сразу оговорим что нумерация элементов проб ячеек хеш таблицы ведётся от нуля размер хеш таблицы как замечено выше также длина проб линейное пробирование ячейки хеш таблицы последовательно просматриваются некоторым фиксированным интервалом между ячейками обычно то есть элемент проб это ячейка номером hash ik mod для того чтобы все ячейки оказались просмотренными по одному разу необходимо чтобы было взаимно простым размером хеш таблицы квадратичное пробирование интервал между ячейками каждым шагом увеличивается на константу если размер хеш таблицы равен степени двойки то одним из примеров при которой каждый элемент будет просмотрен по одному разу является hash mod hash mod hash mod hash mod двойное хеширование интервал между ячейками фиксирован как при линейном пробировании но отличие от него размер интервала вычисляется второй вспомогательной хеш функцией значит может быть различным для разных ключей значения этой хеш функции должны быть ненулевыми взаимно простыми размером хеш таблицы что проще всего достичь взяв простое число качестве размера потребовав чтобы вспомогательная хеш функция принимала значения от до ниже представлен код демонстрирующий двойное хеширование см также ассоциативный массив фильтр блума литература категория хеширование категория структуры данных категория статьи примерами кода си