файл motorola assembly language png thumb px листинг программы на языке ассемблера motorola mc слева идут адреса машинные коды системе вычисленные сгенерированные ассемблером из исходного кода программы справа показан сам текст программы мнемоническими инструкциями метками директивами выражениями комментариями язы ассе мблера машинно ориентированный язык низкого уровня его команды прямо соответствуют отдельным командам машины или их также он может предоставлять дополнительные возможности облегчения такие как макрокоманды выражения средства обеспечения модульности программ может рассматриваться как автокод см ниже расширенный конструкциями языков высокого уровня является существенно платформо зависимым языки ассемблера для различных аппаратных платформ несовместимы хотя могут быть целом подобны русском языке может именоваться просто ассемблером типичны выражения типа писать программу на ассемблере что строго говоря неверно так как ассемблером именуется утилита трансляции программы языка ассемблера объектный код компьютера автокод язык предложения которого по своей структуре основном подобны командам обрабатываемым данным конкретного машинного языка общее определение язык ассемблера система обозначений используемая для представления удобочитаемой форме программ записанных машинном коде язык ассемблера позволяет программисту пользоваться алфавитными мнемоническими кодами операций по своему усмотрению присваивать символические имена регистрам эвм памяти также задавать удобные для себя схемы адресации например индексную или косвенную кроме того он позволяет использовать различные системы счисления например десятичную или для представления числовых констант даёт возможность помечать строки программы метками символическими именами тем чтобы ним можно было обращаться по именам не по адресам из других частей программы например для передачи управления перевод программы на языке ассемблера исполнимый машинный код вычисление выражений раскрытие макрокоманд замена мнемоник собственно машинными кодами символьных адресов на абсолютные или относительные адреса производится ассемблером программой транслятором которая дала языку ассемблера его название содержание языка команды языка ассемблера один одному соответствуют командам процессора фактически они представляют собой более удобную для человека символьную форму записи мнемокоды команд их аргументов при этом одной команде языка ассемблера может соответствовать несколько вариантов команд процессора кроме того язык ассемблера позволяет использовать символические метки вместо адресов ячеек памяти которые при ассемблировании заменяются на вычисляемые ассемблером или компоновщиком абсолютные или относительные адреса также так называемые директивы команды ассемблера не переводимые машинные команды процессора выполняемые самим ассемблером директивы ассемблера позволяют частности включать блоки данных задать ассемблирование фрагмента программы по условию задать значения меток использовать макрокоманды параметрами каждая модель или семейство процессоров имеет свой набор систему команд соответствующий ему язык ассемблера наиболее популярные синтаксисы языков ассемблера intel синтаксис at синтаксис существуют компьютеры реализующие качестве машинного язык высокого уровня форт лисп эль фактически таких компьютерах они выполняют роль языков ассемблера возможности использование языка ассемблера предоставляет программисту ряд возможностей как правило недоступных при на языках высокого уровня большинство из них связано близостью языка аппаратной платформе возможность максимально полного использования всех особенностей аппаратной платформы позволяет теоретически писать самый быстрый компактный код из возможных для данного процессора искусный программист как правило способен значительно оптимизировать программу по сравнению транслятором языка высокого уровня по одному или нескольким параметрам создать код близкий оптимальному по парето как правило быстродействие программы достигается за счёт удлинения кода наоборот за счёт более рационального использования ресурсов процессора например максимально эффективного размещения всех исходных данных регистрах можно исключить излишние обращения оперативной памяти за счёт ручной оптимизации вычислений том числе более эффективного использования промежуточных результатов может быть сокращён объём кода повышена скорость программы возможность доступа аппаратуре частности портам ввода вывода конкретным адресам памяти регистрам процессора впрочем данная возможность существенно ограничивается тем что во многих операционных системах прямое обращение из прикладных программ для записи регистры периферийного оборудования блокировано для надёжности работы системы использование ассемблера практически не имеет альтернативы при создании драйверов оборудования ядра операционной системы по крайней мере машинозависимых подсистем ядра ос тогда когда важно временно согласование работы периферийных устройств центральным процессором программ которые должны храниться пзу ограниченного объёма или выполняться на устройствах ограниченной прошивок компьютеров различных электронных устройств платформо зависимых компонентов компиляторов интерпретаторов языков высокого уровня системных библиотек кода реализующего совместимость платформ отдельно можно отметить что помощью программы дизассемблера возможно преобразование программы программу на языке ассемблера большинстве случаев это единственный хотя крайне трудоёмкий способ обратного алгоритмов программы если не доступен её исходных код на языке высокого уровня ограничения силу машинной ориентации низкого уровня языка ассемблера человеку сложнее читать понимать программу на нём по сравнению языками высокого уровня это серьёзно затрудняет сопровождение программ написанных на языке ассемблера программа на языке ассемблера состоит из очень мелких элементов машинных команд соответственно объём программы командах пропорционально больше поскольку как известно программист за единицу времени может написать отладить примерно одно то же число операторов вне зависимости от языка на котором он пишет разработка на ассемблере больших программ оказывается существенно медленнее усложняются отладка растут трудоёмкость вероятность внесения ошибок требуется повышенная квалификация программиста для получения качественного кода код написанный средним программистом на языке ассемблера обычно оказывается не лучше или даже хуже кода порождаемого оптимизирующим компилятором для сравнимых программ написанных на языке высокого уровня при этом чем больше объём программы тем меньше выигрыш от использования языка ассемблера программа на языке высокого уровня может быть автоматической оптимизацией под особенности новой целевой платформы программа же на языке ассемблера на новой платформе может потерять своё преимущество скорости без ручного переписывания кода как правило меньшее количество доступных библиотек по сравнению современными индустриальными языками отсутствует переносимость программ на компьютеры другой архитектурой системой команд применение исторически если первым поколением языков считать машинные коды то язык ассемблера можно рассматривать как второе поколение языков недостатки языка ассемблера сложность разработки на нём больших программных комплексов привели появлению языков третьего поколения языков высокого уровня таких как фортран лисп кобол паскаль си др именно языки высокого уровня их наследники основном используются настоящее время индустрии информационных технологий однако языки ассемблера сохраняют свою нишу обусловленную их уникальными преимуществами части эффективности возможности полного использования специфических средств конкретной платформы на языке ассемблера пишут программы или их фрагменты тех случаях когда критически важны быстродействие драйверы игры объём используемой памяти загрузочные секторы встраиваемое программное обеспечение программы для процессоров ограниченными ресурсами вирусы программные защиты использованием на языке ассемблера производятся оптимизация критичных скорости участков программ программах на языках высокого уровня таких как или pascal это особенно актуально для игровых приставок имеющих фиксированную для мультимедийных кодеков которые стремятся делать менее ресурсоёмкими более быстрыми создание операционных систем ос или их компонентов настоящее время подавляющее большинство ос пишут на более высокоуровневых языках основном на си языке высокого уровня который специально был создан для написания одной из первых версий unix аппаратно зависимые участки кода такие как загрузчик ос уровень абстрагирования от аппаратного обеспечения hardware abstraction layer ядро часто пишутся на языке ассемблера фактически ассемблерного кода ядрах windows или linux совсем немного поскольку авторы стремятся обеспечить переносимость надёжность но тем не менее он там присутствует некоторые любительские ос такие как menuetos kolibrios целиком написаны на языке ассемблера при этом menuetos kolibrios помещаются на дискету содержат графический многооконный интерфейс мк других встраиваемых процессоров по мнению профессора таненбаума развитие мк повторяет историческое развитие компьютеров новейшего времени сейчас для мк весьма часто применяют язык ассемблера хотя этой области широкое распространение получают языки вроде си мк приходится перемещать отдельные байты биты между различными ячейками памяти мк весьма важно так как по мнению таненбаума автомобиле квартире современного цивилизованного человека среднем содержится создание драйверов драйверы или их некоторые программные модули программируют на языке ассемблера хотя настоящее время драйверы также стремятся писать на языках высокого уровня на высокоуровневом языке много проще написать надёжный драйвер связи повышенными требованиями надёжности достаточной современных процессоров быстродействие обеспечивает временно согласование процессов устройстве процессоре достаточным совершенством компиляторов языков высокого уровня отсутствие ненужных пересылок данных сгенерированном коде подавляющая часть современных драйверов пишется на языке ассемблера надёжность для драйверов играет особую роль поскольку windows nt unix том числе linux драйверы работают режиме ядра системы одна тонкая ошибка драйвере может привести краху всей системы создание антивирусов других защитных программ написание кода низкоуровневых библиотек трансляторов языков связывание программ на разных языках поскольку уже давно на языке ассемблера часто кодируют только фрагменты программ их необходимо связывать остальными частями программной системы написанными на других языках это достигается двумя основными способами на этапе компиляции вставка исходный код программы на языке высокого уровня ассемблерных фрагментов помощью специальных директив языка способ удобен для несложных преобразований данных но полноценного ассемблерного кода данными подпрограммами включая подпрограммы со множеством входов выходов не поддерживаемых языком высокого уровня его помощью сделать невозможно на этапе компоновки при раздельной компиляции для взаимодействия компонуемых модулей достаточно чтобы импортируемые функции определённые одних модулях используемые других поддерживали определённое соглашение вызове написаны же отдельные модули могут быть на любых языках том числе на языке ассемблера синтаксис синтаксис языка ассемблера определяется системой команд конкретного процессора набор команд типичными командами языка ассемблера являются большинство примеров даны для intel синтаксиса архитектуры команды пересылки данных mov др арифметические команды add sub imul др логические побитовые операции or and xor shr др команды управления ходом выполнения программы jmp loop ret др команды вызова прерываний иногда относят командам управления int команды ввода вывода порты in out для характерны также команды выполняющие проверку переход по условию например cjne перейти если не равно djnz если результат ненулевой то перейти cfsneq сравнить если не равно пропустить следующую команду инструкции типичный формат записи команд метка префикс мнемокод операнд операнд комментарий где мнемокод непосредственно мнемоника инструкции процессору ней могут быть добавлены префиксы повторения изменения типа адресации пр качестве операндов могут выступать константы адреса регистров адреса оперативной памяти пр различия между синтаксисом intel at касаются основном порядка перечисления операндов указания различных методов адресации используемые мнемоники обычно одинаковы для всех процессоров одной архитектуры или семейства архитектур среди широко известных мнемоники процессоров контроллеров arm sparc powerpc они описываются спецификации процессоров возможные исключения если ассемблер использует at синтаксис оригинальные мнемоники приводятся синтаксису at если изначально существовало два стандарта записи мнемоник система команд была наследована от процессора другого производителя например процессор zilog наследовал систему команд intel расширил её поменял мнемоники обозначения регистров на свой лад процессоры motorola fireball наследовали систему команд несколько её урезав вместе тем motorola официально вернулась мнемоникам intel данный момент половина ассемблеров для fireball работает мнемониками intel половина мнемониками zilog директивы программа на языке ассемблера может содержать директивы инструкции не переводящиеся непосредственно машинные команды управляющие работой компилятора набор синтаксис их значительно разнятся зависят не от аппаратной платформы от используемого транслятора порождая диалекты языков пределах одного семейства архитектур качестве джентльменского набора директив можно выделить следующие определение данных констант переменных управление организацией программы памяти параметрами выходного файла задание режима работы компилятора всевозможные абстракции то есть элементы языков высокого уровня от оформления процедур функций для упрощения реализации парадигмы процедурного до условных конструкций циклов для парадигмы структурного макросы пример программы примеры программы hello world для разных платформ разных диалектов история терминология данный тип языков получил своё название от названия транслятора компилятора этих языков ассемблера сборщик название обусловлено тем что программа автоматически собиралась не вводилась вручную покомандно непосредственно кодах при этом наблюдается путаница терминов ассемблером нередко называют не только транслятор но соответствующий язык программа на ассемблере использование термина язык ассемблера также может вызвать ошибочное мнение существовании некоего единого языка низкого уровня или хотя бы стандартов на такие языки при именовании языка ассемблера желательно уточнять ассемблер для какой архитектуры имеется виду примечания литература юричев понимание языка ассемблера https yurichev com writings ual ru pdf ссылки wasm in портал посвящённый информационной безопасности на языках ассемблера архив статей сайта wasm ru на самом сайте данный момент доступен только форум assembler win введение ассемблер под ассемблер