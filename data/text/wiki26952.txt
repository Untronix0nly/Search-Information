subversion также известная как svn свободная система управления версиями официально выпущенная году компанией года subversion является одним из проектов apache software foundation официально называется apache subversion товарный знак цель проекта начале разработки заменить на тот момент систему concurrent versions system cvs которая на сегодняшний день считается морально устаревшей subversion реализует все основные функции cvs свободна от ряда недостатков последней subversion используется многими сообществами разработчиков открытого программного обеспечения том числе сообществами ранее использовавшими cvs их числе такие известные проекты как apache gcc free pascal ruby freebsd aros blender boost tor subversion также широко используется закрытых проектах корпоративной сфере хостинг subversion том числе для проектов открытым кодом также предоставляют популярные хостинг проекты sourceforge net tigris org google code bountysource году аналитическая компания forrester сравнивая преимущества недостатки различных систем оценила subversion как единоличного лидера категории standalone software configuration management scm сильного участника категории software configuration and change management sccm по данным статистики использования пакетов linux дистрибутивов debian ubuntu количество активных пользователей subversion примерно такое же как git превосходит аналогичный показатель для cvs mercurial bazaar по состоянию на июнь года качестве официальной документации позиционируется книга издательства reilly media выложенная свободный доступ дописываемая авторами по мере выхода новых версий svn там же публикуются её переводы на ряд языков том числе русский но при том что англоязычные версии книги сейчас описывают версии на русском языке имеются лишь книги описывающие версии до включительно история разработка subversion была начата году по инициативе при финансовой поддержке collabnet инициаторы проекта хотели создать свободную систему управления версиями основном похожую на cvs но лишённую её ошибок неудобств то время не существовало лучших программ этого класса со свободной лицензией cvs была стандартом де факто среди разработчиков свободного программного обеспечения выбрав её за основу разработчики subversion надеялись упростить разработку за счёт использования уже проверенных концепций то же время облегчить переход на новую систему многочисленным пользователям cvs основные события истории развития subversion августа года команда разработчиков перешла cvs на subversion для управления собственным исходным кодом subversion стала самодостаточной февраля года вышла версия этому времени subversion уже использовалась примерно на серверах открытым доступом сентября года появился релиз среди основных нововведений новый формат хранилища на основе обычных файлов fsfs дополнение существовавшему ранее использованием berkeley db мая года вышел релиз котором добавлена возможность блокировки файлов что позволило улучшить поддержку клиентов webdav deltav том числе реализовать автоматическое создание новых версий при редактировании файлов помощью таких клиентов начиная этого релиза subversion по умолчанию использует fsfs для новых хранилищ декабря года вышел релиз основными изменениями являются возможность устанавливать права доступа каталогам при использовании svnserve дополнительные возможности команд также множество улучшений для разработчиков сентября года вышел релиз он поддерживает работу berkeleydb может использовать её функции ранее при сбоях subversion хранилище использующее berkeleydb могло остаться заклиненном состоянии требовалось вмешательство администратора для восстановления работы системы при использовании fsfs этой проблемы нет июня года вышел релиз нём сделано множество улучшений самым значительным из которых является базовая поддержка отслеживания слияний эта возможность делает процесс слияния пакетов subversion более простым надёжным марта года вышел релиз улучшения поддержки svn externals обнаружение конфликтов деревьев улучшение эффективности хранения данных репозитории другие внесённые изменения феврале года проект subversion был официально переведён под управление apache software foundation asf президент subversion corporation директор open source wandisco выступил видеообращением котором энтузиазмом пообещал всем что переход subversion asf будет лишь способствовать более активному развитию проекта октября года состоялся релиз основные улучшения теперь только одна папка svn корне рабочей копии ускорена работа по http добавлена утилита svnrdump новая команда svn patch июня года вышел релиз apache subversion является расширением всех предыдущих выпусков subversion общие сведения возможности хранение полной истории изменений отслеживаемых объектов файлов каталогов символьных ссылок хранилище репозитории том числе при изменении атрибутов метаданных перемещении переименовании удалении копирование объектов разветвлением истории при копировании хранилище появляются два отдельных объекта общей историей поддержка переноса изменений между копиями объектов том числе полного слияния копий рабочей копии без объединения истории эмуляция ветвления создание ветвей помощью копирования каталогов последующая независимая работа ними слияние ветвей автоматическим определением переносом изменений эмуляция меток копированием каталогов история изменений копии объектов том числе ветви метки хранятся виде связанных разностных копий дешёвых не требующих больших временны дисковых ресурсов при создании хранении поддержка конкурентной том числе одновременной изоляцией транзакций работы хранилищем большинстве случаев автоматическим слиянием изменений различных разработчиков рабочей копии фиксации изменений хранилище том числе многообъектные организуются виде атомарных транзакций сетевой обмен между сервером клиентом предусматривает передачу только различий между рабочей копией хранилищем обеспечивается одинаково эффективная работа как текстовыми так двоичными файлами различные варианты доступа хранилищу том числе доступ на локальной файловой системе по собственному сетевому протоколу через веб сервер по протоколу webdav deltav вывод клиента командной строки одинаково удобен для чтения для разбора программами возможность зеркалирования хранилища два возможных внутренних формата хранилища база данных или набор обычных файлов сообщения программы используются настройки локали библиотеки для языков php python perl java позволяют встроить клиента subversion программы написанные на этих языках многоуровневая архитектура библиотек изначально рассчитанная на клиент серверную модель модель работы subversion система отличие от распределённых систем таких как git или mercurial то есть данные хранятся едином хранилище хранилище может располагаться на локальном диске или на сетевом сервере работа subversion мало отличается от работы других системах управления версиями клиенты копируют файлы из хранилища создавая локальные рабочие копии затем вносят изменения рабочие копии фиксируют эти изменения хранилище несколько клиентов могут одновременно обращаться хранилищу для совместной работы над файлами subversion преимущественно используется модель копирование изменение слияние кроме того для файлов не допускающих слияние различные бинарные форматы файлов можно использовать модель блокирование изменение разблокирование при сохранении новых версий используется дельта компрессия система находит отличия новой версии от предыдущей записывает только их избегая дублирования данных при использовании доступа помощью webdav также поддерживается прозрачное управление версиями если любой клиент webdav открывает для записи затем сохраняет файл хранящийся на сетевом ресурсе то автоматически создаётся новая версия типы репозиториев subversion предлагает два варианта организации репозиториев репозитории первого типа используют для хранения базы данных на основе berkeley db репозитории второго типа обычные файлы специального формата доступ данным организуется помощью собственных библиотек без использования сторонних баз данных разработчики subversion часто называют хранилище файловой системой поэтому второй тип получил название fsfs то есть файловая система поверх обычной файловой системы оба типа репозиториев обеспечивают достаточную надёжность при правильной организации berkeley db использует блокировки файлов поэтому её нельзя использовать на некоторых сетевых файловых системах не поддерживающих блокировок каждая из них обладает своими преимуществами недостатками считается что fsfs легче правильно настроить она требует меньшего внимания от администратора кроме того до релиза хранилища использующие berkeley db могли при определённых условиях оказаться так называемом заклиненном состоянии требовалось вмешательство администратора для восстановления его начиная релиза для новых хранилищ по умолчанию используется fsfs при выпуске релиза использование berkeley db было объявлено новые возможности которые будут добавлены следующих релизах могут не работать на серверах использующих berkeley db дальнейшем поддержка berkeley db может быть прекращена доступ репозиторию subversion предоставляет следующие способы доступа репозиторию прямой доступ репозиторию на диске на локальной или сетевой файловой системе удалённый доступ по протоколу webdav deltav поверх http или https использованием модуля mod_dav_svn для веб сервера apache удалённый доступ использованием собственного протокола svn на выделенном сетевом соединении по умолчанию на tcp порту через стандартный ввод вывод том числе через средства удалённого cli например ssh все эти способы могут быть использованы для работы репозиториями обоих типов fsfs berkeley db для доступа одному тому же репозиторию могут одновременно использоваться разные способы основные концепции файловая система рис двумерное представление файловой системы subversion точки зрения пользователя хранилище subversion представляет собой двумерную файловую систему объекты хранилище файлы каталоги двумя координатами именем номером ревизии другими словами хранилище представляет собой массив мгновенных снимков ревизий дерева файлов каталогов индексируемый номером ревизии каждый такой снимок обычная одномерная файловая система при необходимости указания на конкретную ревизию объекта используется запись вида имя ревизия например main файл main ревизии такое указание ревизии используемое для уточнения имени называется стержневая ревизия на рис показано графическое представление файловой системы вертикальная ось соответствует множеству имён горизонтальная множеству ревизий имена файлов имя объекта файловой системы subversion образуется по тем же правилам что unix подобных операционных системах существует только одна корневой каталог элементы пути разделяются косой чертой объектами файловой системы являются файлы каталоги также символические ссылки которые эмулируются из обычных файлов путём установки атрибута svn special номера ревизий номер ревизии subversion это натуральное число или для самой первой ревизии адресующее номер состояния хранилища процессе изменения содержащихся нём данных каждая успешная фиксация изменений порождает ровно одну новую ревизию хранилище то есть ревизия это состояние хранилища после фиксации subversion ревизия характеризует состояние не отдельного файла всего хранилища целом например ревизия обведено пунктиром на рисунке это состояние четырёх файлов двух каталогом существовавших хранилище на тот момент номер ревизии является аналогом времени том смысле что меньшие номера ревизий соответствуют более ранним состояниям хранилища бо льшие поздним минимальный номер ревизии ноль соответствует изначальному состоянию хранилища когда ещё не было зафиксировано ни одной правки нулевой ревизии хранилище содержит только пустую корневой каталог максимальный номер ревизии соответствует самому последнему состоянию хранилища то есть состоянию после фиксации последней правки вместо указания номера последней ревизии можно использовать ключевое слово head головная ревизия это удобно поскольку номер головной ревизии увеличивается при каждой фиксации изменений номер ревизии можно рассматривать как некую временну отметку истории хранилища более того каждым номером ревизии связано абсолютное значение времени когда эта ревизия была сделана свойство svn date однако указание номера ревизии удобнее чем указание времени так как нет путаницы часовыми поясами запись номера короче номер ревизии не может быть изменён оперативная стержневая ревизии рис указание стержневой ревизии номер ревизии используется двух различных контекстах оперативной ревизии стержневой ревизии ревизия называется оперативной если она указывает ревизию или диапазон ревизий которому должна быть применена операция например svn log данном примере выполняется команда svn log для диапазона ревизий который является диапазоном оперативных ревизий однако указание только имени файла оперативной ревизии иногда может неоднозначно указывать на объекты хранилища например ситуации показанной на рис возникает неоднозначность при выполнении следующей команды svn log команде указан диапазон оперативных ревизий но области выделенные на рисунке голубым зелёным фоном равной степени можно считать историей файла bar txt диапазоне ревизий подобных случаях необходимо указывать ещё стержневую ревизию для разрешения неоднозначности стержневая ревизия это номер ревизии указанный дополнение url объекта файловой системы используется запись вида url ревизия название происходит от английского слова которое можно перевести как стержень или колышек стержневая ревизия отмечает ту цепочку состояний которой принадлежит указанная пара url ревизия таким образом однозначно идентифицирует объект хранилища которому должна быть применена команда приведённом ниже примере первая команда выведет историю выделенную на рисунке голубым фоном вторая историю выделенную зелёным фоном svn log svn log качестве стержневой ревизии следует указывать как можно более позднее состояние интересующего объекта причина этого том что цепочка состояний однозначно отслеживается назад но не вперёд например url со стержневой ревизией принадлежит двум цепочкам состояний выделены соответственно зелёным серым фоном из этих двух цепочек указанный url адресует серую цепочку то есть при движении вперёд от стержневой ревизии операции копирования игнорируются операции над файловой системой над объектами файловой системы хранилище subversion могут быть произведены перечисленные ниже операции см рис скобках указано краткое именование операции обозначениях команды svn status добавление добавление объекта файловую систему добавленный объект не имеет истории ревизий пример на рисунке файл main был добавлен ревизии модификация модификация объекта например изменение содержимого файла или изменение свойств файла или каталога пример на рисунке файл main был модифицирован ревизии удаление удаление файла из головной последующих ревизий при этом файл остаётся предыдущих ревизиях пример на рисунке файл main был удалён ревизии добавление историей представляет собой копирование объекта внутри файловой системы хранилища то есть объект имя_источника копируется имя_копии head скопированный объект наследует от источника историю ревизий до момента копирования наследование истории показано на рисунке пунктирными связями примеры на рисунке ревизии каталог tags был скопирована каталога trunk ревизии файл main был скопирован main то есть более ранней ревизии самого себя таким образом произведено восстановление ранее удалённого ревизии файла сохранением истории ревизий замена имеет место случае когда одной ревизии произведено удаление объекта добавление историей объекта тем же самым именем хотя имя при операции замены остаётся неизменным subversion рассматривает объект до после замены как два различных объекта различными историями ревизий история старого заканчивается точке замены история нового наследуется от источника копирования продолжается далее пример на рисунке ревизии файл file txt был заменён старый файл file txt удалён новый файл тем же именем скопирован файла bar txt фиксация изменений рабочая копия рабочая копия это созданная клиентской программой subversion локальная копия части данных из хранилища содержащая помимо собственно данных некоторую служебную информацию скрытые каталоги именем svn служебная информация необходима для правильного рабочей копии что либо менять служебных данных нельзя минимальной единицей данных которую можно получить из хранилища как рабочую копию является каталог содержимое каталога можно извлечь не полностью например можно исключить отдельные файлы или подкаталоги однако извлечь из хранилища отдельный файл как рабочую копию невозможно любой подкаталог рабочей копии subversion более ранних версий также является полноценной рабочей копией поскольку каждом каталоге хранятся его служебные данные каталоги svn начиная версии каждой рабочей копии присутствует только один каталог svn корне её каталога рабочая копия является самодостаточной том смысле что subversion не хранит каких либо данных относящихся рабочей копии вне её поэтому имея одну рабочую копию можно сделать ещё несколько копий простым копированием без затрат сетевого трафика служебных каталогах рабочей копии помимо прочего хранится так называемая чистая копия файлы рабочей копии неизменённом виде как они были извлечены из хранилища для svn это ревизия именем base наличие чистой копии позволяет быстро без обращения хранилищу выполнять операции просмотра отката локальных изменений однако размер рабочей копии на диске примерно два раза больше данные чистая копия данных чем размер самих данных такой подход обусловлен тем что дисковые ресурсы дешевле доступнее чем ресурсы сети передачи данных как правило создание рабочей копии является первым необходимым этапом для фиксации локальных изменений поскольку зафиксировать хранилище можно только изменения сделанные рабочей копии исключением являются операции которые могут быть выполнены прямо хранилище без создания рабочей копии транзакции работа хранилищем subversion организована форме транзакций со свойствами атомарности изоляции из набора свойств acid таким образом система управления версиями гарантирует целостность доступность хранилища любой момент времени атомарность фиксаций изменения нескольких файлах или каталогах фиксируются единой транзакцией порождая при этом одну ревизию случае неудачной фиксации при любом сбое или ошибке система гарантирует что хранилище не окажется частично изменённом состоянии хранилище попадут либо все изменения либо при неудаче ни одного изоляция гарантирует что промежуточные состояния хранилища внутри транзакции не видны другим транзакциям пользователям например если один пользователь фиксирует одной транзакцией изменения нескольких файлах то другие пользователи не могут увидеть такого состояния хранилища котором часть файлов уже изменена часть не изменена данные свойства не гарантируются для рабочей копии subversion она отличие от хранилища при сбое или прерывании может оказаться промежуточном или заблокированном состоянии то есть перед продолжением работы её потребуется восстановить командой svn cleanup или пересоздать заново локальные удалённые формы команд все команды клиента subversion можно разделить на следующие группы модифицирующие рабочую копию модифицирующие хранилище модифицирующие рабочую копию хранилище не модифицирующие ничего структура хранилища структура проекта хранилище формально subversion не накладывает каких либо ограничений на файловую структуру проекта она может быть какой угодно рамках правил именования объектов файловой системы тем не менее существуют рекомендации призванные облегчить работу ветвями метками простейшем случае корневом каталоге хранилища рекомендуется создать как минимум три подкаталога trunk branches tags вся файловая структура проекта основной линии разработки должна содержаться подкаталоге trunk подкаталог branches должен содержать ветви проекта tags метки например следующая структура каталогов хранилища trunk branches branch_ tags tag_ tag_ предполагает наличие проекта trunk одной ветви branch_ двух меток tag_ tag_ каждый из этих каталог trunk branch_ tag_ tag_ содержит копию соответствующей версии проекта если под проектов хранилище несколько то такая структура подкаталогов создается для каждого под проекта project trunk branches tags project trunk branches tags то есть корневом каталоге находятся каталоги проектов каждом из них есть свои trunk branches tags относящиеся только этому проекту описанные структуры каталогов хранилища являются лишь примерами на практике хранилище можно организовать таким способом который оптимально подходит данном конкретном случае другим способом хранения нескольких проектов является создание нескольких хранилищ разных хранилищах следует располагать проекты которые никак не связаны между собой поскольку между хранилищами нельзя будет выполнить операции копирования перемещения слияния несколько хранилищ можно при необходимости объединить одно сохранением истории ревизий путём импорта командой svnadmin load параметром parent dir ветви subversion использует файловую модель такую же как perforce для реализации ветвей меток то есть ветвь является обычным каталогом можно также сделать ветвь из одного файла не каталога новая ветвь создаётся командой svn copy ветвь может быть создана любом каталоге хранилища однако имеет смысл придерживаться описанных выше соглашений том где создавать новые ветви более подробная информация ветвях приведена разделах ветвление слияние метки создание метки также производится командой svn copy то есть технически не отличается от создания ветви отличие только способе использования предполагается что никто не будет изменять данные метке фиксировать неё изменения например на рис метка создана ревизии каталог trunk из ревизии скопирован под именем tags теперь если не изменять данные каталоге tags то он навсегда останется точной копией каталога trunk то есть будет меткой концепция меток используемая subversion отличается от концепции меток других системах управления версиями обычно метка является символическим именем которое адресует набор файлов их состояние subversion метка копирует набор файлов их состояние метки копии subversion имеют свои достоинства недостатки достоинства метка видна структуре каталогов можно сделать удобную древовидную организацию меток недостатки трудно узнать какие метки вошёл файл то же для каталога если права доступа установлены индивидуально для каталогов то метка эти права не наследует содержимое метки может быть изменено если из метки создать рабочую копию зафиксировать из этой рабочей копии какие либо изменения то это изменит саму метку не те данные которые были помечены правильным способом работы от метки является создание рабочей копии не из метки из того что является источником этой метки свойства properties одной из важных возможностей subversion является поддержка свойств то есть текстовых пар имя значение которые могут быть установлены для объектов хранилище свойства используются двух различных контекстах для объектов файловой системы для ревизий свойства объектов файловой системы каждому файлу или каталогу хранилище может быть присвоен набор свойств изменения свойств сохраняются истории так же как изменения файловой системе пользователи могут устанавливать свойства любыми именами существует также набор служебных свойств которые используются клиентской программой subversion имена служебных свойств имеют префикс svn свойства файлов svn executable делает файл исполняемым для рабочих копий под операционными системами семейства unix svn mime type хранит mime тип файла влияет на способ работы команд показывающих разницу файлов также объединяющих изменения merging svn keywords список ключевых слов которые будут заменены файле значениями чтобы замена произошла ключевое слово должно присутствовать файле виде keyword используется для того чтобы автоматически обновлять файле значения меняющиеся от версии версии например номер ревизии svn eol style определяет правило преобразования символов конца строки текстовом файле используется случаях когда файл должен иметь конкретный тип символов eol обычно используется native при этом тип символов конца строки соответствует принятому той операционной системе которой происходит создание рабочей копии svn needs lock означает что при извлечении из хранилища файл будет доступен только для чтения это свойство предназначено для использования совместно механизмом блокировки запрет записи файл является напоминанием того что надо получить блокировку на этот файл прежде чем его редактировать при получении блокировки клиентская программа subversion автоматически делает файл доступным для записи снятие блокировки снова делает файл защищённым от модификаций блокировки могут быть использованы без установки этого свойства однако делать это не рекомендуется так как существует риск того что другой пользователь может начать редактировать заблокированный файл это обнаружится только при фиксации изменений svn special свойство не предназначено для установки или модификации пользователями настоящее время используется для хранения символьных ссылок репозитории когда символьная ссылка добавляется репозиторий репозитории создаётся файл установленным свойством svn special когда этот файл извлекается unix подобной системе клиентская программа subversion преобразует его обратно ссылку svn mergeinfo хранит информацию том из каких путей было произведено слияние этот файл свойство введено версии оно используется для отслеживания слияний представляет собой набор строк вида имя_файла здесь имя_файла полное путём от корня файловой системы репозитория имя файла или каталога откуда было произведено слияние указанного диапазона ревизий строки модифицируются автоматически при операциях слияния при последующих слияниях subversion учитывает ранее вписанные строки избегая тем самым повторных слияний одних тех же изменений не рекомендуется изменять свойство svn mergeinfo вручную это может нарушить механизм отслеживания слияний свойства каталогов svn ignore список шаблонов имён файлов каталогов которые клиентская программа subversion будет игнорировать данном каталоге это свойство аналогично файлу cvsignore cvs как правило свойство настраивается таким образом чтобы клиентская программа не видела файлы каталоги которые автоматически создаются различными программами не должны быть версионированы например объектные файлы временные файлы действие этого свойства не на подкаталоги svn externals позволяет автоматически извлечь рабочую копию набор каталогов указав их url можно даже из другого хранилища svn mergeinfo то же что для файлов свойства ревизий второй тип объектов для которых существуют свойства это сами ревизии этом случае имена свойств также могут быть любыми некоторые свойства префиксом svn имеют специальное значение отличие свойств ревизий от свойств объектов файловой системы том что для первых понятие истории версий не применимо поскольку конкретное значение свойства приписано одной ревизии другими словами свойства ревизий можно изменить но старое значение при этом теряется по умолчанию изменение свойств ревизий запрещено для разрешения администратор должен создать скрипт обработки события pre revprop change svn date дата время создания ревизии svn author имя пользователя который зафиксировал изменения вошедшие эту ревизию svn log описание изменений зафиксированных этой ревизии текст введённый пользователем при фиксации изменений как правило свойства ревизий изменяются только администратором хранилища целях исправления некорректных данных например если пользователь забыл указать текстовое описание при фиксации своих изменений то администратор может создать это описание путём редактирования свойства svn log использование subversion рабочий цикл типичная итерация рабочего цикла subversion включает следующие этапы обновление рабочей копии из хранилища svn update или её создание svn checkout изменение рабочей копии изменения каталогов информации файлах производится средствами subversion изменении же содержимого файлов subversion никак не задействован изменения производятся программами для этого текстовые редакторы средства разработки новые ещё не зафиксированные хранилище файлы каталоги нужно добавить команда svn add то есть передать под управление версиями если файл или каталог рабочей копии нужно удалить переименовать переместить или скопировать необходимо использовать средства subversion svn mkdir svn delete svn move svn copy просмотр состояния рабочей копии локальных ещё не зафиксированных изменений svn info svn status svn diff любые локальные изменения если они признаны неудачными можно откатить svn revert при необходимости дополнительное обновление для получения изменений зафиксированных хранилище другими пользователями слияния этих изменений со своими svn update фиксация своих изменений или результатов слияния хранилище svn commit ветвление ветвление является важным аспектом работы систем управления версиями поскольку типичные приёмы управления версиями по крайней мере при разработке программного обеспечения включают себя использование ветвей subversion обладает достаточно развитыми возможностями для ветвления слияния однако не поддерживает слияние переименованных файлов каталогов рис пример эволюции ветвей subversion на рис условно показан пример эволюции ветвей хранилище зелёным цветом показана основная линия разработки проекта жёлтым ветви синим метки пурпурным ветвь разработка которой прекращена красными стрелками показаны слияния изменений создание ветвей новая ветвь также метка создаётся командой svn copy которая создаёт хранилище копию наследованием истории ревизий источника операция для создания ветвей всегда следует использовать удалённую форму команды svn copy например полученная копия будет ветвью или меткой зависимости от способа работы ней дальнейшем изменения сделанные на ветви могут быть внесены источник из которого была создана эта ветвь такое распространение изменений называется слияние операции копирования subversion дешёвые то есть требуют небольшого фиксированного количества времени дискового пространства хранилище спроектировано таким образом что при любом копировании происходит не дублирование данных создание ссылки на источник аналогично жёсткой ссылке однако этот механизм чисто внутренний точки зрения пользователя происходит именно создание копии благодаря высокой эффективности создания ветвей их можно создавать настолько часто насколько это необходимо однако слияние необходимое дополнение ветвлению выполняется subversion медленнее чем других современных системах управления версиями работа ветвями целом работа на ветви не отличается от работы на основной линии разработки trunk специфичные команды требуются только для действий которых задействовано более одной ветви таким командам относятся помимо команды создания ветви svn copy svn switch переключение рабочей копии на другую ветвь используется для того чтобы переключить имеющуюся рабочую копию на другую ветвь результате переключения служебные данные рабочей копии изменяются так как будто эта рабочая копия получена операцией svn checkout из той ветви на которую она переключена при этом объём сетевого трафика меньше чем при svn checkout так как передается только разница между данными рабочей копии целевой ветвью svn merge копирование набора изменений между ветвями используется для слияния как правило полный цикл работы ветвями включает следующие этапы создание ветви svn copy переключение имеющейся рабочей копии на ветвь svn switch или создание новой рабочей копии путём закачки svn checkout изменение файлов каталогов рабочей копии фиксация этих изменений svn commit копирование ветвь свежих изменений из родительской ветви сделанных после ветвления svn merge svn commit копирование изменений из ветви родительскую ветвь svn merge svn commit удаление ветви svn delete если её жизненный цикл закончен слияние копирование изменений между ветвями слияние subversion это применение ветви набора изменений сделанных на другой или той же самой ветви для осуществления слияния необходимо использовать команду svn merge она применяет набор изменений рабочей копии затем нужно зафиксировать внесённые изменения svn commit терминология связанная со слиянием несколько запутана термин слияние является не совсем точным поскольку как такового объединения ветвей не происходит кроме того не следует отождествлять слияние команду svn merge во первых для слияния нужно выполнить помимо svn merge разрешение конфликтов фиксацию во вторых применение svn merge не ограничивается слиянием другие применения команды svn merge команду svn merge можно использовать не только для слияния фактически команда производит внесение рабочую копию изменений равных разнице между двумя каталогами или файлами хранилище поэтому svn merge является универсальным средством для переноса изменений можно привести такие примеры использования команды svn merge откат уже зафиксированных изменений том числе целого диапазона ревизий удобный просмотр виде изменений рабочей копии разницы между двумя состояниями репозитория создание хранилища для создания хранилища используется команда svnadmin create эта операция создаст пустое хранилище указанном каталоге subversion cvs сравнение ниже приведено сравнение параметров систем subversion cvs так как subversion позиционируется именно как улучшение cvs приведено сравнение только по тем параметрам по которым эти системы отличаются целом subversion превосходит cvs по всем параметрам кроме поддержки меток общепринятом смысле то есть меток адресующих объекты файловой системы параметр subversion cvs возможности каталоги отслеживает версии не только файлов но каталогов версии каталогов не отслеживаются то есть структура каталогов одна та же та которая существует хранилище на данный момент для всех ревизий всех веток если изменить структуру каталогов то при извлечении старых состояний получаем правильные старые ревизии файлов но неправильной существующей на момент извлечения структуре каталогов транзакции атомарность многофайловых фиксаций атомарность только на уровне однофайловых фиксаций фактически фиксация изменений нескольких файлах разбивается на фиксаций изменений отдельных файлов если такая фиксаций прервана то часть файлов остаётся зафиксированной часть не зафиксированной наборы изменений наборы изменений поддерживаются наборы изменений не поддерживаются модификации имён файлов поддерживает копирование перемещение переименование файлов каталогов без потери истории изменений при копировании перемещении переименовании файлов файл новым именем не имеет никакой истории то есть связь со старым именем его историей версий полностью теряется то же самое для файлов внутри каталога при модификации его имени свойства properties каждым файлом каталогом может быть связан произвольный набор свойств состоящих из названия значения свойства тоже находятся под управлением версиями свойства не поддерживаются блокировки поддерживается необязательная блокировка файлов начиная версии блокировки не поддерживаются но есть похожий механизм называемый слежение ветви ветви branch см словарь реализованы пространстве путей это значит что для создания ветви производится копирование каталога копия будет ветвью создание таких копий быстрая не ресурсоёмкая операция потому что данные не дублируются вместо этого фиксируется новая версия отличающаяся от предыдущей лишь расположением файлов ветви реализованы третьем измерении это значит что файл на ветви адресуется тремя параметрами путём файловой системе ревизией или другим способом указания ревизии например временем именем ветви метки нет меток tag см словарь как таковых вместо них используется иерархия каталогов для метки создаётся отдельный каталог как для ветви метка это ветвь которой по договорённости больше не делают изменений метка является копией помеченного состояния файлов каталогов метки поддерживаются метка адресует помеченное состояние файлов эффективность клиент серверный обмен при любых обновлениях версий между клиентом сервером передаются только различия между файлами что может существенно уменьшить сетевой трафик сервера клиенту передаются различия клиента на сервер объект передаётся полностью двоичные файлы одинаково эффективно работает как текстовыми так двоичными файлами работа двоичными файлами менее эффективна каждая новая версия сохраняется хранилище полностью создание ветвей меток требуется небольшое фиксированное количество времени дискового пространства затраты времени велики зависят от количества задействованных файлов имена ветвей меток хранятся избыточно во всех задействованных файлах накладные расходы рабочей копии служебных каталогах рабочей копии хранится чистая копия поэтому операции просмотра отката локальных изменений выполняются быстро без обращения хранилищу однако размер рабочей копии на диске примерно два раза больше чем размер самих данных чистая копия не хранится размер рабочей копии примерно равен размеру данных вследствие этого операции просмотра отката локальных изменений требуют доступа хранилищу выполняются медленно расход памяти на сервере меньше больше миграция cvs на subversion преобразование репозитория существует программа cvs svn предназначенная для преобразования репозитория cvs готовый репозиторий subversion либо репозиторий git или текстовый дамп который можно затем импортировать репозиторий при помощи утилиты svnadmin при этом cvs svn сохраняет всю информацию содержащуюся репозитории cvs ветви метки описания изменений имена авторов даты фиксации изменений кроме того изменения различных файлах зафиксированные совместно преобразуются одну ревизию отличия использовании различия работе файлами cvs операции по перемещению переименованию копированию файлов каталогов выполняются повторным добавлением объекта новым именем при перемещении переименовании удалением старого объекта при такой работе файлы каталоги хранилище создаются заново теряют историю изменений subversion для выполнения этих операций должны использоваться команды перемещения move или mv копирования copy их использование сохраняет историю изменений позволяет избежать лишних операций особенности при операциях каталогами или даже ветками файловой системы отличие от cvs некоторые операции рабочей копии например удаление перемещение файла subversion выполняет самостоятельно описанные другие отличия при работе файлами рабочей копии просуммированы следующей таблице операция commit там где она нужна обоих случаях опущена операция cvs subversion заметки удаление файла rm filecvs rm file svn rm file файл не нужно предварительно удалять вручную удаление файлов по маске rm cvs rm file file svn rm файлы не нужно предварительно удалять вручнуюне нужно перечисления всех файлов переименование перемещение mv file file cvs rm file cvs add file svn mv file file файл не нужно перемещать вручнуюистория файла сохраняется копирование cp file file cvs add file svn copy file file файл не нужно копировать вручнуюистория файла сохраняется разветвляется добавление создание каталога mkdir dircvs add dir svn mkdir dirsvn commit каталог можно не создавать вручнуюпосле добавления каталога необходим commit добавление каталога файлами cvs add dircd dircvs add file file svn add dir каталог добавляется содержащимися нём файлами переименование каталога файлами без подкаталогов mkdir dir cvs add dir mv dir dir cvs rm dir file dir file cvs add dir svn mv dir dir не нужно создавать добавлять каталогине нужно перемещать файлы вручнуюне нужно перечисления всех файловистория файлов сохраняется переименование ветки файловой системы каталоги файлами подкаталогами повторять команды вышедля каждого уровня вложенностиили каждого подкаталога svn mv dir dir см вышене зависит от количества уровней каталогов адресация состояния хранилища subversion для адресации состояния хранилища не обязательно создавать метки или использовать дату время простых случаях например для получения версии после определенной фиксации будет проще указать нужный номер ревизии внутренняя структура уровни subversion спроектирован как набор библиотек разделённых на несколько уровней каждый из них выполняет конкретную задачу позволяет разработчикам создавать свои собственные инструменты зависимости от сложности задачи fs самый низкий уровень реализует файловую систему которая хранит данные repos уровень хранилища реализованного на файловой системе на этом уровне реализовано множество вспомогательных функций также поддерживается запуск обработчиков то есть скриптов которые запускаются при наступлении некоторого события вместе уровни fs repos составляют интерфейс файловой системы mod_dav_svn обеспечивает webdav delta доступ через apache ra реализует доступ хранилищу локальный удалённый начиная этого уровня на хранилище можно ссылаться по url то есть file path для локального доступа или для доступа через webdav или или svn ssh host path для доступа через протокол svn client wc самый высокий уровень абстрагирует доступ хранилищу обеспечивает выполнение типичных задач клиента таких как аутентификация пользователя или сравнение версий client использует библиотеку wc для управления локальной рабочей копией конфигурация клиента стандартная клиентская утилита subversion svn конфигурируется переменными окружения ini файлами создаваемыми домашнем каталоге пользователя подкаталоге subversion расположение конфигурации windows системах файлах или реестре зависит от системных настроек конфигурации svn также кеширует ssl сертификаты логины пароли если это не запрещено конфигурации для доступа серверам subversion содержимое каталога subversion файл servers содержит информацию способах сетевого подключения удалённому репозиторию файл config содержит прочую информацию каталог auth содержит кеш серверов сертификатов логинов паролей файл readme txt документация по svn недостатки проблемы при переименовании файлов subversion не всегда может правильно обработать операции переименования файлов если одновременно переименованием изменяется содержимое файла проблемы могут также возникнуть если файл переименованный локальной копии кто то другой изменил хранилище часть этих проблем исправлена версии однако это решение пока не полное слабая поддержка слияния ветвей также слабым местом subversion считают операции слияния веток до версии все такие операции пользователям приходилось отслеживать вручную помощью подробных записей журнале изменений начиная версии появилась базовая поддержка автоматического отслеживания слияний которую разработчики планируют улучшить последующих релизах настоящее время subversion достаточно хорошо поддерживает типовые сценарии слияния более сложных случаях возможны проблемы рекомендуется организовать рабочий процесс так чтобы избежать проблемных сценариев слияние переименованных файлов каталогов не поддерживается невозможность удаления данных из хранилища информация однажды помещённая хранилище subversion остаётся там навсегда файл можно удалить текущей ревизии но всегда есть возможность получить из хранилища одну из предыдущих ревизий которых файл существовал хотя сохранность прошлых ревизий является собственно целью использования систем управления версиями иногда бывает необходимо полностью удалить из хранилища информацию попавшую туда по ошибке subversion не предусмотрено для этого никакого штатного способа единственная возможность заключается создании дампа хранилища его обработке штатной утилитой svndumpfilter последующем восстановлении хранилища из дампа существуют также сторонние программы для автоматизации этого процесса но любом случае для выполнения этой операции требуется временное прекращение доступа хранилищу вмешательство администратора привилегиями достаточно высокими для того чтобы полностью стереть старое хранилище заменить его новым дополнительное программное обеспечение клиенты rapidsvn клиент subversion на smartsvn клиент subversion на java tortoisesvn клиент subversion реализованный как расширение для проводника windows rabbitvcs клиент subversion реализованный как расширение для файлового менеджера linux ранее назывался nautilussvn kdesvn графический клиент subversion составе набора приложений kde software compilation visualsvn расширение для microsoft visual studio плагины ankhsvn плагин для microsoft visual studio visualsvn плагин для microsoft visual studio pushok svn scc proxy плагин для microsoft scc subclipse плагин для eclipse subversive плагин для eclipse magnetsvn плагин для microsoft office веб интерфейсы trac инструмент основанный на технологии wiki redmine дополнительно отслеживает ошибки usvn утилита для создания управления доступом репозиториям под svn viewvc websvn svnmanager php утилита для управления репозиториями создание удаление загрузка выгрузка управление пользователями группами submin утилита для управления репозиториями пользователями включая управление контролем доступа отдельным каталогам репозитории сравнительная таблица веб интерфейсы наименование описание язык бд лицензия сайт обновление версия trac инструмент основанный на технологии wiki python sqlite postgresql mysql mariadb лицензия bsd trac edgewall org redmine дополнительно отслеживает ошибки ruby mysql postgresql sqlite oracle gnu general public license redmine org usvn утилита для создания управления доступом репозиториям под svn php mysql sqllite cecill gpl совместимая лицензия www usvn info viewvc без управления пользователями не требует поддержки dav web сервером python mysql two clause berkeley style www viewvc org websvn интерфейс просмотра svn php xml gnu gpl websvn tigris org svnmanager утилита для управления репозиториями создание удаление загрузка выгрузка управление пользователями группами php mysql or sqlite svnmanager sourceforge net submin mit утилита для управления репозиториями пользователями включая управление контролем доступа отдельным каталогам репозитории python mit примечания ссылки официальная книга по subversion русский язык бен коллинз сассман брайан фицпатрик майкл пилато управление версиями subversion статьи на collabnet subversion community john ferguson smart merging and branching in subversion version control and the бен коллинз сассман будущем subversion распределённых системах русский перевод статьи статья без дизайна иконок репозиторий subversion на своем компьютере категория fsf unesco категория кросс платформенное программное обеспечение категория программное обеспечение для macos категория программное обеспечение для windows категория программное обеспечение для linux категория свободное программное обеспечение написанное на си