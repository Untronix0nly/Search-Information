erlang функциональный язык сильной динамической типизацией предназначенный для создания распределённых вычислительных систем разработан поддерживается компанией ericsson язык включает себя средства порождения параллельных легковесных процессов их взаимодействия через обмен асинхронными сообщениями соответствии моделью акторов erlang был целенаправленно разработан для применения распределённых параллельных системах реального времени для которых кроме средств самого языка имеется стандартная библиотека модулей библиотека шаблонных решений так называемых поведений фреймворк otp программа на erlang транслируется байт код исполняемый виртуальными машинами находящимися на различных узлах распределённой вычислительной сети erlang системы поддерживают горячую замену кода что позволяет эксплуатировать оборудование безостановочно свой синтаксис некоторые концепции erlang унаследовал от языка логического пролог язык поддерживает многие типы данных условные конструкции сопоставление образцом обработку исключений списковые включения выражения битовых строк функции анонимные функции функции высшего порядка рекурсивные определения функций оптимизацию хвостовой рекурсии модули приём отправку сообщений между процессами препроцессор поддерживает работу макросами включение заголовочных файлов популярность erlang начала расти связи расширением его области применения системы на параллельные распределённые системы обслуживающие миллионы пользователей www такие как чаты системы управления содержимым веб серверы распределённые требующие масштабирования базы данных erlang применяется нескольких nosql базах данных высокой доступности история середине компьютерной лаборатории компании ericsson исследовали применимость существовавших на тот момент языков для программного обеспечения систем джо армстронг joe armstrong роберт вирдинг robert virding майк вильямс mike williams под руководством бьярне деккера bjarne däcker написав прототипы программ на различных языках пришли выводу что ни один из этих языков не имел полного набора возможностей необходимых области систем результате был создан новый язык erlang своё название язык вероятно получил честь датского математика инженера агнера эрланга основателя научного направления по изучению сетевого трафика системах по другой версии название языка изначально было сокращением от ericsson language влияние на erlang оказали ml миранда ада модула chill пролог кроме того на способ обновления программного обеспечения повлиял smalltalk использованные ericsson проприетарные языки eripascal plex потребовалось четыре года развития языка использованием виртуальной машины пролога после чего году майк вильямс переписал виртуальную машину для erlang на си году erlang был впервые использован коммерческом проекте году вышла новая версия erlang вобравшая накопившийся тому моменту опыт использования языка язык был сочтён достаточно развитым для использования других продуктах компании решения для широкополосной связи gprs atm декабре года случилось событие которое джо армстронг считает решающим для erlang проект axe ellemtel по созданию нового маршрутизатора как оборудования так системного программного обеспечения на потерпел неудачу результате реорганизации проекта удалось использовав разработанное оборудование язык erlang начать работы над atm серии axd ресурсов лаборатории для такого проекта оказалось недостаточно поэтому для работ по erlang было создано подразделение под названием otp open telecom platform году увидел свет одноимённый фреймворк otp неожиданно году топ менеджмент ericsson решил не брать на себя обязательств по разработке поддержке собственного языка вместо этого на java использование erlang было запрещено новых проектах ericsson radio ab связи реализацией плана по аутсорсингу программной технологии компании rational inc это решение очень сильно повлияло на будущее erlang оно привело открытию кода erlang под открытой лицензией epl аналог mozilla public license также послужило главной причиной начала распространения языка за пределами создавшей его компании основным возражением против открытия исходного кода являлось решение вопросов касающихся патентов но эти трудности были преодолены вскоре многие из основных разработчиков покинули ericsson чтобы организовать собственный бизнес bluetail ab начале учёные круги стали проявлять интерес erlang года стал проводиться ежегодный erlang workshop ericsson продолжал спонсирование проекта hipe от erlang уппсальского университета проект hipe занимался эффективной реализацией языка инструментами для проверки типов года созданный группе проекта компилятор машинный код входит поставку свободно версии erlang otp работы связанные erlang ведут другие высшие учебные заведения инструменты для рефакторинга созданы кентском университете великобритании университете ло ранда твёша венгрии инструменты для различных видов тестирования мадридском политехническом университете техническом университете чалмерса гётеборгском университете когда системы симметричной только начинали завоёвывать рынок серверов настольных компьютеров бросая вызов разработчикам программного обеспечения уже году первая версия erlang поддержкой smp была выпущена совместными усилиями команды otp из ericsson команды hipe вскоре после этого вышла первая почти за десятилетие крупная монография по erlang programming erlang джо армстронга после чего многие разработчики открыли для себя erlang otp язык стал набирать популярность процесс развития языка включает себя рассмотрение предложений по развитию eep через эти предложения erlang сообщество вносит изменения стандартную поставку erlang внесёнными предложениями можно ознакомиться на веб странице erlang org eeps философия по свидетельству майка вильямса erlang задумывался для решения трёх проблем разработки распределённых систем мягкого реального времени высокой степенью параллелизма возможности быстрой эффективной разработки по получения системы устойчивой программным аппаратным сбоям возможности обновления системы на лету без простоя оборудования по словам вильямса философия которой придерживались разработчики erlang подходит для разработки программного обеспечения на этом языке найдите наиболее подходящие методы проектируйте использованием прототипов одних идей мало нужно уметь их реализовать знать как они работают делайте ошибки небольшом масштабе не проекте большинство языков созданных прежде erlang были разработаны без нахождения своей области применения тогда как erlang был разработан специально на основе требований распределённым параллельным системам реального времени развитием сети интернет оказалось что многие приложения имеют аналогичные требования чем объясняется растущий интерес языку высокая кроется применении изолированных друг от друга легковесных процессов связанных лишь механизмом обмена сообщениями сигналами выхода принцип разработчиков на erlang по отношению обработке ошибочных ситуаций процессах можно выразить виде высказывания позвольте приложению упасть пускай что то другое имеет этим дело или сокращённо let it crash пусть падает связано это тем что erlang системе легко следить за завершением процесса завершать процессы связанные со сбойным запускать новые процессы основные особенности высокоуровневые конструкции erlang является декларативным языком который скорее используется для описания того что должно быть вычислено нежели как например определение функции которое использует сопоставление образцом для выбора одного из вариантов вычисления или извлечения элемента данных из составной структуры напоминает уравнение сопоставление образцом распространено даже на битовые строки что упрощает реализацию протоколов функции являются объектами первого класса erlang языке также широко применяются характерные для функциональной парадигмы списковые включения генераторы списков параллельные вычисления обмен сообщениями между процессами erlang отличительной особенностью языка является применение легковесных процессов соответствии моделью акторов такой подход позволяет выполнять одновременно сотни тысяч даже миллионы таких процессов каждый из которых может иметь скромные требования по памяти процессы изолированы друг от друга не имеют общего состояния но между ними можно установить связь получать сообщения об их состоянии для взаимодействия процессов используется асинхронный обмен сообщениями каждый процесс имеет свою очередь сообщений обработка которой использует сопоставление образцом процесс отправивший сообщение не получает уведомления доставке даже если идентификатор процесса получателя недействителен или получатель игнорирует сообщение таким образом ответственность за правильно организованное взаимодействие между процессами лежит на разработчике например при реализация на erlang сетевого чата структура программы может напрямую отражать одновременность действий пользователей по обмену сообщениями путём запуска новых процессов эффективность передачи сообщений сохраняется при увеличении числа процессов требования памяти минимизируются за счёт того что легковесными процессами управляет виртуальная машина не средства нижележащей операционной системы распределённые вычисления erlang самого начала проектировался для распределённых вычислений распределение вычислений встроено синтаксис семантику языка поэтому построение системы можно вести абстрагируясь от конкретного места вычислений стандартной поставке erlang может наладить связь процессов по протоколу tcp ip независимо от поддерживаемых им нижележащих платформ операционных систем работающий экземпляр среды выполнения erlang называется узлом программы написанные на erlang способны работать на нескольких узлах узлами могут быть процессоры многие ядра одного процессора даже целый кластер машин узел имеет имя знает существовании других узлов на данной машине или сети создание взаимодействие процессов разных узлов не отличается от организации взаимодействия процессов внутри узла для создания процесса на другом узле процессу достаточно знать его имя без особых на то оснований он может не интересоваться физическим расположением ним процесса синтаксис отправки сообщения процессу на своём узле удалённом один тот же благодаря встроенным язык возможностям распределённых вычислений объединение кластер балансировка нагрузки добавление узлов серверов повышение надёжности вызывают лишь небольшие затраты на дополнительный код по умолчанию узлы спроектированы для работы внутри обособленного сегмента сети dmz но если необходимо коммуникация между узлами может происходить применением защищённого методами протокола ssl мягкое реальное время программы на высокоуровневом языке erlang могут быть использованы системах мягкого реального времени которое иногда переводят как псевдореальное или квазиреальное управление памятью сборка мусора действуют рамках одного процесса что даёт возможность создавать системы миллисекундным временем отклика даже несмотря на необходимость сборки мусора не испытывающие ухудшения пропускной способности при высокой нагрузке горячая замена кода для систем которые не могут быть остановлены для обновления кода erlang предлагает горячую замену кода при этом приложении могут одновременно работать старая новая версии кода таким способом программное обеспечение на erlang может быть модернизировано без простоев выявленные ошибки исправлены описание языка типы данных типизация erlang является сильной динамической динамическая типизация была выбрана для языка erlang по причине того что первые разработчики были больше ней знакомы по мнению джо армстронга статическая типизация потребовала бы очень больших трудозатрат частности реализовать систему горячей дозагрузки кода было бы крайне затруднительно такая типизация при которой возможные ошибки типов выявляются только во время выполнения тем не менее не помешала создавать системы очень высоким уровнем доступности данные erlang являются неизменяемыми операции не переписывают старые значения находящиеся памяти если необходимо модули на erlang можно снабдить описаниями определениями новых типов не влияющими на компиляцию программы для автоматической проверки типов помощью утилиты dialyzer числа erlang есть два типа числовых литералов целые плавающей запятой например кроме обычной нотации числа можно задавать через символ ascii например означает или вместе указанием системы счисления основанием от до старых версиях до например erlang применяются целые числа произвольной точности действительные числа двойной точности бита стандарте ieee для работы числами можно использовать модуль math который содержит обычный набор математических функций функцию math pi возвращающую число пример вычислений интерактивной оболочке erlang erts source bit smp async threads kernel poll false eshell abort with math cos math pi random uniform атомы атом константа именем которая должна быть заключена одинарные кавычки если не начинается со строчной буквы или содержит знаки кроме букв цифр подчёркивания точки символа понятие атома заимствовано из пролога его можно считать аналогом перечислений enum других языках без необходимости предварительной декларации атомы используются почти исключительно сравнениях имеющих erlang очень эффективную реализацию кроме того некоторые атомы имеют определённый смысл возращаемых значениях описании исключений ним относятся error ignore noreply ok reply stop undefined битовые строки бинарные данные битовая строка используется для хранения памяти данных строки состоящие из целого количества октетов называются бинарными или двоичными данными синтаксис описания битовой строки довольно гибок так как описывает значения битов отдельных диапазонов может быть снабжён модификатором типа несколько примеров интерактивной командной оболочке выражения битовых строк аналогичны списковым включениям но работают над битовыми строками этом примере переменная последовательно получает биты числа которые затем инвертируются операцией битового отрицания bnot от результате чего получается число кортеж кортеж составной тип данных фиксированным количеством элементов при доступе элементам кортежа помощью встроенных функций нумерация элементов начинается единицы не нуля первый элемент кортежа принято использовать для указания роли кортежа программе если первый элемент атом его называют тегом метка erlang принято строить различные типы данных на основе кортежей тегами что облегчает отладку программы считается хорошим стилем для работы кортежами есть несколько встроенных функций например tuple_size element setelement список список составной тип данных содержащий переменное число элементов для манипуляции со списками можно применять функции модуля lists стандартной библиотеки формально список определяется как имеющий голову хвост что выражается синтаксически виде tail где хвост обычно является списком возможно пустым пустой список обозначается списки можно записывать более привычным способом следующие записи эквивалентны для работы со списками можно применять списковые включения генераторы списков например модуль lists стандартной библиотеки содержит функции для обработки списков строк так как erlang строка является списком такие как нахождение максимума сортировка изменение порядка элементов на противоположный суммирование элементов следующем примере два списка склеиваются операцией конкатенации затем разбиваются на две части функцией lists split lists split модуле lists имеется также набор функций высшего порядка таких как lists all lists any lists dropwhile lists filter lists foldl lists foldr lists map lists foreach следующий пример иллюстрирует работу функции lists foldr свернуть от правая для свёртки списка первым параметром которой должна быть функция fun end функция деление на fun lists foldr результат выполнения свёртки справа налево строке тождественен цепочечному делению строка второй параметр foldr даёт начальное значение для так называемого аккумулятора для каждого элемента списка справа налево элементу аккумулятору применяется функция заданная первым аргументом foldr значение записывается аккумулятор по исчерпанию списка функция возвращает значение аккумулятора функция является достаточно мощным средством если учесть что аккумулятор может быть списком или кортежем строка erlang нет типа для строк внутренне строки представляются списками синтаксически строку можно задать кавычками так привет равносилен подходящей кодировке списку erlang поддерживает unicode как строке так записи отдельного знака через атомы строки внешне достаточно похожи но имеют совершенно различные реализации тогда как атомы можно только сравнивать строки поддерживают многие другие операции для них есть множество функций модулях lists string строка может выполнять функции атома но память занимаемая строкой пропорциональна её длине тогда как атомы хранятся системной таблице на каждое использование атома программе приходится лишь пара байтов вне зависимости от длины атома сравнение двух атомов это сравнение двух внутренних идентификаторов выполняемое за одну операцию тогда как сравнение строк предполагает поэлементный проход элементов строк логические значения для значений истина ложь erlang применяются атомы true истина false ложь которые используются операциями сравнения логическими операциями встроенными функциями пример is_boolean false функциональный объект fun fun выражение позволяет создать анонимную функцию например для передачи качестве параметра другим функциям помощью fun можно также получить функциональный объект для функции из модуля примеры lists map fun end belongs fun lists member fun belongs true запись чтобы помечать отдельные элементы кортежей избежать ошибок при написании программы erlang был внесён синтаксис записей для работы записями необходимо начале дать описание записи директивой record например для записи user описание может быть следующим record user login anon password nick из этого описания компилятор узнаёт что имеются виду кортежи из четырёх элементов которых элементы со второго по четвёртый соответствуют полям login password nick порядок важен записи именем user определяется атомом первом элементе кортежа значением по умолчанию для поля login является строка anon если значение по умолчанию не указано явно подразумевается атом undefined создание записей извлечение элементов записи всегда требует явного указания имени записи user все поля получают значения по умолчанию user login user password secret nick john все поля получили значения синтаксис доступа значениям полей записи user login user nick ассоциативный массив ассоциативный массив словарь хранит пары вида ключ значение качестве как ключа так значения может выступать любой терм erlang map hi key hi maps find key map ok другие типы языке erlang имеются другие типы данных тип ссылка является практически уникальной среде времени выполнения erlang ссылка создаётся вызовом функции make_ref может повториться через вызовов этой функции ссылки можно сравнивать на равенство применяются они для одноразовых пометок или волшебного печенья идентификатор порта определяет порт для связи внешним по отношению erlang системе миром порт позволяет создавшему его процессу владельцу так называемому присоединённому процессу обмениваться бинарными сообщениями со сторонними программами ос способом принятым данной операционной системе идентификатор процесса как следует из его названия идентифицирует процесс порождаемый различными функциями spawn идентификатор можно считать уникальным во время работы erlang системы но долго работающих системах могут всё таки быть использованы повторно что обычно не является проблемой на практике встроенные функции для работы типами для преобразования типов используются встроенные функции bif от вида x_to_y из для проверки принадлежности значения тому или иному типу функции вида is_x является atom_to_list hello hello list_to_binary world tuple_to_list is_integer true is_tuple abc false is_integer false операции арифметические операции erlang предоставляет наиболее арифметические операции для целых чисел чисел плавающей запятой обозначение выполняемая операция пример результат примера унарный плюс унарный минус сложение вычитание умножение деление div целочисленное деление div rem целочисленное деление остатком rem все эти операции унарные операции имеют наивысший приоритет затем следует умножение деление наименьший приоритет сложения вычитания при необходимости целое может приводиться типу плавающей запятой битовые операции битовые операции работают над целыми числами дают результате целое число обозначение выполняемая операция пример результат примера bnot побитовое отрицание bnot band побитовое band bor побитовое или bor bxor побитовое исключающее или bxor bsr побитовый сдвиг вправо bsr bsl побитовый сдвиг влево bsl логические операции логические операции работают над логическими значениями true истина false ложь получаемыми результате сравнений применения функций проверки типа обозначение выполняемая операция пример результат примера not отрицание не not true false and конъюнкция true and true andalso аналогично and но не вычисляет второй операнд если первый false false andalso false or дизъюнкция или is_atom or is_atom false orelse аналогично or но не вычисляет второй операнд если первый true true orelse true xor исключающее или true xor true false операции сравнения операции сравнения получают два операнда результатом операции является логическое значение true или false erlang есть следующие операции равно не равно меньше или равно меньше больше больше или равно также сравнения которые работают без приведения одному типу не равно точности равно точности можно сравнивать значения разных типов но они считаются erlang упорядоченными следующим образом число binomial prod prod prod prod prod этом примере область видимости всё описание функции binomial от присваивания до конца описания переменная во второй части клоза описания функции prod не имеет отношения переменной из binomial её область видимости до конца этого клоза при выходе вычислений за пределы области видимости переменной память занятая её содержимым может быть освобождена процессе сборки мусора если значение переменной не используется другой части программы сопоставление образцом сопоставление образцом используется erlang для присваивания том числе при работе параметрами функций управления потоком выполнения программы извлечения значений составных типов выбора сообщения из очереди левой части сравнения или заголовке функции могут находиться связанные уже имеющие значение несвязанные получающие значение переменные также литералы атомы числа строки результате исполнения сравнение может оказаться успешным этом случае переменные связываются со значениями неуспешным переменные остаются несвязанными образце могут быть переменные значение которых для образца безразлично их имена записываются начинающимися подчёркивания переменная именем подчёркивание сопоставляется любым значением но при этом не происходит связывания такую переменную можно применять много раз функции программы на erlang состоят из функций которые вызывают друг друга количество параметров функции называется арностью при вызове функции заголовочные части описания функции сопоставляются образцом случае совпадения параметров вызова формальные параметры связываются фактическими исполняется соответствующая часть тела функции запись варианта вычисления функции для некоторого образца может называется клозом от определение функции это набор из одного или более клозов для уточнения сопоставления образцов функциях можно использовать охранные выражения которые следуют после ключевого слова when примере ниже определена функция вычисления знака числа которая рассчитывается зависимости от сравнения параметра нулём sign when sign when sign when клозы erlang перебирает том порядке котором они записаны пока не будет найден подходящий заголовок охранных выражениях можно использовать только ограниченный набор встроенных функций так как эти функции не должны иметь побочных эффектов разумеется функции erlang поддерживают рекурсивные вызовы случае когда определение функции оканчивается рекурсивным вызовом хвостовая рекурсия erlang использует оптимизацию стек вызовов не применяется как параметром так результатом функции может быть другая функция следующем примере функция одного аргумента возвращает функцию для прибавления аргумента plus fun fun end end определение функции возвращающей функцию fun plus функция возвращает fun объект fun plus такой синтаксис не работает syntax error before plus дополнительные скобки позволяют добиться требуемого результата plus plus plus то же самое использование дополнительной переменной примеры вычисление факториала на erlang module fact export fac fac fac when is_integer fac алгоритм сортировки напоминающий быструю сортировку module qsort export qsort qsort тривиальный случай пустого списка qsort rest конкатенация списка элементов до pivot списка из одного элемента pivot после pivot qsort front pivot этом примере функция qsort вызывается рекурсивно до исчерпания всех элементов выражение front front собирает список front из элементов rest таких что элемент front меньше pivot оператор склеивает списки условные выражения кроме выбора описания определении функции erlang есть другие условные выражения case выражения выражение выбора if выражения выражение выбора позволяет организовать сопоставление образцом внутри функции обычно имеет следующий синтаксис case выражение выбора of образец when охрана выражение выражение образец when охрана выражение выражение образецn when охранаn выражениеn выражениеn end это выражение всегда возвращает значение соответствующее последнему вычисленному выражению строке подошедшим образцом это возвращаемое значение может служить возвращаемым значением функции может быть присвоено переменной как заголовочной части функции после образца может следовать охранное выражение упрощённым вариантом case выражения является if выражение if охрана выражение выражение охрана выражение выражение охранаn выражениеn выражениеn end здесь охранаi охранное выражение первое истинное охранное выражение вызывает выполнение соответствующих выражений последнее из которых является значением всего if выражение следует заметить что здесь охранном выражении можно применять только ограниченный набор операций встроенных функций запятые охранном выражении работают как операция and например if меньше или равно нулю больше нуля меньше десяти больше или равно десяти end компилятор erlang следит за безопасностью связывания переменных внутри условных выражений как видно из следующего примера модуля module badexample export broken_if broken_if if end при попытке откомпилировать модуль возникают сообщения об ошибках так как таком коде одна из переменных не связывается со значением badexample badexample erl variable unsafe in if line badexample erl variable unsafe in if line error правильным было бы определить все используемые далее по коду переменные во всех ветвях if выражения препроцессор макросы препроцессор erlang epp позволяет вкладывать файлы исходным кодом один другой определять макросы осуществлять простые макрос определяется помощью директивы define осуществляется указанием имени макроса возможных параметров после вопросительного знака следующий пример показывает определение применение макроса define zero is_zero when zero true is_zero false имя макроса обычно пишется прописными буквами определение макроса должно содержать лексемы erlang целиком например попытка задать часть имени переменной помощью макроса вызовет синтаксическую ошибку макросы могут использоваться для повышения удобочитаемости кода охранных выражениях для операторов отладки препроцессор имеет несколько макросов которые нельзя переопределить module module_string file line machine заголовочный файл расширение hrl определениями макросов записей можно включить при помощи директивы include обработка ошибок для обработки исключительных ситуаций erlang можно применять конструкцию try catch общем случае записываемую следующем виде try вычисляемое выражение of образец when охрана выражение образец when охрана выражение образецn when охранаn выражениеn catch класс образецискл when охранаискл выражениеискл классm образецисклm when охранаисклm выражениеисклm end как случае case выражения вычисляемое выражение сопоставляется образцом части между of catch для получения результата после ключевого слова catch следуют части обработки исключений которых дополнение образцам исключений могут быть указаны классы исключений перед двоеточием error throw exit подчёркивание может использоваться как образце так классе исключения следующий простой пример иллюстрирует перехват ошибки класса error при вычислении квадратного корня try math sqrt catch error error error error end error badarith try math sqrt catch error error error error end для создания исключений определённых пользователем используется функция throw которая принимает кортеж более детальным описанием возникшей ошибки генерирует исключение класса throw использование этой функции нежелательно из за ухудшения удобочитаемости кода программы но может потребоваться некоторых случаях при работе вложенными структурами данных например при разборе xml исключения класса exit возникают результате вызова встроенной функции exit или сигнала выхода до разработки ричардом карлссоном richard carlsson из команды проекта hipe описанного выше нового механизма обработки исключений появился версии erlang использовались catch выражения модули код программы на erlang можно разбить на отдельные модули модуль имя для набора функций организованных одном файле имя модуля должно совпадать именем файла если отбросить расширение модуль можно откомпилировать байт код как из командной строки операционной системы так из командной оболочки erlang файле модуля можно записать объявления функций директивы иногда называются атрибутами обязательным атрибутом является только module другой часто используемый атрибут export применяется для указания списка экспортируемых функций то есть функций которые можно использовать за пределами модуля функции erlang однозначно определяются модулем именем арностью например math cos соответствует функции cos из модуля math принимающей один аргумент вызвать функцию можно так math cos исходный текст модуля компилируется beam файл файл содержащий байт код виртуальной машины beam свою очередь erts система времени выполнения erlang выполняет этот код процессы основной абстракцией параллельного erlang является процесс процессы могут порождать другие процессы выполняться одновременно обмениваться сообщениями реагировать на завершение друг друга создание процессов для создания нового процесса служит несколько встроенных функций spawn её аналоги функции возвращают идентификатор процесса который может использоваться например для отправки сообщений вновь созданному процессу интерактивной консоли erl можно получить список процессов другую информацию посредством вызова функций processes соответственно отправка приём сообщений как язык оккам erlang использует для отправки сообщения синтаксис восклицательным знаком идпроцесса сообщение приём сообщения то есть извлечение его из очереди почтового ящика процесса выполняется помощью receive выражений обычно записываемых следующим образом receive образец when охрана выражение выражение образец when охрана выражение выражение образецn when охранаn выражениеn выражениеn выражение выражение end встретив такое выражение интерпретатор последовательно просматривает сообщения из очереди каждое сообщение интерпретатор сопоставляет образцом если оно удовлетворяет образцу вычисляются соответствующие выражения когда все сообщения перебраны подходящего не оказалось процесс блокируется ожидании новых сообщений после чего перебор очереди повторяется если receive выражении отсутствует образец которому удовлетворяет любое сообщение такое выражение называется выборочным receive выражением обработка ошибок завершение процессов процесс можно связать другим результате чего между процессами устанавливается двунаправленное соединение случае если один из процессов завершается ненормально всем связанным ним процессам передаётся сигнал выхода процессы получившие сигнал завершаются распространяя сигнал дальше сигнал выхода является кортежем элементами которого являются атом exit выход идентификатор завершившегося процесса причину завершения процесса причина завершения передаётся по цепочке завершающихся процессов процесс может осуществить перехват ошибки если него установлен флаг перехвата выхода такой процесс получает сигналы выхода связанных ним процессов виде обычных сообщений той же структурой кортежа перехваченный сигнала выхода более не передаётся связанным процессом перехватчиком процессам сигнал выхода причиной атомом normal нормальное завершение процесса не вызывает завершения связанного процесса если же причина атом kill процесс завершается безусловно независимо от флага перехвата выхода связанным ним процессам качестве причины отправляется атом killed что даёт им возможность среагировать erlang есть возможность установить соединение при завершении наблюдаемого процесса процесс наблюдатель получает сообщение указанием причины завершения процесс может остановить сам себя или другой процесс вызвав функцию exit ввод вывод планировщике процессов erlang системы проблема ввода вывода присущая многим другим языкам параллельного решена достаточно элегантно управление вводом выводом интегрированное планировщиком уже на самом нижнем уровне осуществляется на основе событий что позволяет программе обрабатывать входящие исходящие данные без излишних блокировок такой подход требует меньшего числа установки разрыва соединений также убирает необходимость блокировках переключениях контекста сожалению такой достаточно эффективный способ более сложен для понимания программистами находит применение основном системах явными требования по высокой доступности низкому времени отклика реализация событийно ввода вывода встроена erlang систему что является ещё одним преимуществом при проектировании параллельных приложений стандартная библиотека содержит модуль io функциями ввода вывода такие функции содержат побочные эффекты заключающиеся появлении выведенной информации на консоли или записывании данных файл на диске например функция io format для вывода выводит строку подстановкой параметров возвращая случае успеха атом ok io format пример вывода пример вывода ok функции модуля io включают себя стандартный серверный интерфейс ввода вывода протокол ввода вывода erlang детально определяет связь клиента сервера под сервером ввода вывода понимается процесс который обрабатывает запросы выполняет запрошенные команды например на устройстве ввода вывода клиентом является любой erlang процесс которому требуется работать устройством библиотеки стандартная библиотека модулей согласно официальной документации стандартная библиотека модулей stdlib является обязательной для включения минимальную систему erlang otp наряду ядром erlang библиотеку входят модули предоставляющие разнообразные функции для работы со встроенными типами другими структурами данных ввода вывода обращения среде окружения для работы файловой системой процессами модуль array определяет функциональный абстрактный тип данных для динамического массива имеет функции позволяющие извлекать обновлять элементы массива определять рекурсивные функции для работы массивами модуль string расширяет возможности модуля lists функциями для работы конкретно со списками символов какими являются строки erlang модуль dict от словарь содержит функции для ассоциативного массива позволяющие хранить извлекать удалять значения по ключу соединять массивы производить итерации по элементам математические функции можно найти модуле math функции для генерации псевдослучайных чисел содержатся модуле random модуль calendar предоставляет функции для григорианского календаря запросы текущей даты преобразования единиц измерения интервалов времени модуль timer содержит функции перевода интервалов времени миллисекундам запуска событий по таймеру другие связанные со временем функции модуль erlang содержит все встроенные функции erlang как общие так относящиеся виртуальной машине модуль file даёт доступ функциям файловой системы таким как открытие чтение запись удаление файлов модуль filename позволяет писать функции для манипуляции именами путями файлам абстрагируясь от конкретной операционной системы модуль io предоставляет функции ввода вывода кроме этих наиболее важных модулей стандартная библиотека содержит многие другие которыми можно познакомиться по документации таблицы ets dets для организации коллекций оперативной памяти erlang предлагает модуль ets ets хранилище термов erlang ets может хранить четыре вида коллекций множество упорядоченное множество мультимножество мультимножество повторениями доступ элементам коллекций происходит по ключевому полю кортежа ключи могут быть любых типов упорядоченные множества реализованы виде бинарных авл деревьев остальные коллекции использованием хэш таблиц dets таблицы дополняют ets таблиц за исключением упорядоченных множеств позволяя сохранять данные файлах фреймворк otp дерево процессов otp является хорошо отлаженным набором полезных поведений процессов используется для создания серверных приложений otp формализует действия процессов позволяет строить на их основе otp приложения не следует путать приложением готовым программным продуктом модулях отр определены общие шаблоны для конструирования параллельных приложений наиболее популярными поведениями являются обобщённый сервер наблюдатель но имеются другие конечный автомат обработчик событий otp содержит другое связующее программное обеспечение например субд mnesia otp поведения делятся на рабочие процессы выполняющие собственно обработку запросов процессов наблюдателей задачу последних входит слежение за рабочими процессами другими процессами наблюдателями потомками деревья наблюдателей составляют otp приложение документация по erlang определяет otp приложение как компонент реализующий некоторую которая может быть независимо запущена на исполнение остановлена как целое также повторно использована других системах разработчик приложения пишет код модулей функций обратного вызова которых находится специфичная для данного приложения часть хотя otp строго говоря не является частью языка erlang он настолько вошёл культуру практику разработчиков на erlang что подчас между ними сложно провести границу разработка графического интерфейса пользователя разработка приложений графическим интерфейсом пользователя не считая веб интерфейсов может вестись при помощи библиотеки wxerlang библиотеки wxwidgets портированной для erlang wxerlang входит стандартную поставку erlang otp wxwidgets написан на поэтому перед разработчиками wxerlang стояла задача выразить средствами erlang иерархию объектов несколько упрощая wxerlang классам соответствуют модули объектам ссылки макросам на соответствуют макросы erlang некоторые типы данных для которых были использованы классы представляются erlang помощью других типов данных например wxpoint задаётся виде кортежа из двух элементов события wxerlang могут быть обработаны erlang либо помощью функций обратного вызова либо более естественной среде erlang передачей сообщений на erlang интерактивная оболочка интерактивная оболочка erl отдельном окне интерактивная оболочка для erlang может быть вызвана unix подобных системах по команде erl windows werl оболочке можно вводить выражения получать результат их выполнения опробовать новый код заниматься интерактивной отладкой также управлять системой находящейся промышленной эксплуатации оболочке можно использовать дополнительные функции команды доступные только ней например команда осуществляет выход из оболочки завершением всего что делает erlang система оболочке можно вызвать break меню помощью unix подобных ос или windows этом меню есть различные команды том числе немедленный останов продолжение работы оболочке другие информационные вспомогательные команды для работы erlang системой комбинацией клавиш вызывается ещё одно командное меню помощью которого можно среди прочего остановить завесивший оболочку процесс вернуться оболочку затем оформление кода текст от знака процента до конца строки считается комментарием erlang генерация документации из исходного кода erlang может производиться системой edoc для кода модуля достаточно добавить определённым образом размеченный текст также файл overview edoc для документации уровня проекта последнем необязательно использовать знаки комментария инструменты для работы кодом на erlang например erlang режим emacs подразумевают некоторые соглашения по употреблению символов комментария так утроенный знак процента вызывает выравнивание по левому краю удвоенный выравнивание на уровне окружающего кода одиночный знак процента используется для обозначения комментария после кода конце строки разработчики erlang выработали определённые стилевые соглашения касающиеся организации оформления исходного кода например хорошим стилем считается понижение вложенности синтаксических структур написание коротких модулей менее строк кода функций не длиннее строк кода использование осмысленных имён для переменных функций типы анализ кода приложение dialyzer разработанное рамках проекта hipe входящее стандартную поставку позволяет выявить ошибки том числе ошибки типизации путём статического анализа кода программа typer написанная тобиасом линдалом tobias lindahl костисом сагонасом kostis sagonas является частью dialyzer эта программа позволяет проверять определения типов функций сверять указанный директиве spec тип функции её определением выполнить вывод типов программа typer выводит все типы соответствующие успешному применению функции общем случае лишь приблизительно более грубую сторону использование функции любым другим способом обязательно приведёт ошибке времени исполнения следующем примере показан синтаксис определения типа директива type объявление типа полей записи директива spec вместе определением функции type user_status disabled enabled статус один из двух атомов record user login anon string типы полей записи password string status user_status nickname string spec check_password string user ok error string объявление функции check_password password user определение функции dialyzer от анализатор противоречий для erlang программ выявляет коде отдельных модулей целых приложений избыточные проверки ошибки типов недостижимый код все выявленные инструментом дефекты требуют устранения так как инструмент не даёт ложных срабатываний для каждой функции всех проверяемых модулей dialyzer устанавливает тип используя основанный на ограничениях вывод типов анализ потоков данных после определения типов функций производится анализ противоречий программе тестирование профилирование рефакторинг erlang предоставляет eunit для модульного тестирования фреймворк common test для системного тестирования eunit содержит средства для описания тестов включая необходимый для этого набор макросов также производит вывод отчёта по окончании тестирования тестирование модулей происходит путём подключения заголовочного файла из eunit функции тестами могут быть как включены сам тестируемый модуль так вынесены отдельный тестирование параллельных программ можно выполнить помощью quviq quick check версия mini этого продукта доступна бесплатно кроме тестирования можно провести проверку всех возможных вариантов исходных данных помощью метода проверки моделей для этого можно воспользоваться созданной мадридском политехническом университете отдельно утилитой mcerlang для профилирования кода выявления степени покрытия кода тестами можно обратиться модулям eprof fprof cover утилите cprof для erlang разработаны несколько инструментов рефакторинга исходного кода такие как refactorerl wrangler также автоматическая независимая от ide утилита tidier утилита tidier позволяет автоматически находить производить эквивалентные преобразование кода например заменяет lists filter fun is_something end на эффективность как многие другие языки erlang имеет свои секреты написания эффективного кода языка делает некоторые из трюков устаревшими поэтому документация является лучшим руководством вопросах оптимизации совокупности профилированием стресс тестированием например при работе со списками не рекомендуется добавлять элемент конец длинного списка помощью конкатенации или функции добавления элемента списку вместо этого сто ит рассмотреть возможность добавления элемента начало списка конечный результат обработать функцией обращения порядка элементов списка свои рекомендации есть для увеличения эффективности параллельных программ например действия требующие много памяти лучше всего выделять отдельный процесс так как при этом затраты на сборку мусора будут минимальны память будет освобождена по завершению процесса erlang другие языки подробное сравнение возможностей erlang другими языками можно найти статье сравнение языков интеграция гибридные языки erlang система позволяет выполнять интеграцию системами на других языках имеются механизмы для сетевого взаимодействия си java лисп perl python ruby например для более эффективного синхронного вызова небольших функций на си можно использовать платформно зависимые функции высокоуровневые библиотеки позволяют erlang системе представлять или java узлы как обычные erlang узлы другие языки могут быть более тесно сопряжены со средой выполнения erlang помощью драйверов или сетевых сокетов посредством протоколов вроде http snmp iiop например ruby может erlang посредством пакета erlectricity для python разработана реализация erlang узла виде пакета py interface виртуальная машина erlang находит применение других языках например elixir проекте erl джо армстронга кроме того роберт вирдинг поддерживает проект lisp flavored erlang erlang приправленный лиспом котором синтаксис лиспа используется компилятором erlang есть другие beam языки efene joxa reia luerl erlog официальный сайт упоминает проект erjang котором используется виртуальная машина java сравнение erlang по хотя опытные erlang программисты давно заметили что их программы для тех же задач получаются более краткими по сравнению другими широко используемыми промышленности языками эмпирическое исследование показало что для изученных приложений код на erlang был на короче чем на системы при переписывании кода на erlang возросла почти на для одного из использованных исследовании проектов разница была объяснена написанием дополнительного кода рамках защитного управления памятью кода для высокоуровневой коммуникации то есть возможностями которые являются частью языка erlang библиотек otp сравнение взаимодействия процессов erlang go влияние теории процессов чарльза хоара чувствуется как go так erlang erlang процессы соответствии моделью акторов отправляют сообщения друг другу напрямую go то же самое происходит посредством каналов другим отличием является то что каналы go имеют типы erlang же нет типизации времени компиляции за исключением охранных выражений что позволяет посылать процессам сообщения любого типа но непонятое сообщение либо будет проигнорировано либо навсегда останется очереди go позволяет легко организовать группу go программ намёк на сопрограмма для получения сообщений из некоторого канала такой подход известен как пул потоков erlang при проектировании которого уделялось особое внимание детерминизму времени задержки реализация рабочего пула возможна но требует дополнительных усилий множественные отправители тривиально реализуются обоих языках erlang процесс может послать сообщение ждать на него ответ соответствующий некоторому образцу игнорируя другие сообщения очереди go такое невозможно но подобная может быть достигнута созданием том числе динамическим новых вводов то есть разделением каналов по назначению go требует явного указания того какие go программы будут другими передачей сообщений тогда как erlang отсутствует разделяемое между процессами изменяемое состояние поэтому изолированный процесс очень редко представляет интерес абстракции процессов достаточно похожи erlang go однако во избежание ошибок при переходе одного языка на другой следует учитывать нюансы шаблоны которые хороши одном языке могут не подходить для другого критика как любой язык erlang не свободен от недостатков погрешностям синтаксиса можно отнести зависимость от символа окончания выражения от контекста это может быть или что требует дополнительного внимания при перемене выражений местами излишнюю многословность записей тип записи приходится упоминать при каждом доступе члену записи необходимость полного перечисления альтернатив if выражении во избежание выбрасывания исключения если ни одно из условий не выполнено недостаткам можно отнести строго ограниченный набор функций которые можно использовать if выражениях этот недостаток можно обойти использованием case выражений функциональный стиль неизменяемые переменные приводят некоторых приложениях например тесты бо льшему количеству правок чем других языках так как вставка некоторой промежуточной обработки может потребовать новых имён переменных что может привести изменениям коде следующем далее по тексту из недостатков системы типов можно указать отсутствие строкового типа также невозможность динамически добавлять записи новые члены есть проблемы организацией исходного кода которая возможна только через создание нового файла также отсутствие пространств имён классов или других средств для организации кода уровень качества модулей за исключением основных документации оставляет желать лучшего один из создателей языка джо армстронг своём выступлении на конференции по истории языков году перечислил список областей которых erlang можно было бы улучшить использование сборки мусора для атомов улучшение средств сопряжения со внешним кодом усиление изоляции между процессами более избирательная система безопасности среди узлов erlang основанная на различной степени доверия отдельные обозначения для протоколов систем модули должны быть объектами первого класса массовое распространение erlang может сдерживать необычный для большинства программистов синтаксис использование функциональной парадигмы также то что наилучшая на год реализация языка использует виртуальную машину beam не более jvm сфера применения файл erlangstack png мини px типичная архитектура системы использующей erlang otp приложения erlang пользуются службами mnesia sasl агентами snmp мониторинга другими на базе фреймворка otp который свою очередь использует erts программы других систем поддерживаются меньшей степени силу своих особенностей erlang существующих библиотек модулей erlang подходит для создания сетевых серверов распределённых систем программ gui подобных им интерактивных программ инструментов для тестирования управления слежения общем приложений нерегулярным параллелизмом которых задачи достаточно разнообразны erlang не особенно хорош для написания кода содержащего интенсивные вычисления плавающей запятой требующего включения нативного кода конкретной платформы или сильной оптимизации также для создания приложений требующих синхронного параллельного выполнения задач не подходит erlang для проектов которых код должен исполняться на jvm или clr или проектов требующих множества библиотек из других систем можно сказать что erlang стал применяться для разработки облачных систем ещё до того как сформировалось само понятие облачных вычислений язык erlang используется масштабных интернет приложениях многими компаниями включая amazon ec реализацией simpledb сервис социальных закладок delicious facebook бэкенд для чата mobile сервис sms системы аутентификации серверное программное обеспечение whatsapp написано на erlang январе года серверы whatsapp под freebsd гб оперативной памяти смогли обрабатывать от до миллионов соединений erlang часто ставят заслугу легендарную надёжность atm коммутатора axd полтора миллиона строк кода на erlang полмиллиона на сети british telecom по данным ericsson момента установки январе года за несколько лет случилась только одна незначительная неполадка на основании чего надёжность системы по расчётам составила хотя более реальные оценки учитывающие многие другие факторы говорят всё таки пяти девятках успех маршрутизатора связывают легкодоступными средствами разработки надёжных параллельных вычислений встроенными erlang используется erlang приложениях открытым исходным кодом среди которых couchdb документо ориентированная база данных rest интерфейсом disco фреймворк для распределённых вычислений на основе парадигмы mapreduce ejabberd свободный gnu gpl распределённый устойчивый отказам jabber сервер написанный основном на erlang rabbitmq платформа ориентированная на обработку сообщений реализует amqp mqtt wings программа моделирования другие для erlang были написаны несколько веб серверов yaws cowboy также mochiweb библиотека для создания http серверов кроме того были созданы несколько веб фреймворков систем управления содержимым таких как nitrogen chicago boss zotonic также более не разрабатываемые активно beepbeep erlang web erlyweb среди другого известного программного обеспечения выполненного на erlang можно выделить распределённую nosql базу данных riak по принципам amazon dynamodb flussonic ранее известный как erlyvideo сервер поддерживающий несколько протоколов для стресс тестирования распределённых систем можно применять также распределённый написанный на erlang инструмент tsung который позволяет эмулировать тысячи при достаточном количестве тестовых серверов миллионы одновременных пользователей erlang практически идеально подходят для задач искусственного интеллекта особенно вычислительного интеллекта нейроэволюции основанных на нейронных сетях подобное применение возможно благодаря имеющимся erlang пяти ключевым свойствам языка нейронных сетей изолированные процессы нейроны параллелизм одновременность механизм обнаружения сбоев независимость от местоположения горячая замена кода примером такого применения является реализация одного из подходов нейроэволюции dxnn сообщество вокруг технологий erlang образовалось сообщество разработчиков не отказывающее поддержке новичкам исходный код erlang доступен через сервис совместной разработки github разработчики пользователи erlang могут общаться через список рассылки erlang questions вопросы по erlang или на irc канале erlang на freenode erlang factory www erlang factory com устраивает по всему миру мероприятия конференции среди которых конференция пользователей erlang erlang user conference специальная группа sigplan acm регулярно проводит erlang мастерскую erlang workshop конференция oscon включает секцию по erlang примечания источники литература на русском языке на английском языке статьи