демонстрация работы алгоритма алгоритм брезенхе ма это алгоритм определяющий какие точки двумерного растра нужно закрасить чтобы получить близкое приближение прямой линии между двумя заданными точками это один из старейших алгоритмов машинной графике он был разработан компании ibm году алгоритм широко используется частности для рисования линий на экране компьютера существует обобщение алгоритма брезенхэма для построения кривых го порядка алгоритм отрезок проводится между двумя точками где этих парах указаны столбец строка соответственно номера которых растут вправо вниз сначала мы будем предполагать что наша линия идёт вправо вниз причём горизонтальное расстояние превосходит вертикальное то есть наклон линии от горизонтали менее наша цель состоит том чтобы для каждого столбца между определить какая строка ближе всего линии нарисовать точку общая формула линии между двумя точками поскольку мы знаем колонку то строка получается округлением целому следующего значения однако вычислять точное значение этого выражения нет необходимости достаточно заметить что уменьшается от за каждый шаг мы добавляем единицу добавляем значение наклона нашем случае значение наклона будет отрицательным числом которое можно вычислить заранее более того на каждом шаге мы делаем одно из двух либо сохраняем тот же либо уменьшаем его на что из этих двух выбрать можно решить отслеживая значение ошибки которое означает вертикальное расстояние между текущим значением точным значением для текущего всякий раз когда мы увеличиваем мы увеличиваем значение ошибки на величину наклона приведённую выше если ошибка превысила линия стала ближе следующему поэтому мы уменьшаем на единицу одновременно уменьшая значение ошибки на реализации алгоритма приведённой ниже plot рисует точку abs возвращает абсолютную величину числа function line int deltax abs int deltay abs real error real deltaerr deltay deltax int int diry if diry diry if diry diry error error проблема такого подхода том что вещественными величинами такими как error deltaerr компьютеры работают относительно медленно кроме того при вычислениях плавающей точкой может накапливаться ошибка по этим причинам лучше работать только целыми числами это можно сделать если умножить все используемые вещественные величины на deltax единственная проблема константой но данном случае достаточно умножить обе части неравенства на получаем следующий код function line int deltax abs int deltay abs int error int deltaerr deltay int int diry if diry diry if diry deltax diry error error deltax умножение на для целых чисел представленных дополнительном коде можно реализовать битовым сдвигом влево однако если число отрицательное представленное прямом либо обратном кодах возможно возникновение искажений результата частности случае прямого кода при сдвиге может быть обнулён бит знака при представлении отрицательного числа обратном коде при битовом сдвиге влево станут равны нулю все младшие биты результата что приведёт его уменьшению увеличению абсолютного значения относительно ожидаемого теперь мы можем быстро рисовать линии направленные вправо вниз величиной наклона меньше осталось распространить алгоритм на рисование во всех направлениях это достигается за счёт зеркальных отражений то есть заменой знака шаг заменяется на обменом переменных обменом координат начала отрезка координатами конца рисование окружностей также существует алгоритм брезенхэма для рисования окружностей по методу построения он похож на рисование линии этом алгоритме строится дуга окружности для первого квадранта координаты точек окружности для остальных квадрантов получаются симметрично на каждом шаге алгоритма рассматриваются три пикселя из них выбирается наиболее подходящий путём сравнения расстояний от центра до выбранного пикселя радиусом окружности обрамить радиус координаты центра int int int delta int error while drawpixel drawpixel drawpixel drawpixel error delta if delta error delta continue delta литература см также алгоритмы построения отрезка алгоритм ву алгоритм dda линии категория геометрические алгоритмы