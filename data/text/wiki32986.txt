kerberos kɛərbərəs сетевой протокол аутентификации который предлагает механизм взаимной аутентификации клиента сервера перед установлением связи между ними причём протоколе учтён тот факт что начальный обмен информацией между клиентом сервером происходит незащищенной среде передаваемые пакеты могут быть перехвачены модифицированы история создания первая версия протокола kerberos была создана году массачусетском технологическом институте mit рамках проекта основной целью проекта являлась разработка плана по внедрению компьютеров учебный процесс mit сопутствующего этому по проект был образовательным но конечном итоге результат включил несколько программных продуктов которые широко используются сегодня например window system общедоступным этот протокол стал начиная версии основные концепции изложим основную концепцию протокола kerberos предположим что существует два человека знающие один тот же секрет известный только этим двоим тогда любой из них сможет легко убедиться что имеет дело со своим напарником для этого ему всего лишь придётся проверить знает ли его собеседник общий секрет пример пункт договоренность пароле пусть алиса общается бобом при этом боб использует информацию только тогда когда уверен что информация получена от алисы чтобы избежать подделки они договорились между собой пароле который знают только они вдвоём при получении сообщения боб может заключить из письма знает ли его собеседник пароль если собеседнику боба пароль известен то можно утверждать что его собеседником является алиса пункт возникновение проблемы передачи пароля теперь определим каким же образом алисе бобу показывать знание пароля конечно можно просто включить пароль текст письма например привет боб наш пароль если бы только боб алиса были уверены что их письма никто не читает тогда можно было бы воспользоваться этим способом но сожалению почта передается по сети которой работают другие пользователи среди которых есть любопытная ева ева поставила себе задачу выяснить пароль известный только бобу алисе при помощи которого они обмениваются сообщениями друг другом теперь совершенно ясно что нельзя указывать пароль просто тексте письма значит пароле нельзя говорить открыто но при этом надо дать знать собеседнику что пароль вам известен пункт решение проблемы передачи пароля протокол kerberos решает проблему передачи пароля проблема решается средствами криптографии секретным ключом вместо того чтобы сообщать друг другу пароль участники сеанса связи обмениваются ключом знание которого подтверждает личность собеседника но для того чтобы такая технология была возможна необходимо чтобы общий ключ был симметричным то есть ключ должен обеспечивать шифрование расшифровку сообщения пункт проблема обмена паролями при использовании простых протоколов типа описанного выше возникает одна важная проблема случае бобом алисой надо понять как они договариваются секретном ключе для переписки друг другом конечно люди могут встретиться парке договориться но ведь сетевых переговорах участвуют машины если под алисой понимать клиентскую программу под бобом службу на сетевом сервере то встретиться они никак не могут проблема состоит ещё том что когда клиенту надо посылать сообщение на несколько серверов этом случае для каждого сервера ей придётся обзавестись отдельным ключом серверу тогда потребуется столько секретных ключей сколько него клиентов необходимость хранить на каждом компьютере такое количество ключей создаёт риск для всей системы безопасности пункт решение проблемы обмена паролями для решения этих проблем проектом афина был разработан специальный протокол kerberos по аналогии древнегреческой мифологией этот протокол был назван честь трёхголового пса который защищал выход из царства аида цербера или более точно кербера трём головам цербера протоколе соответствуют три участника безопасной связи клиент сервер доверенный посредник между ними роль посредника здесь играет центр распределения ключей key distribution center kdc key distribution center kdc или tgs ticket granting server kdc это служба работающая на физически защищенном сервере kdc хранит базу данных информацией об учётных записях всех клиентов сети вместе информацией каждом абоненте базе kdc хранится ключ известный только этому абоненту службе kdc этот ключ служит для связи клиента центром обращение клиента серверу через kdc если клиент хочет обратиться серверу он посылает сообщение kdc kdc направляет каждому участнику сеанса копии сеансового ключа действующие течение небольшого промежутка времени назначение этих ключей проведение аутентификации клиента сервера копия сеансового ключа пересылаемая на сервер шифруется помощью долговременного ключа этого сервера направляемая клиенту долговременного ключа данного клиента теоретически для выполнения функций доверенного посредника центру kdc достаточно направить сеансовые ключи непосредственно абонентам безопасности однако на практике реализовать такую схему чрезвычайно сложно поэтому на практике применяется другая схема управления паролями которая делает протокол kerberos гораздо более эффективным сеансовые мандаты ответ на запрос клиента который намерен подключиться серверу служба kdc направляет обе копии сеансового ключа клиенту сообщение предназначенное клиенту шифруется посредством долговременного ключа общего для данного клиента kdc сеансовый ключ для сервера вместе информацией клиенте вкладывается блок данных получивший название сеансового мандата session ticket затем сеансовый мандат целиком шифруется помощью долговременного ключа который знают только служба kdc данный сервер после этого вся ответственность за обработку мандата несущего себе шифрованный сеансовый ключ возлагается на клиента который должен доставить его на сервер получив ответ kdc клиент извлекает из него мандат свою копию сеансового ключа которые помещает безопасное хранилище оно располагается не на диске оперативной памяти когда возникает необходимость связаться сервером клиент посылает ему сообщение состоящее из мандата который по прежнему зашифрован применением долговременного ключа этого сервера собственного аутентификатора зашифрованного посредством сеансового ключа этот мандат комбинации как раз составляет удостоверение по которому сервер определяет личность клиента сервер получив удостоверение личности клиента прежде всего помощью своего секретного ключа расшифровывает сеансовый мандат извлекает из него сеансовый ключ который затем использует для дешифрования аутентификатора клиента если все проходит нормально делается заключение что удостоверение клиента выдано доверенным посредником то есть службой kdc клиент может потребовать сервера проведения взаимной аутентификации этом случае сервер помощью своей копии сеансового ключа шифрует метку времени из аутентификатора клиента таком виде пересылает её клиенту качестве собственного аутентификатора одно из достоинств применения сеансовых мандатов состоит том что серверу не нужно хранить сеансовые ключи для связи клиентами они сохраняются кэш памяти удостоверений credentials cache клиента который направляет мандат на сервер каждый раз когда хочет связаться ним сервер со своей стороны получив от клиента мандат дешифрует его извлекает сеансовый ключ когда надобность этом ключе исчезает сервер может просто стереть его из своей памяти такой метод дает ещё одно преимущество клиента исчезает необходимость обращаться центру kdc перед каждым сеансом связи конкретным сервером сеансовые мандаты можно использовать многократно на случай же их хищения устанавливается срок годности мандата который kdc указывает самой структуре данных это время определяется политикой kerberos для конкретной области обычно срок годности мандатов не превышает восьми часов то есть стандартной одного сеанса работы сети когда пользователь отключается от неё кэш память удостоверений обнуляется все сеансовые мандаты вместе сеансовыми ключами уничтожаются развитие протокола ранние версии ранние версии kerberos по были созданы внутри мit использовались целях тестирования эти реализации содержали существенные ограничения были полезны только для изучения новых идей выявления проблем которые могли возникнуть во время разработки kerberos kerberos впервые была опубликована января года она стала первой версией за пределами mit подготовленной для нескольких производителей которые включили её свои операционные системы кроме того другие крупные проекты по распределённым системам например andrew file system использовали идеи kerberos для своих систем аутентификации основными разработчиками данной версии были стив миллер клиффорд ньюман основы того что должно было стать kerberos были описаны техническом плане афина окончательный вариант был закреплён исходном коде эталонной реализации опубликованной mit однако из за ограничений на экспорт программного обеспечения использующего шифрование наложенных американским правительством kerberos не мог быть распространён за пределами соединённых штатов так как kerberos при шифровании использовал алгоритм des организации за пределами сша не могли по закону использовать данное программное обеспечение ответ на это команда разработчиков из mit создала специальную версию kerberos исключив из неё весь код касающийся шифрования данные меры позволили обойти ограничение на экспорт позже эррол янг университете связи австралии bond university of australia добавил эту версию собственную реализацию des она называлась bones сокращение от encrypted bones могла свободно за пределами сша году было объявлено прекращении поддержки kerberos kerberos целью преодоления проблем безопасности предыдущей версии джоном колем клиффордом ньюманом была разработана версия протокола которая году была опубликована rfc по прошествии времени спецификацией начала заниматься ietf kerberos work group опубликованные ими документы включают себя характеристики шифрования контрольной суммы rfc продвинутый стандарт шифрования advanced encryption standard aes rfc kerberos the kerberos network authentication service rfc уточняет некоторые аспекты rfc намерен использоваться для более подробного четкого описания новое издание gss api спецификации the kerberos version generic security service application program interface gss api mechanism version rfc июне года был представлен rfc описывающий расширение для версии под названием pkinit данный rfc описывал как использовать асимметричное шифрование на этапе аутентификации клиента на следующий год mit сформировали kerberos консорциум kerberos consortium по содействию дальнейшему развитию использование распространение распространение реализации kerberos происходит рамках авторского права аналогичного правам для bsd настоящее время множество ос поддерживают данный протокол число которых входят windows более поздние версии которые используют kerberos как метод аутентификации домене между участниками некоторые дополнения этому протоколу отражены rfc microsoft windows kerberos change password and set password protocols документ rfc описывает использование rc kerberos windows различные unix unix подобные ос apple mac os red hat enterprise linux freebsd solaris aix openvms при этом существует две наиболее используемые реализации открытым исходным кодом mit kerberos heimdal последняя из которых была изначально создана швеции из за принцип работы kerberos файл kerberos png мини px этап аутентификации клиента kerberos значительной степени основан на протоколе нидхема шрёдера но двумя существенными изменениями первое изменение протокола уменьшало количество сообщений пересылаемых между клиентом сервером аутентификации второе более существенное изменение базового протокола заключается во введении tgt мандат для получения мандата концепции позволяющей пользователям нескольких сервисах используя свои доверительные данные только один раз как результат протокол kerberos содержит два логических компонента сервер аутентификации сокр са англ authentication server сокр as сервер выдачи мандатов или разрешений англ ticket granting server сокр tgs обычно эти компоненты поставляются как единая программа которая запускается на центре распределения ключей kdc содержит базу данных логинов паролей для пользователей сервисов использующих kerberos сервер аутентификации выполняет одну функцию получает запрос содержащий имя клиента запрашивающего аутентификацию возвращает ему зашифрованный tgt затем пользователь может использовать этот tgt для запроса дальнейших мандатов на другие сервисы большинстве реализаций kerberos время жизни tgt часов после этого клиент снова должен запросить его са первое сообщение отправляемое центру распределения ключей запрос са так же известен как as_req это сообщение отправляется открытым текстом содержит данные клиента метку времени клиента идентификатор сервера мандат tgs когда kdc получает as_req сообщение он проверяет что клиент от которого пришёл запрос существует его метка времени близка локальному времени kdc обычно минут данная проверка производится не для защиты от повторов сообщение посылается открытым текстом для проверки соответствия времени если хотя бы одна из проверок не проходит клиенту отправляется сообщение об ошибке он не случае удачной проверки са генерирует случайный сеансовый ключ который будет совместно использоваться клиентом tgs данный ключ защищает дальнейшие запросы мандатов tgs на другие сервисы kdc создает копии сессионного ключа одну для клиента одну для tgs затем kdc отвечает клиенту сообщением сервера аутентификации as_rep зашифрованным долгосрочным ключом клиента это сообщение включает tgt зашифрованный tgs ключом копию сессионного ключа для клиента время жизни мандата идентификатор tgs tgt содержит копию сессионного ключа для tgs идентификатор клиента время жизни мандата метку времени kdc ip адрес клиента этап авторизации клиента на tgs когда пользователь захочет получить доступ сервису он подготовит сообщение для tgs tgs_req содержащее части идентификатор сервиса копию tgt полученную ранее аутентификатор аутентификатор состоит из метки времени зашифрованной сессионным ключом полученным от са служит для защиты от повторов при получении запроса мандата от клиента kdc формирует новый сессионный ключ для взаимодействия клиент сервис затем отправляет ответное сообщение tgs_rep зашифрованное сессионным ключом полученным от са это сообщение содержит новый сеансовый ключ мандат сервиса зашифрованный долговременным ключом сервиса идентификатор сервиса время жизни мандата service ticket содержит копию нового сессионного ключа идентификатор клиента время жизни мандата локальное время kdc ip клиента детали последнего шага отправки мандата службы серверу приложений не kerberos поэтому его реализация полностью зависит от приложения kerberos kerberos является развитием четвертой версии включает всю предыдущую содержит множество расширений однако точки зрения реализации kerberos является абсолютно новым протоколом основной причиной появления пятой версии являлась невозможность расширения со временем атака полным перебором на des используемом kerberos стала актуальна но используемые поля сообщениях имели фиксированный размер использовать более стойкий алгоритм шифрования не представлялось возможным для решения данной проблемы было решено создать расширяемый протокол возможностью использования на различных платформах на основе технологии asn это позволило использовать транзакциях различные типы шифрования благодаря этому была реализована совместимость предыдущей версией кроме того kdc появляется возможность выбирать наиболее безопасный протокол шифрования поддерживаемый участвующими сторонами кроме того оригинальный протокол kerberos подвержен перебору по словарю данная уязвимость связана тем что kdc выдает по требованию зашифрованный tgt любому клиенту важность данной проблемы также подчеркивает то что пользователи обычно выбирают простые пароли чтобы усложнить проведение данной атаки kerberos было введено предварительное установление подлинности на данном этапе kdc требует чтобы пользователь удостоверил свою личность прежде чем ему будет выдан мандат за предварительную аутентификацию отвечает политика kdc если она требуется то пользователь при первом запросе са получит сообщение krb_error это сообщение скажет клиенту что необходимо отправлять as_req запрос со своими данными для установления подлинности если kdc не опознает их то пользователь получит другое сообщение krb_error сообщающее об ошибке tgt не будет выдан формальное описание протокол использует только симметричное шифрование предполагает что каждого корреспондента алисы боба есть общий секретный ключ третьей доверенной стороной трентом алиса направляет доверенной стороне тренту свой идентификатор боба трент генерирует два сообщения первое включает метку времени время жизни ключа новый сеансовый ключ для алисы боба идентификатор боба это сообщение шифруется общим ключом алисы трента второе сообщение содержит то же самое кроме идентификатора он заменён на идентификатор алисы само сообщение шифруется общим ключом трента боба алиса генерирует сообщение из собственного идентификатора метки времени после чего шифрует сообщение сеансовым ключом посылает бобу вместе со вторым сообщением от трента целях собственной аутентификации боб шифрует метку времени общим сеансовым ключом посылает её алисе важным предположением является часов всех участников протокола однако на практике используется синхронизация точностью до нескольких минут запоминанием истории передач целью обнаружения повтора течение некоторого времени подробное описание схема работы kerberos схема работы kerberos настоящее время происходит следующим образом вход пользователя систему пользователь вводит имя пароль на клиентской машине клиентская машина выполняет над паролем одностороннюю функцию обычно хэш результат становится секретным ключом клиента пользователя аутентификация клиента клиент отсылает запрос as_req на са для получения верительных данных последующего их предоставления tgs серверу впоследствии он будет их использовать для получения мандатов без дополнительных запросов на применение секретного ключа пользователя данный запрос содержит идентификатор клиента его метка времени идентификатор сервера если политика kdc требует предварительной аутентификации то пользователь получает сообщение krb_error ответ на которое посылает повторный запрос но уже данными для установления подлинности са проверяет есть ли такой клиент базе если есть то назад са отправляет сообщение as_rep включающее сессионный ключ клиент tgs идентификатор tgs время жизни мандата зашифрованные секретным ключом клиента tgt который включает идентификатор сетевой адрес клиента метку времени kdc период действия мандата сессионный ключ клиент tgs зашифрованный секретным ключом tgs если же нет то клиент получает новое сообщение говорящее произошедшей ошибке получив сообщение клиент расшифровывает свою часть для получения сессионного ключа клиент tgs этот сессионный ключ используется для дальнейшего обмена сервером tgs важно клиент не может расшифровать tgt так как оно зашифровано секретным ключом tgs этот момент пользователя достаточно данных чтобы авторизоваться на tgs авторизация клиента на tgs для запроса сервиса клиент формирует запрос на tgs tgs_req содержащий следующие данные tgt полученный ранее идентификатор сервиса аутентификатор составленный из id клиента временного штампа зашифрованный на сессионном ключе клиент tgs после получения tgs_req tgs извлекает из него tgt расшифровывает его используя секретный ключ tgs это дает ему сессионный ключ клиент tgs им он расшифровывает аутентификатор затем он генерирует сессионный ключ клиент сервис посылает ответ tgs_rep включающий мандат сервиса который содержит id клиента сетевой адрес клиента метку времени kdc время действия мандата сессионный ключ клиент сервис зашифрованный секретным ключом сервиса сессионный ключ клиент сервис идентификатор сервиса время жизни мандата зашифрованные на сессионном ключе client tgs запрос сервиса клиентом после получения tgs_rep клиента достаточно информации для авторизации на сервисе клиент соединяется ним посылает сообщение содержащее зашифрованный мандат сервиса полученный ранее новый аутентификатор зашифрованный на сессионном ключе клиент сервис включающий id клиента метку времени сервис расшифровывает мандат используя свой секретный ключ получает сессионный ключ клиент сервис используя новый ключ он расшифровывает аутентификатор посылает клиенту следующее сообщение для подтверждения готовности обслужить клиента показать что сервер действительно является тем за кого себя выдает метку времени указанную клиентом зашифрованную на сессионном ключе клиент сервис клиент расшифровывает подтверждение используя сессионный ключ клиент сервис проверяет действительно ли метка времени корректно обновлена если это так то клиент может доверять серверу может начать посылать запросы на сервер сервер предоставляет клиенту требуемый сервис pkinit расширение pkinit затронуло этап предварительной аутентификации клиента после чего она стала происходить следующим образом пользователь системе предъявляет свой закрытый ключ клиентская машина формирует запрос на са as_req котором указывает что будет использоваться асимметричное шифрование отличие данного запроса заключается том что он подписывается помощью закрытого ключа клиента кроме стандартной информации содержит сертификат открытого ключа пользователя получив запрос kdc сначала проверяет достоверность сертификата пользователя затем электронную подпись используя полученный открытый ключ пользователя после этого kdc проверяет локальное время присланное запросе для защиты от повторов удостоверившись подлинности клиента kdc формирует ответ as_rep котором отличие от стандартной версии сеансовый ключ зашифровывается открытым ключом пользователя кроме того ответ содержит сертификат kdc подписывается его закрытым ключом аналогично запросу клиента получив ответ пользователь проверяет подпись kdc расшифровывает свой сеансовый ключ используя свой закрытый дальнейшие этапы происходят согласно стандартному описанию kerberos см также технология единого входа identity management spnego key srp secure remote password protocol gss api generic security services application program interface host identity protocol hip примечания литература ссылки http www ixbt com comm kerberos shtml http www oszone net kerberos rfc rfc категория аутентификация категория протоколы категория криптография