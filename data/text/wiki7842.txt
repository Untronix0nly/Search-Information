bash от каламбур возрождённый shell вариация командной оболочки bourne shell одна из наиболее популярных современных разновидностей командной оболочки unix особенно популярна среде linux где она часто используется качестве командной оболочки bash это командный процессор работающий как правило интерактивном режиме текстовом окне bash также может читать команды из файла который называется скриптом или сценарием как все unix оболочки он поддерживает автодополнение имён файлов каталогов подстановку вывода результата команд переменные контроль за порядком выполнения операторы ветвления цикла ключевые слова синтаксис другие основные особенности языка были заимствованы из sh другие функции например история были скопированы из csh ksh bash основном соответствует стандарту posix но рядом расширений название bash является акронимом от ещё одна командная оболочка борна представляет собой игру слов bourne shell одна из популярных разновидностей командной оболочки для unix sh автором которой является стивен борн году брайаном фоксом фамилия bourne борн перекликается английским словом означающим родившийся отсюда рождённая вновь командная оболочка сентябре года bash была обнаружена широко эксплуатируемая уязвимость bashdoor отличия синтаксисе подавляющее большинство важных скриптов командного процессора bourne могут выполняться без изменения bash за исключением тех которые ссылаются на специальные переменные bourne или используют встроенные команды bourne синтаксис команд bash включает идеи заимствованные korn shell ksh shell csh такие как редактирование командной строки история команд стек каталогов переменные random ppid синтаксис замены команды когда bash используется как интерактивный командный процессор он поддерживает автозавершение имён программ файлов переменных помощью клавиши внутренние команды интерпретатор bash имеет множество встроенных команд часть из которых имеют аналогичные исполняемые файлы операционной системе однако следует обратить внимание что чаще всего для встроенных команд отсутствуют man страницы при попытке просмотра справки по встроенной команде на самом деле будет выдаваться справка по исполняемому файлу исполняемый файл встроенная команда могут отличаться параметрами информация по встроенным командам расписана справочной странице bash man bash ввод вывод echo выводит выражение или содержимое переменной stdout но имеет ограничения использовании printf команда вывода расширенный вариант команды echo read читает значение переменной со стандартного ввода stdin интерактивном режиме это клавиатура файловая система cd изменяет текущий каталог pwd выводит название текущего рабочего каталога от pushd изменяет текущий каталог возможностью возврата обратном порядке popd возвращает текущий каталог после pushd dirs выводит или очищает содержимое стека каталогов сохранённых через pushd действия над переменными let производит арифметические операции над переменными eval транслирует список аргументов из списка команды set изменяет значения внутренних переменных скрипта unset удаляет переменную export экспортирует переменную делая её доступной дочерним процессам declare typeset задают или накладывают ограничения на переменные getopts используется для разбора аргументов передаваемых скрипту из командной строки управление сценарием source точка запуск указанного сценария exit безусловное завершение работы сценария exec заменяет текущий процесс новым запускаемым командой exec shopt позволяет изменять ключи опции оболочки на лету команды true возвращает код завершения ноль успешное завершение false возвращает код завершения который свидетельствует неудаче type prog выводит полный путь prog hash prog запоминает путь prog help command выводит краткую справку по использованию внутренней команды command управление запущенными командной оболочке задачами jobs показывает список запущенных командной оболочке задач либо информацию конкретной задаче по её номеру fg переключает поток ввода на текущую задачу или на определённую задачу если указан её номер продолжает её исполнение bg продолжает исполнение текущей задачи или определённых задач если указаны их номера фоновом режиме wait ожидает завершения указанных задач скрипты простейшем случае скрипт простой список команд записанный файл командный процессор должен знать что он должен этот файл обработать не просто прочесть его содержимое для этого служит специальная конструкция называемая shebang символ задаёт комментарий но данном случае shebang означает что после этого спецсимвола находится путь интерпретатору для исполнения сценария синтаксис синтаксис команд bash это расширенный синтаксис команд bourne shell окончательная спецификация синтаксиса команд bash есть bash reference manual проектом gnu hello world usr bin env bash echo hello world этот скрипт содержит только две строки первая строка сообщает системе том какая программа используется для запуска файла вторая строка это единственное действие которое выполняется этим скриптом он собственно печатает hello world терминале запуск скрипта для того чтобы скрипт стал исполняемым могут быть использованы следующие команды chmod rx scriptname выдача прав на чтение исполнение любому пользователю chmod rx scriptname выдача прав на чтение исполнение только владельцу скрипта из соображений безопасности путь текущему каталогу не включён переменную окружения path поэтому для запуска скрипта необходимо явно указывать путь текущему каталогу котором находится скрипт scriptname кроме того передать такой файл на исполнение интерпретатору bash можно явно используя команду bash bash scriptname этом случае не требуется ни установка прав доступа ни использование коде перенаправление ввода вывода bash есть встроенные файловые дескрипторы stdin stdout stderr stdin стандартный ввод то что набирает пользователь консоли stdout стандартный вывод программы stderr стандартный вывод ошибок для операций этими дескрипторами существуют специальные символы перенаправление вывода перенаправление ввода символы могут предварять номер дескриптора например перенаправление дескриптора stderr дескриптор stdout или перенаправление ввода из файла filename filename или filename перенаправление вывода файл filename если отключена опция noclobber то файл поступающими данными filename перенаправление вывода файл filename файл поступающими данными filename или filename перенаправление вывода файл filename данные добавляются конец файла при отсутствии файла он создаётся filename перенаправление стандартного вывода ошибок файл filename filename перенаправление стандартного вывода ошибок файл filename данные добавляются конец файла при отсутствии файла он создаётся filename перенаправление вывода ошибок файл filename перенаправление вывода ошибок на стандартный вывод bash имеет индивидуальный синтаксис перенаправления который не поддерживается bourne shell пример одновременного перенаправления стандартного вывода стандартных ошибок command file это проще набрать чем эквивалентную команду синтаксисе bourne shell command file перенаправление из кода скрипта поддерживается heredoc синтаксис интерпретацией переменных конструкций языка внутри блока многострочный command без интерпретации переменных command удалением начальных отступов поддерживаются только отступы табуляцией command начиная версии bash может перенаправлять стандартный ввод из строки используя следующий синтаксис here strings command если строка содержит пробелы её следует заключить кавычки или апострофы либо экранировать пробелы обратной косой чертой будьте внимательны вводимая использованием here strings строка содержит неявную завершения строки либо дополнительный байт line feed либо дополнительных байта carriage return line feed cat начиная версии стало возможным указывать одной строке терминирующую символов сразу за ней скобку это может быть полезно для присвоения переменной содержимого here doc var cat при этом bash будет сгенерировано предупреждающее сообщение перенаправление для процесса целом пример перенаправление стандартного вывода файл запись данных закрытие файла сброс stdout make filedescriptor fd copy of stdout fd exec open file test data for writing exec test data produce some content echo data data data close file test data exec make stdout copy of fd reset stdout exec close fd exec открытие закрытие файлов open file test data for reading exec подстановка вывода команд захват вывода внешних команд выполнить date поместить результат var var date echo var выведет дату на момент вызова предыдущей строки при этом не поддерживаются строки нуль символом заключительные переводы строк пропадают отличие от каналов прочего файлового ввода вывода условный оператор usr bin env bash foo bar if then echo условие выполняется else echo условие не выполняется fi обратите внимание что кавычки вокруг левой части необязательны циклы usr bin env bash for in номер do echo done usr bin env bash counter while counter lt do echo the counter is counter let counter counter done usr bin env bash until eq do echo done usr bin env bash внутри двойных круглых скобок переменные можно писать си стиле без разделяя пробелом операторы операнды for массивы bash реализованы только одномерные массивы индексами могут быть как целочисленные значения обычный массив так строки ассоциативный массив или хеш несмотря на унификацию синтаксиса для работы обычными ассоциативными массивами первые не являются разновидностью вторых ни точки зрения конечного пользователя ни точки зрения внутренней логики самого интерпретатора как естественное следствие поддержки ассоциативных ключей bash существует крайне ограниченная возможность эмуляции многомерных массивов общие операции получить строку состоящую из всех элементов массива разделённых пробелом values arr получить строку со всеми индексами или ключами массива независимо от того численные они или текстовые keys arr осуществить массовую замену первого вхождения подстроки may на march во всех элементах массива вернуть строку составленную из результирующих элементов массива разделённых пробелом values arr may march то же самое но каждом элементе массива будут заменены все вхождения подстроки may values arr may march до сих пор не все заявленные документации возможности правильно работают для массивов например имя_массива неправильно срабатывает для пустого массива операции массивами bash имеет поддержку одномерных массивов элементы массива можно виде my_arrayxx также можно явно объявить массив сценарии помощью директивы declare declare my_array обращаться отдельным элементам массива можно помощью фигурных скобок my_arrayxx индексированный массив можно двумя способами array element element element temp_array element temp_array element temp_array elementn добавление элементов конец массива declare arranimals arranimals dog elephant horse cow fox koala turtle выводим содержимое массива echo arranimals конец массива arranimals добавляем новый элемент pig arranimals pig снова показываем содержимое массива echo arranimals получить первый элемент массива echo arranimals как индексированные так ассоциативные массивы поддерживают так называемые срезы ещё один способ получить первый элемент массива echo arranimals вывести элемента массива начиная со го echo arranimals примечание случае ассоциативными массивами порядок следования значений общем случае будет случайным определяется используемой хеш функцей поэтому операция среза на ассоциативном массиве хотя допустима но имеет крайне ограниченную область практического применения массивах числовыми индексами допустима обратная негативная адресация позволяющая получить доступ элементам начиная конца массива значение последнего элемента массива echo arranimals значение предпоследнего элемента массива echo arranimals помощью встроенной команды mapfile синоним readarray можно отображать содержимое текстового файла индексированный массив declare filewithlogins mapfile filewithlogins операции ассоциативными массивами начиная версии bash появилась поддержка ассоциативных массивов так называемых hash массивов для объявления ассоциативных массивов используется ключ встроенной команды declare declare hsharray как случае массивами для заполнения ассоциативных массивов могут использоваться два различных синтаксиса tbilisi canberra islamabad thecapitalof georgia tbilisi australia canberra pakistan islamabad помощью ассоциативных массивов можно имитировать поддержку многомерных массивов declare объявляет ассоциативный массив инициализация нескольких индексов присвоение значения ячейку echo вывод хранимых значений из сожалению текущих версиях bash скопировать содержимое одного ассоциативного массива другой простым присваиванием невозможно данную проблему можно только обойти для чего существуют два принципиально разных подхода эмулировать объявление второго хеша нуля путём копирования объявления первого хеша declare hsh hsh source перебрать все элементы хеша источника скопировать их целевой хеш declare hsh hsh hsh for in hsh do hsh hsh done безопасная работа массивами массивы являются удобным способом передачи динамически генерированных аргументов функции или команды при этом каждый элемент массива представляет собой отдельный аргумент args ls args ls ls args ls ls args ls однако при подобном использовании массивов следует быть осторожным ввиду особенностей раскрытия массивов при использовании качестве индексов специальных символов если массив заключён кавычки раскрывается помощью индекса то образуется строка из слов где каждое слово отдельный элемент массива однако если не заключить раскрытие массива двойные кавычки то может получиться совсем другой результат пробелы входящие состав элементов массива становятся разделителями слов args home user рабочий стол ls args просмотр содержимого каталога home user рабочий стол ls args ошибка каталогов home user рабочий стол не существует массив индексом заключённый двойные кавычки раскрывается одну строку соединяя все элементы массива через разделители хранимые переменной ifs если не указать двойные кавычки то массив раскрывается аналогично раскрытию при использовании индекса args usr local bin ifs ls args просмотр содержимого каталога usr local bin ifs ls args поочерёдный просмотр содержимого каталогов usr local bin при создании массива из содержимого текстовой переменной необходимо учитывать возможное наличие пробелов тексте например качестве одного из способов создания массива из строки перечислением можно рассматривать замену символа разделителя на пробел однако наличие пробелов разделяемых элементах приведёт дроблению самих элементов на части array text неправильно текст переменной text мог содержать пробельные символы ifs array text правильно раздельтельным символом является запятая ifs read array ошибкам может привести создание массива из текста полученного качестве вывода команд или из файла не только переводы строк но также пробелы символы табуляции по умолчанию будут считаться разделителями array ls неправильно пробелы названии файлов могут разбить имя файла на два элемента массива ifs array ls правильно разделителем будет только перевод строк mapfile array конвейер конвейер передаёт вывод предыдущей команды на ввод следующей или на вход командного интерпретатора метод часто используется для связывания команд единую цепочку конвейер обозначается символом пример grep работает как фильтр для стандартного вывода cat filename grep pattern логические операции логическое или обозначается операциях проверки условий оператор возвращает success если один из операндов имеет значение true истина логическое обозначается операциях проверки условий оператор возвращает success тогда только тогда когда оба операнда имеют значение true истина примечание возможная путаница понимании возникает из за того что команда true успешное завершение любой команды завершается кодом возврата success false наоборот не то время как логическое значение true false отлично от нуля равно нулю примеры if false then echo successfully else echo unsuccessfully fi unsuccessfully let echo echo код завершения команды значение переменной результат логической операции if then echo true else echo false fi false let echo echo код завершения команды значение переменной результат логической операции if then echo true else echo false fi true false echo успешное завершение echo неуспешное завершение неуспешное завершение целочисленная математика bash может выполнять целочисленные вычисления внутри процесса используя команду синтаксис переменной как показано ниже var устанавливаем переменную var равной var var добавляем единицу переменной var обратите внимание на отсутствие знака var сокращённая форма записи инкремента var другой способ увеличения var на единицу выполняет префиксный инкремент var другой способ увеличения var на единицу выполняет постфиксный инкремент echo var умножаем var на передаем результат команде echo var устаревший способ сделать то же var побитовый сдвиг вправо то же что var команда также может использоваться условных утверждениях так как её исходный параметр это или которые могут как true или false if var then echo yes fi echo yes команда поддерживает следующие операторы ставнения bash не поддерживает вычисления внутри процесса числами плавающей точкой только командные процессоры unix korn shell версия года zsh начиная версии поддерживают эту возможность список математических операций возведение степень деление по модулю остаток от деления let позволяет использовать сокращения арифметических команд сокращая количество используемых переменных например эквивалентно переменные аргументы аргументы pid текущего shell самого процесса сценария pid последнего процесса фоновом режиме код возврата последнего процесса функции или скрипта где номер параметра переданного скрипту последний запущенный скрипт количество аргументов командной строки все аргументы виде одной строки слова то же самое что но при этом каждый параметр представлен как отдельная строка слово список флагов переданных сценарию содержит последний аргумент предыдущей команды встроенные переменные bash путь исполняемому файлу bash bash_versinfon массив состоящий из элементов содержащий информацию версии bash bash_version версия bash установленного системе dirstack содержимое вершины стека каталогов editor заданный по умолчанию редактор euid эффективный номер пользователя effective user id funcname имя текущей функции globignore перечень шаблонных символов которые будут проигнорированы при выполнении подстановки имён файлов globbing groups группы которым принадлежит текущий пользователь home домашний каталог пользователя hostname сетевое имя хоста hosttype тип машины идентифицирует аппаратную архитектуру ifs разделитель полей во вводимой строке lc_collate задаёт порядок сортировки символов операциях подстановки имён файлов поиске по шаблону lc_ctype определяет кодировку символов lineno номер строки исполняемого сценария machtype аппаратная архитектура oldpwd прежний рабочий каталог ostype тип операционной системы path путь поиска включает себя каталоги usr bin usr bin usr local bin pipestatus код возврата канала конвейера ppid pid идентификатор родительского процесса ps приглашение командной строки ps вторичное приглашение командной строки выводится тогда когда от пользователя ожидается дополнительный ввод обычно отображается как ps третичное приглашение выводится когда пользователь должен сделать выбор операторе select ps приглашение четвёртого уровня выводится изменённом виде начале каждой строки отладочного вывода тогда когда сценарий вызывается ключом обычно отображается как pwd рабочий текущий каталог reply переменная по умолчанию куда записывается ввод пользователя выполненный помощью команды read seconds время работы сценария секундах shellopts список допустимых опций интерпретатора доступна только для чтения shlvl уровень вложенности shell регулярные выражения внутри процесса bash поддерживает встроенные регулярные выражения синтаксисом подобным синтаксису perl string regex синтаксис регулярных выражений на страницах документации man regex статус выхода устанавливается если регулярное выражение совпало со строкой если нет значение подвыражения заключённого скобки можно получить через переменную bash_rematch например regexp foo bar bl if abcfoobarbletch regexp then echo регулярное выражение совпало со строкой echo bash_rematch выводит foobarbletch echo bash_rematch выводит bar echo bash_rematch выводит etch fi встроенные регулярные выражения обычно работают быстрее чем выполнение внешней команды grep потому что соответствующее регулярное выражение выполняется рамках процесса bash если регулярное выражение или строка содержат пробелы или метасимволы такие как или их следует взять кавычки рекомендуется использовать переменную для хранения регулярного выражения как вышеприведённом примере для избежания проблем экранированием специальных символов можно использовать вывод bash опцией для проверки как именно bash воспринимает ваше регулярное выражение расширение скобок возможность расширения скобок заимствована csh она позволяет произвольной строке быть сформированной использованием похожей техники как это делается названиями файлов однако bash сгенерированные строки не обязаны быть именами файлов результат каждого расширения строки не сортируется сохраняется порядок слева направо это особенность присущая bash echo ape ace ade abe не следует использовать эту особенность если скрипт планируется портировать потому что традиционных скриптах расширение строки не будет действовать традиционная оболочка не даёт тот же результат echo когда используется расширение скобок сочетании символами подстановки скобки раскрываются первыми затем результат обрабатывается обычном режиме таким образом список jpeg png изображений текущем каталоге может быть получен так ls jpg jpeg png скобки раскрываются до jpg jpeg png после чего выполняется поиск по маскам горячие клавиши автодополнение строки за курсором повторить последнюю команду перемещает курсор начало строки эквивалентно клавише перемещает курсор на один символ назад эквивалентно клавише поиск по набранным ранее командам посылает сигнал sigint текущему заданию который обычно но не всегда прекращает закрывает его посылает маркер eof который если не отключено опцией текущая строка не содержит текста закрывает текущую оболочку эквивалентно команде exit при вводе исполняющуюся программу завершает ввод если строке нет текста иначе завершает строку без символа завершения строки удаляет текущий символ только если есть текст на текущей строке эквивалентно клавише перемещает курсор конец строки эквивалентно клавише перемещает курсор на один символ вперёд эквивалентно клавише удаляет предыдущий символ то же самое что клавиша эквивалентно клавише эквивалентно клавише очищает содержимое строки после курсора копирует это буфер обмена экземпляра bash kill ring очищает содержимое экрана эквивалентно команде clear эквивалентно клавише следующее перелистывает следующей команде эквивалентно клавише выполняет найденную команду истории выбирает следующую строку относительно текущей строки истории для того чтобы отредактировать предыдущее перелистывает предшествующей команде эквивалентно клавише возобновить вывод процесса приостановить вывод процесса stop обмен местами соседних символов очищает содержание строки до курсора копирует его буфер обмена экземпляра bash kill ring убирает слово до курсора копирует его буфер обмена экземпляра bash kill ring добавляет содержимое буфера обмена экземпляра bash от позиции курсора посылает сигнал sigtstp текущему заданию который его выполнение возобновляет приём команд для возобновления его выполнения фоновом режиме можно ввести команду bg для того чтобы вернуть его из фонового режима или приостановки можно выполнить fg прервать текущий процесс дампом памяти core dump послав ему сигнал откат редактирования переход последней команде истории назад перемещает курсор назад на одно слово эквивалентно клавише сокращает слово после курсора вперёд перемещает курсор вперёд на одно слово эквивалентно клавише меняет два слова перед курсором местами добавляет последний аргумент предыдущей команды заменить букву под курсором на заглавную заменить букву под курсором на строчную переносит курсор началу строки от текущей позиции обратно редактирует текущую строку программе editor или vi если не предопределено вывод на экран информации версии текущего экземпляра bash стартовые скрипты bash при запуске вызывает команды из множества различных скриптов когда bash вызывается как интерактивная оболочка входа систему первым делом он читает вызывает команды из файла etc profile если этот файл существует после чтения этого файла он смотрит следующие файлы следующем порядке bash_profile bash_login profile читает вызывает команды из первого который существует доступен для чтения при выходе bash читает выполняет команды из файла bash_logout когда запускается интерактивная оболочка но не для входа систему bash читает исполняет команды из файлов etc bash bashrc bashrc если они существуют это может быть отменено опцией norc опция rcfile file заставит bash использовать команды из файла file вместо etc bash bashrc bashrc переносимость первой строкой скрипта должна быть запись bin bash если известен абсолютный путь исполняемому файлу либо usr bin env bash для автоматического определения пути исполняемому файлу через команду env помощью переменной окружения path скрипты оболочек написанные со специфическими для bash особенностями не будут работать на системах где используется bourne shell sh или один из его аналогов если bash не был установлен качестве дополнительной оболочки эта проблема стала особенно важной когда ubuntu начал октября года поставлять debian almquist shell dash как скриптовую оболочку по умолчанию что привело многочисленных скриптов графический интерфейс скриптам существует множество программ позволяющих создавать графический интерфейс bash скриптам dialog утилита позволяющая создавать диалоговые окна консоли использует библиотеки curses ncurses whiptail аналог утилиты dialog использует библиотеку newt zenity наиболее популярное приложение для создания графического интерфейса скриптам kdialog аналог zenity среде kde yad форк zenity большими возможностями xdialog замена dialog предназначенная для придания запускаемым из терминала программам интерфейса window system gtkdialog наиболее функциональная утилита для создания gui приложений на bash скриптах см также сравнение командных оболочек пакетный файл gnu readline примечания ссылки категория командные оболочки unix категория программное обеспечение проекта gnu категория скриптовые языки категория свободное программное обеспечение написанное на си категория свободное кросс платформенное программное обеспечение