ля мбда исчисле ние исчисление формальная система разработанная американским математиком алонзо чёрчем для формализации анализа понятия вычислимости чистое исчисление чистое исчисление термы которого называемые также объектами обами или термами построены исключительно из переменных применением аппликации абстракции изначально наличие каких либо констант не предполагается аппликация абстракция основу исчисления положены две фундаментальные операции аппликация прикладывание присоединение означает применение или вызов функции по отношению заданному значению её обычно обозначают где функция аргумент это соответствует общепринятой математике записи которая тоже иногда используется однако для исчисления важно то что трактуется как алгоритм вычисляющий результат по заданному входному значению этом смысле аппликация может рассматриваться двояко как результат применения или же как процесс вычисления последняя интерпретация аппликации связана понятием редукции абстракция или абстракция отвлечение отделение свою очередь строит функции по заданным выражениям именно если выражение содержащее тогда запись означает функция от аргумента которая имеет вид обозначает функцию таким образом помощью абстракции можно конструировать новые функции требование чтобы свободно входило не очень существенно достаточно предположить что если это не так эквивалентность основная форма эквивалентности определяемая лямбда термах это альфа эквивалентность например альфа эквивалентные лямбда термы оба представляют одну ту же функцию функцию тождества термы не альфа эквивалентны так как они не находятся лямбда абстракции редукция поскольку выражение обозначает функцию ставящую соответствие каждому значение то для вычисления выражения которое входят аппликация абстракция необходимо выполнить подстановку числа терм вместо переменной результате получается это соображение общем виде записывается как носит название редукция выражение вида то есть применение абстракции некому терму называется редексом redex несмотря на то что редукция по сути является единственной существенной аксиомой исчисления она приводит весьма содержательной сложной теории вместе ней исчисление обладает свойством полноты по тьюрингу следовательно представляет собой простейший язык преобразование преобразование выражает ту идею что две функции являются идентичными тогда только тогда когда будучи применёнными любому аргументу дают одинаковые результаты преобразование переводит друг друга формулы только если не имеет свободных вхождений иначе свободная переменная после преобразования станет связанной внешней абстракцией или наоборот каррирование карринг функция двух переменных может быть рассмотрена как функция одной переменной возвращающая функцию одной переменной то есть как выражение такой приём работает точно так же для функций любой арности это показывает что функции многих переменных могут быть выражены исчислении являются синтаксическим сахаром описанный процесс превращения функций многих переменных функцию одной переменной называется карринг также каррирование честь американского математика хаскелла карри хотя первым его предложил шейнфинкель семантика бестипового исчисления тот факт что термы исчисления действуют как функции применяемые термам исчисления то есть возможно самим себе приводит сложностям построения адекватной семантики исчисления чтобы придать исчислению какой либо смысл необходимо получить множество которое вкладывалось бы его пространство функций общем случае такого не существует по соображениям ограничений на мощности этих двух множеств функций из второе имеет бо льшую мощность чем первое эту трудность начале годов преодолел дана скотт построив понятие области изначально на полных решётках дальнейшем обобщив до полного частично упорядоченного множества со специальной топологией урезав до непрерывных этой топологии функций на основе этих построений была создана языков частности благодаря тому что помощью них можно придать точный смысл таким двум важным конструкциям языков как рекурсия типы данных связь рекурсивными функциями рекурсия это определение функции через себя на первый взгляд лямбда исчисление не позволяет этого но это впечатление обманчиво например рассмотрим рекурсивную функцию вычисляющую факториал if else лямбда исчислении функция не может непосредственно ссылаться на себя тем не менее функции может быть передан параметр связанный ней как правило этот аргумент стоит на первом месте связав его функцией мы получаем новую уже рекурсивную функцию для этого аргумент ссылающийся на себя здесь обозначен как обязательно должен быть передан тело функции λr λn if else это решает специфичную проблему вычисления факториала но решение общем виде также возможно получив лямбда терм представляющий тело рекурсивной функции или цикл передав себя качестве первого аргумента комбинатор неподвижной точки возвратит необходимую рекурсивную функцию или цикл функции не нуждаются явной передаче себя каждый раз существует несколько определений комбинаторов неподвижной точки самый простой из них λg λx λx лямбда исчислении неподвижная точка это λh λx λx λx λx λx λx теперь чтобы определить факториал как рекурсивную функцию мы можем просто написать где число для которого вычисляется факториал пусть получаем λfn if and if λn if and if if and if λn if and if if and if λn if and if if and if λn if and if if and if λn if and if if and if каждое определение рекурсивной функции может быть представлено как неподвижная точка соответствующей функции следовательно используя каждое рекурсивное определение может быть выражено как лямбда выражение частности мы можем определить вычитание умножение сравнение натуральных чисел рекурсивно языках языках под исчислением зачастую понимается механизм анонимных функций callback функций которые можно определить прямо том месте где они используются которые имеют доступ локальным переменным текущей функции см также аппликативные вычислительные системы типизированное исчисление комбинаторная логика функциональное анонимная функция примечания литература барендрегт ламбда исчисление его синтаксис семантика пер англ мир категория теория алгоритмов категория лямбда исчисление категория модели вычислений категория формальные методы