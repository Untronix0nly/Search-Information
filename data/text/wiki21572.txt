ssl уровень защищённых cокетов протокол который подразумевает более безопасную связь он использует асимметричную криптографию для аутентификации ключей обмена симметричное шифрование для сохранения коды аутентификации сообщений для целостности сообщений протокол широко использовался для обмена мгновенными сообщениями передачи голоса через ip voip таких приложениях как электронная почта интернет факс др году правительство сша сообщило об уязвимости текущей версии протокола ssl должен быть исключён из работы пользу tls см cve ssl изначально разработан компанией netscape communications для добавления протокола https свой веб браузер netscape navigator впоследствии на основании протокола ssl был разработан принят стандарт rfc получивший имя tls описание протокол ssl обеспечивает защищённый обмен данных за счёт двух следующих элементов аутентификация шифрование ssl использует асимметричную криптографию для аутентификации ключей обмена симметричный шифр для сохранения коды аутентификации сообщений для целостности сообщений протокол ssl предоставляет безопасный канал который имеет три основных свойства канал является частным шифрование используется для всех сообщений после простого диалога который служит для определения секретного ключа канал серверная сторона диалога всегда клиентская делает это опционально канал надёжен транспортировка сообщений включает себя проверку целостности преимуществом ssl является то что он независим от прикладного протокола протоколы приложений http ftp telnet могут работать поверх протокола ssl совершенно прозрачно то есть ssl может согласовывать алгоритм шифрования ключ сессии также сервер до того как приложение примет или передаст первый байт сообщения история развитие ssl протокол ssl был изначально разработан компанией netscape communications версия никогда не была обнародована версии была выпущена феврале года но содержала много недостатков по безопасности которые привели разработке ssl версии ssl версии выпущенный году послужил основой для создания протокола tls стандарт протокола internet engineering task force ietf который впервые был определён rfc январе года visa master card american express многие другие организации имеют лицензию на использование протокола ssl для коммерческих целей сети интернет тем самым ssl расширяемо соответствии проектом поддержке прямой обратной совместимости переговорам между соединениями одноранговой сети марта года согласно rfc tls клиенты не должны использовать протокол ssl при запросе подключения серверу серверы должны отклонять такие запросы tls tls впервые был определен rfc январе года качестве обновления версии ssl как указано rfc различия между этим протоколом ssl не критичны но они значительны для появления несовместимости при взаимодействии tls ssl tls действительно включает средства помощью которых реализация подключения tls ssl ослабит безопасность tls tls презентовали rfc апреле года это было обновление tls версии значительные изменения этой версии включают себя добавлена защита от атак использующих режим сцепления блоков шифротекста cipher block chaining неявный вектор инициализации iv был заменен на явный iv было проведено изменение обработке ошибок введена поддержка iana регистрации параметров tls tls был анонсирован rfc августе года он основан на ранее предложенной версии tls tls tls был признан стандартом rfc августе года принцип работы ssl использует среду несколькими слоями что обеспечивает безопасность обмена информацией общения присутствует за счет того что безопасное соединение открыто только целевым пользователям многослойная среда протокол ssl размещается между двумя протоколами протоколом который использует программа клиент http ftp ldap telnet транспортным протоколом tcp ip ssl защищает данные выступая роли фильтра для обеих сторон передаёт их далее на транспортный уровень работу протокола можно разделить на два уровня слой протокола подтверждения подключения handshake protocol layer слой протокола записи первый слой свою очередь состоит из трёх подпротоколов протокол подтверждения подключения handshake protocol протокол изменения параметров шифра cipher spec protocol протокол alert protocol протокол подтверждения подключения используется для согласования данных сессии между клиентом сервером данным сессии относятся номер сессии сертификаты обеих сторон параметры алгоритма шифрования алгоритм сжатия информации общий секрет применён для создания ключей открытый ключ протокол подтверждения подключения производит цепочку обмена данными что свою очередь начинает аутентификацию сторон согласовывает шифрование хэширование сжатие следующий этап аутентификация участников которая осуществляется также протоколом подтверждения подключения протокол изменения параметров шифра используется для изменения данных ключа keyingmaterial информации которая используется для создания ключей шифрования протокол состоит всего из одного сообщения котором сервер говорит что отправитель хочет изменить набор ключей протокол содержит сообщение которое показывает сторонам изменение статуса или сообщает возможной ошибке обычно предупреждение отсылается тогда когда подключение закрыто получено неправильное сообщение сообщение невозможно расшифровать или пользователь отменяет операцию цифровые сертификаты протокол ssl использует сертификаты для проверки принадлежности открытого ключа его реальному владельцу способы получения ssl сертификата использовать сертификат выданный ca использовать самоподписанный сертификат использовать пустой сертификат самоподписанный сертификат сертификат созданный самим пользователем этом случае издатель сертификата совпадает владельцем сертификата пустой сертификат сертификат содержащий фиктивную информацию используемую качестве временной для настройки ssl проверки его данной среде среди сертификатов ssl выделяют сертификаты подтверждающие домен последний связывает доменное имя реальным физическим или юридическим лицом механизмы образования ключа для текущей сессии ssl tls существует основных алгоритма для образования ключей rsa fixed diffie hellman ephemeral diffie hellman anonymous diffie hellman rsa при утере приватного ключа rsa криптоаналитик получивший его получает возможность расшифровать все записанные прошлые сообщения будущие сообщения реализация обмена ключей rsa является односторонней вся необходимая информация для образования симметричного ключа который создается на этапе рукопожатия пересылается на сервер шифруется публичным ключом сервера раскрытие приватного ключа дает возможность узнать симметричный ключ данной сессии diffie hellman механизм fixed diffie hellman использует постоянный публичный ключ который прописан сертификате сервера это также означает что при каждом новом соединении клиент предоставляет свою часть ключа после обмена ключами образуется новый симметричный ключ для обмена информацией для текущей сессии при раскрытии приватного ключа сервера криптоаналитик может расшифровать ранее записанные сообщения также все будущие сообщения это становится возможным из за самого механизма так как криптоаналитик знает приватный ключ сервера он сможет узнать симметричный ключ каждой сессии даже тот факт что механизм образования ключа является двусторонним не поможет механизм anonymous diffie hellman не предоставляет гарантий секретности ибо данные передаются единственный вариант при котором гарантируется безопасность прошлых будущих сообщений ephemeral diffie hellman разница по сравнению ранее рассмотренными методами заключается том что при каждом новом соединении сервером клиентом создается одноразовый ключ таким образом даже если криптоаналитику достанется текущий приватный ключ он сможет расшифровать только текущую сессию но не предыдущие или будущие сессии особенности шифрования существует два основных способа шифрования данных симметричное шифрование общий секретный ключ асимметричное шифрование пара открытый приватный ключ ssl использует как асимметричную так симметричную криптографию суть асимметричного шифрования заключается том что используется пара ключей один из ключей называется открытым как правило он публикуется самом сертификате владельца второй ключ называется приватным он держится тайне оба ключа используются паре открытый ключ используется для того чтобы зашифровать данные приватный для того чтобы расшифровать их такая взаимосвязь позволяет делать две важные вещи любой пользователь может получить открытый ключ использовать его для шифрования данных расшифровать которые сможет только пользователь владеющий приватным ключом если владелец ключевой пары зашифрует подпишет данные своим приватным ключом то каждый сможет убедиться том что данные были отправлены именно владельцем приватного ключа не были изменены третьей стороной именно это является основой цифровых подписей rsa один из самых алгоритмов асимметричного шифрования при использовании симметричного шифрования один тот же ключ используется как для шифрования так для расшифровывания данных если стороны хотят обменяться зашифрованными сообщениями безопасном режиме то обеих сторон должны быть одинаковые симметричные ключи такой тип шифрования используется для большого объёма данных так как симметричное шифрование является более быстрым обычно используются алгоритмы des des rc rc aes протокол ssl использует шифрование открытым ключом для взаимной аутентификации клиента сервера помощью технологии цифровых подписей также для выработки сессионного ключа который свою очередь используется более быстрыми алгоритмами симметричной криптографии для шифрования большого объёма данных хеширование хеш значение является идентификатором сообщения его размер меньше размера оригинального сообщения самыми известными хеш алгоритмами являются md message digest который создает битное хеш значение sha secure hash algorithm создающий битное хеш значение sha sha результат работы алгоритма хеширования значение которое используется для проверки целостности передачи данных уровень записи протокол на уровне слоя записи получает зашифрованные данные от программы клиента передает их на транспортный слой протокол записи берет данные разбивает их на блоки выполняет шифрование расшифровывание данных при этом активно используется информация которая была согласована во время подтверждения данных протокол ssl позволяет использовать шифрование симметричным ключом используя либо блочные либо потоковые шифры обычно на практике применяются блочные шифры принцип работы блочного шифра заключается отображении блока открытого текста такой же блок шифрованного текста этот шифр можно представить виде таблицы содержащей строк каждая строка содержит блок открытого текста соответствующий ему блок шифрованного текста подобная таблица существует для каждого ключа шифрование можно обозначить виде функции key где исходные данные key ключ шифрования зашифрованные данные как правило блоки имеют небольшой размер обычно байт поэтому возникает вопрос как зашифровать длинное сообщение первый режим для подобного шифрования называется ecb electronic codebook или режим простой замены его суть состоит том что мы разбиваем исходное сообщение на блоки по те же байт шифруем каждый блок отдельно однако данный режим применяет редко из за проблемы сохранения статистических особенностей исходного текста одинаковых блока открытого текста после шифрования превратятся два одинаковых блока зашифрованного текста для решения этой проблемы был разработан второй режим cbc cipher block chaining этом случае каждый новый блок шифротекста xor ится предыдущим результатом шифрования первый блок xor ится некоторым вектором инициализации initialization vector iv однако вся вышеизложенная теория разработана для одного большого объекта то время как ssl являясь протоколом должен шифровать серию пакетов такой ситуации существует два способа применения cbc обрабатывать каждое сообщение как отдельный объект генерируя для него каждый раз новый вектор инициализации обрабатывать все сообщения как один большой объект сохраняя режим cbc между ними таком случае качестве вектора инициализации для сообщения будет использоваться последний блок шифрования предыдущего сообщения применение при проектировании приложений ssl реализуется под любым другим протоколом прикладного уровня таким как http ftp smtp nntp xmpp таким образом обеспечивая прозрачность его использования исторически ssl был использован первую очередь надёжными транспортными протоколами такими как transmission control protocol tcp тем не менее он также был реализован датаграммными транспортными протоколами такими как user datagram protocol udp datagram control protocol dccp использование которого было что привело появлению термина datagram transport layer security dtls вебсайты частое использование протокола ssl привело формированию протокола https hypertext transfer protocol secure поддерживающего шифрование данные которые передаются по протоколу https упаковываются протокол ssl или tls тем самым обеспечивая защиту этих данных такой способ защиты широко используется мире веб для приложений которых важна безопасность соединения например платёжных системах отличие от http для https по умолчанию используется tcp порт поддержка вебсайтами протокола версия протокола безопасность поддержка сайтами ssl ssl tls может быть tls tls браузеры по состоянию на начало все основные веб браузеры поддерживающие ssl tls браузеры поддерживающие ssl tls браузер платформы tls tls tls tls chrome android ios linux mac os windows xp vista chrome android ios linux mac os windows xp vista chrome android ios linux mac os windows xp vista firefox linux mac os windows xp vista firefox linux mac os windows xp vista firefox linux mac os windows xp vista ie windows xp ie windows xp vista ie windows ie windows vista ie windows edge windows opera linux mac os windows opera linux mac os windows opera linux mac os windows opera linux mac os windows safari mac os windows xp vista ios safari mac os windows xp vista safari ios уточнения os используется tls предоставляемый network security services nss по состоянию на март года nss поддерживает tls но не версию firefox поддерживает tls поддержка ssl по умолчанию отключена ie использует реализацию tls от операционной системы microsoft windows предоставляемый schannel tls по умолчанию отключены opera имеет поддержку tls предыдущие версии поддерживали tls tls по умолчанию отключены за исключением версии safari использует реализацию операционной системы mac os windows xp vista safari является последней версией доступной для windows mobile safari программное обеспечение сторонних производителей использованием библиотечных систем uiwebview поддерживают tls как ios использование реализация изначально виртуальные частные сети vpn на основе ssl разрабатывались как дополнительная альтернативная технология удалённого доступа на основе ipsec vpn однако такие факторы как достаточная надёжность дешевизна сделали эту технологию привлекательной для организации vpn также ssl получил широкое применение электронной почте наиболее реализация ssl пакет открытым исходным кодом openssl основанный на ssleay написанной эриком янгом последняя версия openssl поддерживает sslv пакет предназначен для создания управления различного рода сертификатами также его состав входит библиотека для поддержки ssl различными программами библиотека используется например модулем ssl http сервере apache спецификация протокола записей ssl формат заголовка записей ssl все данные ssl пересылаются виде записей рекордов объектов которые состоят из заголовка некоторого количества данных каждый заголовок рекорда содержит или байта кода длины если старший бит первом байте кода длины рекорда равен тогда рекорд не имеет заполнителя полная длина заголовка равна байтам противном случае рекорд содержит заполнитель полная длина заголовка равна байтам случае длинного байта заголовка второй по старшинству бит первого байта имеет специальное значение если он равен рекорд является информационным если он равен рекорд является security escape код длины рекорда не включает себя число байт заголовка для байтового заголовка его длина вычисляется так record length byte для байтового заголовка длина рекорда вычисляется следующим образом record length byte is escape byte padding byte значение padding специфицирует число байтов добавленных отправителем исходному рекорду данные заполнителя используются для того чтобы сделать длину рекорда кратной размеру блока шифра отправитель добавляет padding после имеющихся данных затем шифрует всё это так как длина этого массива кратна размеру блока используемого шифра поскольку известен объём передаваемых данных заголовок сообщения может быть сформирован учетом объёма padding получатель сообщения дешифрует всё поле данных получает исходную информацию затем вычисляет истинное значение record length при этом padding из поля данные удаляется формат информационных записей ssl часть данных рекорда ssl состоит из компонентов mac datamac size actual datan padding datapadding mac data код аутентификации сообщения mac size функция используемого алгоритма вычисления хеш суммы actual data реально переданные данные или поле данных сообщения padding data данные padding при блочном шифровании mac data hash secret actual data padding data sequence number здесь secret передается хеш функции первым затем следует actual data padding data за которыми передается sequence number порядковый номер значение secret зависит от того кто именно посылает сообщение если это делает клиент то secret равен client write key если же клиент получает сообщение secret равен client read key порядковый номер представляет собой битовый код который передается хеш функции виде байт используя сетевой порядок передачи от старшего младшему порядковый номер счетчик для сервера или клиента для каждого направления передачи используется пара счетчиков для отправителя для получателя каждый раз когда отправляется сообщение счетчик увеличивает своё значение на получатель сообщения использует ожидаемое значение порядкового номера для передачи mac тип хеш функции определяется параметром cipher choice вычисленное значение mac data должно совпадать переданным значением если сравнение не прошло сообщение считается поврежденным что приводит возникновению ошибки которая вызывает закрытие соединения окончательная проверка соответствия выполняется когда используется блочный шифр объём данных сообщении record length должен быть кратен размеру блока шифра если данное условие не выполнено сообщение считается поврежденным что приводит разрыву соединения для байтового заголовка максимальная длина сообщения равно байтов для байтового байтов сообщения протокола диалога ssl должны соответствовать одиночным рекордам протокола ssl сообщения прикладного протокола могут занимать несколько рекордов ssl протокол диалога ssl протокол диалога ssl содержит основные фазы фаза первая фаза используется для установления канала коммуникаций эта фаза инициализирует соединение когда оба партнера обмениваются сообщениями hello клиент посылает сообщение client hello сервер получает это сообщение обрабатывает его посылает ответ сообщение server hello этот момент сервер клиент имеют достаточно информации чтобы знать нужен ли новый master key если ключ не нужен сервер клиент переходят фазу когда возникает необходимость создания нового master key сообщение сервера server hello уже содержит достаточно данных для того чтобы клиент мог сгенерировать master key эти данные входят подписанный сертификат сервера список базовых шифров идентификатор соединения случайное число сгенерированное сервером которое используется на протяжении всей сессии после генерации клиентом master key он посылает серверу сообщение client master key или же сообщение об ошибке когда клиент сервер не могут согласовать базовый шифр после определения master key сервер посылает клиенту сообщение server verify которое аутентифицирует сервер фаза фаза называется фазой аутентификации так как сервер уже на первой фазе то на второй фазе осуществляется аутентификация клиента сервер отправляет запрос клиенту если клиента есть необходимая информация он присылает позитивный отклик если же нет сообщение об ошибке когда один партнер выполнил аутентификацию другого партнера он посылает сообщение finished случае клиента сообщение client finished содержит зашифрованную форму идентификатора connection id которую должен верифицировать сервер если верификация была неудачной сервер посылает сообщение error когда один из партнеров послал сообщение finished он должен принимать сообщения до тех пор пока не получит сообщение finished от другого партнера только когда оба партнера послали получили сообщения finished протокол диалога ssl закончит свою работу этого момента начинает работу прикладной протокол типовой протокол обмена сообщениями ниже представлено несколько вариантов обмена сообщениями рамках протокола диалога ssl клиент сервер smth key означает что smth зашифровано помощью ключа при отсутствии идентификатора сессии client hello challenge cipher_specs server hello connection id cipher_specs client master key master_key client finish connection id server verify challenge server finish new_session_id идентификатор сессии найден клиентом сервером client hello challenge session_id cipher_specs server hello connection id session_id_hit client finish connection id server verify challenge server finish session_id использован идентификатор сессии аутентификация клиента client hello challenge session_id cipher_specs server hello connection id session_id_hit client finish connection id server verify challenge request certificate auth_type challenge client certificate cert_type client_cert response_data server finish new_session_id аутентификация обмен ключами ssl поддерживает типа аутентификации аутентификация обеих сторон клиент сервер аутентификация сервера клиентом полная анонимность если сервер то его сообщение сертификации должно обеспечить верную цепочку ведущую приемлемому центру сертификации проще говоря сервер должен предоставить допустимый сертификат клиенту каждая сторона отвечает за проверку того что сертификат другой стороны ещё не истек не был отозван всякий раз когда сервер канал устойчив безопасен попытке перехвата данных между веб сервером браузером но полностью анонимная сессия по своей сути уязвима такой атаке анонимный сервер не может клиента главная цель процесса обмена ключами это создание секрета клиента известного только клиенту серверу секрет используется для создания общего секрета master_secret общий секрет необходим для того чтобы создать сообщение для проверки сертификата ключей шифрования секрета mac message authentication code сообщения finished отсылая сообщение finished стороны указывают что они знают верный секрет анонимный обмен ключами полностью анонимная сессия может быть установлена при использовании алгоритма rsa или диффи хеллмана для создания ключей обмена случае использования rsa клиент шифрует секрет помощью открытого ключа сервера открытый ключ клиент узнает из сообщения обмена ключами от сервера результат посылается сообщении обмена ключами от клиента поскольку перехватчик не знает закрытого ключа сервера то ему будет невозможно расшифровать секрет при использовании алгоритма диффи хеллмана открытые параметры сервера содержатся сообщении обмена ключами от сервера клиенту посылают сообщении обмена ключами перехватчик который не знает приватных значений не сможет найти секрет аутентификация обмен ключами при использовании rsa этом случае обмен ключами аутентификация сервера может быть скомбинирована открытый ключ также может содержаться сертификате сервера или может быть использован временный ключ rsa который посылается сообщении обмена ключами от сервера когда используется временный ключ rsa сообщения обмена подписываются server rsa или сертификат dss сигнатура содержит текущее значение сообщения client_hello random таким образом старые сигнатуры старые временные ключи не могут повторяться сервер может использовать временный ключ rsa только однажды для создания сессии после проверки сертификата сервера клиент шифрует секрет при помощи открытого ключа сервера после успешного декодирования секрета создается сообщение finished тем самым сервер демонстрирует что он знает приватный ключ соответствующий сертификату сервера когда rsa используется для обмена ключами для аутентификации клиента используется сообщение проверки сертификата клиента клиент подписывает значение вычисленное из master_secret всех предшествующих сообщений протокола рукопожатия эти сообщения рукопожатия содержат сертификат сервера который ставит соответствие сигнатуре сервера сообщение server_hello random которому ставит соответствие сигнатуру текущему сообщению рукопожатия аутентификация обмен ключами при использовании diffie hellman этом случае сервер может также поддерживать содержащий конкретные параметры алгоритм диффи хеллмана или может использовать сообщения обмена ключами от сервера для посылки набора временных параметров подписанных сертификатами dss или rsa временные параметры хэшируются сообщением hello random перед подписанием для того чтобы злоумышленник не смог совершить повтор старых параметров любом случае клиент может проверить сертификат или сигнатуру для уверенности что параметры принадлежат серверу если клиент имеет сертификат содержащий параметры алгоритма diffie hellman то сертификат также содержит информацию требующуюся для того чтобы завершить обмен ключами этом случае клиент сервер должны будут сгенерировать одинаковые diffie hellman результаты каждый раз когда они устанавливают соединение для того чтобы предотвратить хранение секрета памяти компьютера на время дольше чем необходимо секрет должен быть переведен общий секрет master_secret настолько быстро насколько это возможно параметры клиента должны быть совместимы теми которые поддерживает сервер для того чтобы работал обмен ключами протокол записи протокол записи record layer это уровневый протокол на каждом уровне сообщения включают поля для длины описания проверки протокол записи принимает сообщения которые нужно передать фрагментирует данные управляемые блоки разумно сжимает данные применяя mac message authentication code шифрует передаёт результат полученные данные он расшифровывает проверяет распаковывает собирает доставляет более верхним уровням клиента существует четыре протокола записи протокол рукопожатия handshake protocol протокол тревоги alert protocol протокол изменения шифра the change cipher spec protocol протокол приложения application data protocol если ssl реализация получает тип записи который ей неизвестен то эта запись просто игнорируется любой протокол созданный для использования совместно ssl должен быть хорошо продуман так как будет иметь дело атаками на него заметим что из за типа длины записи протокол не защищен шифрованием внимание следует уделить тому чтобы минимизировать трафик протокол рукопожатия ssl клиент сервер договариваются об установлении связи помощью процедуры рукопожатия во время рукопожатия клиент сервер договариваются различных параметрах которые будут использованы чтобы обеспечить безопасность соединения клиент посылает серверу номер версии ssl клиента поддерживаемые алгоритмы шифрования сжатия специфичные данные для сеанса другую информацию которая нужна серверу чтобы общаться клиентом используя ssl сервер посылает клиенту номер версии ssl сервера алгоритм сжатия шифрования выбранные из посланных ранее клиентом специфичные данные для сеанса другую информацию которая нужна серверу чтобы общаться клиентом по протоколу ssl сервер также посылает свой сертификат который требует проверки подлинности клиента после идентификации сервер запрашивает сертификат клиента клиент использует информацию переданную сервером для проверки подлинности если сервер не может быть проверен пользователь получает предупреждение проблеме том что шифрование аутентификация соединения не может быть установлена если сервер успешно прошел проверку то клиент переходит следующему шагу используя все данные полученные до сих пор от процедуры рукопожатие клиент сотрудничестве сервером создает предварительный секрет сессии зависимости от используемого шифра от сервера шифрует его помощью открытого ключа сервера полученного из сертификата сервера отправленного на шаге затем отправляет его на сервер если сервер запросил аутентификацию клиента необязательный шаг рукопожатия клиент также подписывает ещё один кусок данных который является уникальным для этого рукопожатия известным как для клиента так сервера этом случае клиент отправляет все подписанные данные собственный сертификат клиента на сервер вместе предварительно зашифрованным секретом сервер пытается клиента если клиент не может пройти проверку подлинности сеанс заканчивается если клиент может быть успешно сервер использует свой закрытый ключ для расшифровки секрета затем выполняет ряд шагов которые клиент также выполняет чтобы создать главный секрет клиент сервер используют секрет для генерации ключей сеансов которые являются симметричными ключами использующиеся для шифрования расшифрования информации которой обмениваются во время ssl сессии происходит проверка целостности то есть для обнаружения любых изменений данных между временем когда он был послан временем его получения на ssl соединении клиент посылает сообщение серверу информируя его что будущие сообщения от клиента будут зашифрованы помощью ключа сеанса затем он отправляет отдельное зашифрованное сообщение том что часть рукопожатие закончена заключение сервер посылает сообщение клиенту информируя его что будущие сообщения от сервера будут зашифрованы помощью ключа сеанса затем он отправляет отдельное зашифрованное сообщение том что часть рукопожатие закончена на этом рукопожатие завершается начинается защищенное соединение которое зашифровывается помощью ключевых данных если любое из перечисленных выше действий не удается то рукопожатие ssl не удалось соединение не создается протокол изменения параметров шифрования протокол изменения параметров шифрования существует для сигнализации перехода режим шифрования протокол содержит единственное сообщение которое зашифровано сжато при текущем установленном соединении сообщение состоит только из одного бита со значением struct enum type сообщение изменения шифра посылается клиентом сервером для извещения принимающей стороны что последующие записи будут защищены соответствии новым договоренным cipherspec ключами принятие этого сообщения заставляет получателя отдать приказ уровню записи незамедлительно копировать состояние отложенного чтения состояние текущего чтения сразу после послания этого сообщения тот кто послал должен отдать приказ уровню записи перевести режим отложенной записи режим текущей записи сообщение изменения шифра посылается во время рукопожатия после того как параметры защиты были переданы но перед тем как будет послано сообщение finished протокол тревоги один из типов проверки поддерживаемых протоколе ssl записи это протокол тревоги сообщение тревоги передаёт трудности возникшие сообщении описание тревоги сообщение тревоги критическим уровнем незамедлительно прерывает соединение этом случае другие соединения соответствующие сессии могут быть продолжены но идентификатор сессии должен быть признан как другие сообщения сообщение тревоги зашифровано сжато как только указано текущее состояние соединения протокол приложения сообщение приложения данных работает на уровне записи он фрагментируется сжимается шифруется на основе текущего состояния соединения сообщения считаются прозрачными для уровня записи безопасность ssl существует ряд атак которые могут быть предприняты против протокола ssl однако ssl устойчив этим атакам при условии что пользователь использует только доверенные сервера для обработки информации ssl уязвима некоторых ситуациях идентичные ключи используются для аутентификации шифрования сообщений ssl имеет слабую mac конструкцию которая использует md хэш функцию секретом префикса что делает его уязвимым для атак ssl не имеет никакой защиты для протокола рукопожатия то есть атаки типа злоумышленник посередине man in the middle могут остаться незамеченными ssl использует tcp закрытое соединенние чтобы указать конец данных это означает что возможна следующая атака злоумышленник просто подделывает tcp fin оставив получателя без сообщения конце передачи данных ssl эту ошибку исправили ssl предполагает наличие единой службы поддержки фиксированного домена что идет вразрез со стандартной функцией виртуального хостинга на веб серверах ssl по умолчанию отключена браузерах начиная internet explorer mozilla firefox opera safari ssl октября года была выявлена уязвимость cve названная poodle padding oracle on downgraded legacy encryption данная уязвимость позволяет злоумышленнику осуществить атаку man in the middle на соединение зашифрованное помощью ssl уязвимость poodle это уязвимость протокола не какой либо его реализации соответственно ей подвержены все соединения зашифрованные ssl ssl есть иные слабые моменты примеру половина мастер ключа master key которая устанавливается полностью зависит от хэш функции md которая не является устойчивой коллизиям следовательно не считается безопасной виды возможных атак атака по словарю такой тип атак производится когда атакующий имеет представление том какого типа сообщения посылаются криптоаналитик может сформировать базу данных где ключами являются зашифрованные строки открытого текста по созданной базе данных можно определить ключ сессии соответствующий определенному блоку данных вообще для ssl такие атаки возможны но ssl пытается противостоять этим атакам используя большие ключи сессии клиент генерирует ключ который длиннее чем допускается экспортными ограничениями часть которого посылается серверу открытым текстом остальная часть объединяется секретной частью чтобы получить достаточно длинный ключ например бит как этого требует rc способ блокирования атак открытого текста заключается том чтобы сделать объём необходимого текста неприемлемо большим каждый бит добавляемый длине ключа сессии увеличивает размер словаря раза использование ключа сессии длиной бит делает размер словаря далеко за пределами современных технических возможностей решение потребует такого количества атомов которого нет во всей вселенной другой способ помощью которого ssl может противостоять данной атаке заключается использовании максимально возможных длин ключей случае не экспортного варианта следствием этого является то что самым простым дешевым способом атаки становится лобовая атака ключа но для битного ключа стоимость его раскрытия можно считать бесконечной атака отражением злоумышленник записывает сессию между сервером клиентом позднее он пытается установить соединение сервером воспроизводя записанные сообщения клиента но ssl отбивает эту атаку при помощи особого уникального идентификатора соединения ис конечно теоретически третья сторона не силах предсказать ис потому что он основан на наборе случайных событий однако злоумышленник большими ресурсами может записать большое количество сессий попытаться подобрать верную сессию основываясь на коде nonce который послал сервер сообщение server_hello но коды nonce ssl имеют по меньшей мере длину бит значит злоумышленнику необходимо записать кодов nonce чтобы получить вероятность угадывания но достаточно большое число что делает эти атаки бессмысленными атака протокола рукопожатия злоумышленник может попытаться повлиять на обмен рукопожатиями для того чтобы стороны выбрали разные алгоритмы шифрования не те что они выбирают обычно из за того что многие реализации поддерживают шифрование некоторые даже шифрование или mac алгоритм эти атаки представляют большой интерес для такой атаки злоумышленнику необходимо быстро подменить одно или более сообщений рукопожатия если это происходит то клиент сервер вычислят различные значения хэшей сообщения рукопожатия результате чего стороны не примут друг от друга сообщения finished без знания секрета злоумышленник не сможет исправить сообщение finished поэтому атака может быть обнаружена взлом ssl соединений внутри цод наиболее известный инцидент по массовому взлому информации защищенной протоколами ssl был произведен агентами фбр помощью систем carnivore narusinsight что привело судебному процессу от лица правозащитной организации electronic frontier foundation против at который установил данные комплексы для взлома защищенной информации несмотря на высокий общественный резонанс сша данного дела расследование на уровне комитета палаты представителей технологически взлом протокола ssl агентами фбр не производился carnivore narusinsight были установлены самом цод где находились сервера ведущие ssl соединенения удаленными клиентами narusinsight полностью восстановил зашифрованную информацию путём прослушивания не ssl соединения внутреннего траффика между серверами приложений внутри самого цод уже после того как данные поступившие по ssl были расшифрованы самим сервером принявшим их от внешних пользователей тем не менее указанный инцидент показал что ssl не может являться надёжным средством криптозащиты данных серверов интернете так как спецслужбы могут установить системы прослушивания такие как narusinsight или сорм цод любой вид криптографии подразумевающий что ключи от шифров находятся сервера получателя цод взламываются снифферами спецслужб автоматическом режиме за счет внедрения их самого получателя далее данные полностью по процедурам которые на данный момент регулируются актами такими как патриотический акт причем указанные законодательные акты запрещают вплоть до судебного преследования владельцев цод удаление снифферов спецслужб из внутренней части серверов получателей учетом наличия данных систем протокол ssl может защищать только соединение двух пользователей интернете но не ssl соединение внешним web сайтом beast атака сентября года тайские исследователи дуонг джулиано риццо используя java апплет доказательство концепции под названием beast browser exploit against ssl tls указывающей уязвимость tls ранее эту уязвимость которая первоначально была обнаружена phillip rogaway году практически никто не мог уязвимость tls была зафиксирована году атака строится на нескольких допущениях но как оказалось их вполне реально реализовать во первых криптоаналитик должен иметь возможность перехватывать трафик передаваемый браузером во вторых необходимо как то заставить пользователя передавать данные по тому же самому безопасному каналу связи пусть между компьютерами боба алисы установлено безопасное соединение предположим что ый блок попавшего нам сообщения содержит секретную информацию например пароль ci key mi xor ci где ci зашифрованный блок mi секретный текст предположим что пароль мы можем проверить правильность нашего предположения итак мы смогли перехватить вектор инициализации который используется для шифрования первого блока следующего сообщения но это же есть последний блок предыдущего сообщения зашифрованном виде iv также мы перехватили ci при помощи этих данных мы формируем сообщение так чтобы первый блок стал равен следующему ci xor iv xor если криптоаналитик сможет передать сообщение по тому же защищенному каналу то первый блок нового сообщения примет вид key xor iv key ci xor iv xor xor xor iv key ci xor ci получается если то первый зашифрованный блок нового сообщения будет равен ранее перехваченному сi на практике возникает проблема блок байтов длину даже если мы знаем все байты кроме двух нам потребуется попыток чтобы угадать оставшееся если мы не знаем ничего отсюда вывод что данная практика может сработать том случае если криптоаналитик имеет ограниченное количество предположений относительно значения точнее большую часть содержимого данного блока следующее допущение криптоаналитик может контролировать расположение данных блоке например знать что пароль символов длину зная это криптоаналитик располагает пароль таким образом чтобы первый блок попал только символ оставшиеся следующий то есть первых байтах лежат заведомо известные данные для угадывания символа злоумышленнику потребуется худшем попыток на самом деле об уязвимости знали гораздо раньше просто разработчики утилиты первые кому удалось реализовать все условия для данной атаки именно криптоаналитик имеет возможность прослушивать сетевые соединения инициированные браузером атакуемого компьютера криптоаналитика есть возможность внедрить агент браузер жертвы агент имеет возможность отправлять произвольные https запросы вот список различных технологий браузерных плагинов которые могут выполнить внедрение агента браузер жертвы javascript xmlhttprequest api html websocket api flash urlrequest api java applet urlconnection api silverlight webclient api rc атака году сингапуре прошла конференция на которой профессор дэн бернстейн представил новую технику для взлома протоколов ssl tls если таковых используется шифр rc который году был предложен как средство защиты от beast уязвимость обнаруженная rc связана недостаточной случайностью потока битов которым скремблируется сообщение прогнав через него одно то же сообщение много раз было выявлено достаточное количество повторяющихся паттернов для восстановления исходного текста для атаки придется прогнать через шифр гигантский объём данных представленной реализации взлом занимал до часов однако не исключалась возможность оптимизации процесса но данная атака трудно реализуема на практике создатели утверждают что для восстановления байт из необходимо шифротекстов раскрытие шифров как известно ssl зависит от различных параметров шифрование открытым ключом rsa необходимо для пересылки ключей аутентификации сервера клиента однако качестве шифра используются различные алгоритмы таким образом если осуществить успешную атаку на эти алгоритмы то ssl не может уже считаться безопасным атака на определенные сессии производится записью сессии потом течение долгого времени подбирается ключ сессии или ключ rsa атака злоумышленник посередине также известна как mitm man in the middle атака предполагает участие трех сторон сервера клиента злоумышленника находящегося между ними данной ситуации злоумышленник может перехватывать все сообщения которые следуют обоих направлениях подменять их злоумышленник представляется сервером для клиента клиентом для сервера случае обмена ключами по алгоритму диффи хелмана данная атака является эффективной так как целостность принимаемой информации её источник проверить невозможно однако такая атака невозможна при использовании протокола ssl так как для проверки подлинности источника обычно сервера используются сертификаты заверенные центром сертификации атака будет успешной если сервер не имеет подписанного сертификата клиент не проверяет сертификат сервера пользователь игнорирует сообщение об отсутствии подписи сертификата центром сертификации или сообщение несовпадении сертификата кэшированным данный вид атаки можно встретить крупных организациях использующих межсетевой экран forefront tmg компании microsoft или прокси сервер blue coat proxy sg данном случае злоумышленник находится на границе сети организации производит подмену оригинального сертификата своим данная атака становится возможной благодаря возможности указать качестве доверенного центра сертификации сам прокси сервер либо как корневого либо как дочернего по отношению корпоративному корневому обычно подобная процедура внедрения проходит прозрачно для пользователя за счет работы корпоративных пользователей среде active directory данное средство может использоваться как для контроля за передаваемой информацией так целях похищения личных данных передаваемых помощью защищенного соединения https наиболее спорным становится вопрос пользователя возможности перехвата данных так как случае подмены корневого сертификата никаких сообщений безопасности выводиться не будет пользователь будет ожидать передаваемых данных кроме того при использовании forefront tmg качестве ssl прокси возникает возможность проведения второй mitm атаки на стороне интернета так как оригинальный сертификат не будет передан пользователю forefront tmg может быть настроен на прием последующую подмену самоподписанных или отозванных сертификатов для защиты от подобной атаки необходимо полностью запретить работу веб серверами чьи сертификаты содержат какие либо ошибки что безусловно приведет невозможности работы по протоколу https со множеством сайтов blue coat proxy sg от второй mitm атаки защищен система позволяет настроить политику таким образом что случае недоверенного сертификата веб сервера система также выпускает сертификат подписанный не доверенной цепочкой временной самоподписанной thc ssl dos октября года организация the hacker choice thc выпустила утилиту thc ssl dos которую можно использовать для проведения dos атак на ssl серверы данная утилита использует уязвимость функции повторного подтверждения ssl ssl renegotiation которая изначально была предназначена для обеспечения большей безопасности ssl повторное подтверждение позволяет серверу создавать новый секретный ключ поверх уже имеющегося ssl соединения эта функция по умолчанию включена большинство серверов установка безопасного соединения также выполнение повторного подтверждения ssl требуют несколько раз больше ресурсов на стороне сервера чем на стороне клиента то есть если клиент отправляет множество запросов на повторное подтверждение ssl это истощает системные ресурсы сервера согласно одному из участников thc для успешного проведения атаки нужен ноутбук установленной утилитой доступ интернет программа была опубликована свободном доступе потому что её аналог появился сети уже несколько месяцев тому назад также по утверждениям разработчиков атака может быть произведена даже том случае если сервер не поддерживает функцию повторного подтверждения хотя для этого придется модифицировать метод атаки этом случае устанавливается множество tcp соединений для нового рукопожатия ssl но для эффективной атаки необходимо больше ботов качестве защиты некоторые разработчики по рекомендуют устанавливать особые правила для разрыва соединения клиентом который выполняет операцию повторного подтверждения больше установленного количества раз секунду sslstrip году на конференции black hat вашингтоне мокси марлинспайк независимый хакер новую утилиту sslstrip при помощи которой можно достать важную информацию заставив пользователей поверить что они находятся на защищенной странице хотя на самом деле это не так этого можно достичь конвертируя страницы обычно защищенные протоколом ssl их незащищенные аналоги причем обманывается как сервер так клиент утилита работает потому что многие сайты использующие защиту ssl имеют незащищенную главную страницу они шифруют только те разделы где передается важная информация когда пользователь кликает по странице авторизации утилита подменяет ответ сайта меняя https на http sslstrip используются следующие приемы во первых локальной сети разворачивается прокси сервер имеющий действительный сертификат отсюда адресной строке пользователь продолжает видеть https во вторых используется техника для создания длинных url содержащих адресной строке фальшивые это нужно чтобы избежать преобразования символов браузерами для доказательства работы системы мокси запустил sslstrip на сервере обслуживающем сеть tor за часа выловил пароля пользователей yahoo gmail ticketmaster paypal linkedln обработка ошибок протоколе ssl протоколе ssl обработка ошибок очень проста когда ошибка обнаружена тот кто её обнаружил посылает об этом сообщение своему партнёру неустранимые ошибки требуют от сервера клиента разрыва соединения протокол ssl определяет следующие ошибки такая ошибка возникает когда клиент сервер получает тип сертификата который не поддерживается ошибка устранима только для аутентификации клиента no_cipher_error ошибка возникает когда сервер не может найти размер ключа или шифр который поддерживается также клиентом ошибка неустранима такая ошибка возникает когда сертификат считается принимающей стороной плохим это означает что или некорректна подпись сертификата или его значение некорректно ошибка устранима только для аутентификации клиента если послано сообщение то эта ошибка может быть прислана по причине того что клиент не имеет сертификата ошибка устранима алгоритмы использующиеся ssl для обмена ключами проверки их подлинности применяются rsa diffie hellman ecdh srp psk для аутентификации rsa dsa ecdsa для симметричного шифрования rc rc idea des triple des или aes camellia для хеш функций sha md md md см также tls jsse openssl ssh tcpcrypt примечания литература книги статьи ссылки mozilla org введение ssl протокол what is tls ssl logon and authentication how tls ssl works logon and authentication категория протоколы категория стандарты интернета категория интернет протоколы категория электронная коммерция категория протоколы прикладного уровня