регуля рные выраже ния формальный язык поиска осуществления манипуляций подстроками тексте основанный на использовании метасимволов символов джокеров для поиска используется строка образец по русски её часто называют шаблоном маской состоящая из символов метасимволов задающая правило поиска для манипуляций текстом дополнительно задаётся строка замены которая также может содержать себе специальные символы возможности набор утилит включая редактор sed фильтр grep поставляемых дистрибутивах unix одним из первых способствовал популяризации регулярных выражений для обработки текстов многие современные языки имеют встроенную поддержку регулярных выражений среди них actionscript perl java php javascript языки платформы net framework python tcl ruby lua gambas стандарт года delphi haxe другие регулярные выражения используются некоторыми текстовыми редакторами утилитами для поиска подстановки текста например при помощи регулярных выражений можно задать шаблоны позволяющие найти все символов кот любом контексте как то кот котлета терракотовый найти отдельно стоящее слово кот заменить его на кошка найти слово кот которому предшествует слово персидский или чеширский убрать из текста все предложения которых упоминается слово кот или кошка регулярные выражения позволяют задавать гораздо более сложные шаблоны поиска или замены результатом работы регулярным выражением может быть проверка наличия искомого образца заданном тексте определение подстроки текста которая сопоставляется образцу определение групп символов соответствующих отдельным частям образца если регулярное выражение используется для замены текста то результатом работы будет новая текстовая строка представляющая из себя исходный текст из которого удалены найденные подстроки сопоставленные образцу вместо них подставлены строки замены возможно запомненными при разборе группами символов из исходного текста частным случаем модификации текста является удаление всех вхождений найденного образца для чего строка замены указывается пустой история истоки регулярных выражений лежат теории автоматов теории формальных языков классификации формальных грамматик по хомскому эти области изучают вычислительные модели автоматы способы описания классификации формальных языков гг уоррен маккалок уолтер питтс описали нейронную систему используя простой автомат качестве модели нейрона математик стивен клини позже описал эти модели используя свою систему математических обозначений названную регулярные множества кен томпсон встроил их редактор qed затем редактор ed под unix этого времени регулярные выражения стали широко использоваться unix unix подобных утилитах например expr awk emacs vi lex perl регулярные выражения perl tcl происходят от реализации написанной генри спенсером филип хейзел разработал библиотеку pcre perl совместимые регулярные выражения которая используется во многих современных инструментах таких как php apache теории формальных языков регулярные выражения состоят из констант операторов которые определяют множества строк множества операций на них соответственно на данном конечном алфавите определены следующие константы пустое множество пустая строка обозначает строку не содержащую ни одного символа эквивалентно символьный литерал где символ алфавита множество из символов либо из других множеств следующие операции сцепление конкатенация rs обозначает множество αβ например дизъюнкция чередование обозначает объединение например замыкание клини звезда клини обозначает минимальное надмножество множества которое содержит замкнуто относительно конкатенации это есть множество всех строк полученных конкатенацией нуля или более строк из например run forrest run forrest runrun runforrest forrestrun forrestforrest runrunrun runrunforrest runforrestrun синтаксис представление символов обычные символы литералы специальные символы метасимволы большинство символов регулярном выражении представляют сами себя за исключением специальных символов разных типах регулярных выражений этот набор различается см разновидности регулярных выражений которые могут быть экранированы символом обратная косая черта для представления самих себя качестве символов текста можно экранировать целую символов заключив её между пример соответствие или аналогично могут быть представлены другие специальные символы набор символов требующих экранирования может отличаться зависимости от конкретной реализации часть символов которые той или иной реализации не требуют экранирования например угловые скобки могут быть экранированы из соображений удобочитаемости любой символ метасимвол точка означает один любой символ но некоторых реализациях исключая символ новой строки вместо символа можно использовать все пробельные непробельные символы включая символ новой строки символьные классы наборы символов набор символов квадратных скобках именуется символьным классом позволяет указать интерпретатору регулярных выражений что на данном месте строке может стоять один из перечисленных символов частности задаёт возможность появления тексте одного из трёх указанных символов задаёт соответствие одной из цифр возможно указание диапазонов символов например соответствует всем буквам русского алфавита за исключением букв если требуется указать символы которые не входят указанный набор то используют символ внутри квадратных скобок например означает любой символ кроме цифр добавление набор специальных символов путём экранирования самый бесхитростный способ однако современных регулярных выражениях унаследован также традиционный подход см традиционные регулярные выражения некоторые символьные классы можно заменить специальными метасимволами символ эквивалент соответствие позиция внутри строки следующие символы позволяют регулярное выражение относительно элементов текста начала конца строки границ слова представление позиция пример соответствие начало текста или строки при модификаторе конец текста или строки при модификаторе граница слова не граница слова предыдущий успешный поиск поиск остановился на позиции там где не нашлось обозначение группы круглые скобки используются для определения области действия приоритета операций шаблон внутри группы обрабатывается как единое целое может быть квантифицирован например выражение найдёт вида перечисление вертикальная черта разделяет допустимые варианты например соответствует или следует помнить что перебор вариантов выполняется слева направо как они указаны если требуется указать перечень вариантов внутри более сложного регулярного выражения то его нужно заключить группу например или описывают строку или случае односимвольными альтернативами предпочтителен вариант так как сравнение символьным классом выполняется проще чем обработка группы проверкой на все её возможные модификаторы генерацией обратной связи квантификация поиск квантификатор после символа символьного класса или группы определяет сколько раз предшествующее выражение может встречаться следует учитывать что квантификатор может относиться более чем одному символу регулярном выражении только если это символьный класс или группа представление число повторений эквивалент пример соответствие ноль или одно ноль или более одно или более но не представление число повторений пример соответствие ровно раз от до включительно не менее не более часто используется для обозначения любого количества любых символов между двумя частями регулярного выражения символьные классы сочетании позволяют устанавливать соответствия реальными текстами например столбцами цифр телефонами почтовыми адресами элементами html разметки др если символы не образуют квантификатор их специальное значение игнорируется жадная ленивая квантификация некоторых реализациях квантификаторам регулярных выражениях соответствует максимально длинная строка из возможных квантификаторы являются жадными это может оказаться значительной проблемой например часто ожидают что выражение найдёт тексте теги html однако если тексте есть более одного html тега то этому выражению соответствует целиком строка содержащая множество тегов эту проблему можно решить двумя способами учитывать символы не соответствующие желаемому образцу для вышеописанного случая определить квантификатор как нежадный ленивый большинство реализаций позволяют это сделать добавив после него знак вопроса использование ленивых квантификаторов может повлечь за собой обратную проблему когда выражению соответствует слишком короткая частности пустая строка жадный ленивый также общей проблемой как жадных так ленивых выражений являются точки возврата для перебора вариантов выражения точки ставятся после каждой итерации квантификатора если интерпретатор не нашёл соответствия после квантификатора то он начинает возвращаться по всем установленным точкам пересчитывая оттуда выражение по другому ревнивая квантификация сверхжадная отличие от обычной жадной квантификации ревнивая possessive квантификация не только старается найти максимально длинный вариант но ещё не позволяет алгоритму возвращаться предыдущим шагам поиска для того чтобы найти возможные соответствия для оставшейся части регулярного выражения использование ревнивых квантификаторов увеличивает скорость поиска особенно тех случаях когда строка не соответствует регулярному выражению кроме того ревнивые квантификаторы могут быть использованы для исключения нежелательных совпадений жадный ревнивый пример соответствие но не так как буква уже занята это аналогично атомарной группировке группировка обратная связь одно из применений группировки повторное использование ранее найденных групп символов подстрок блоков отмеченных подвыражений захватов при обработке выражения подстро ки найденные по шаблону внутри группы сохраняются отдельной области памяти получают номер начиная единицы каждой подстроке соответствует пара скобок регулярном выражении квантификация группы не влияет на сохранённый результат то есть сохраняется лишь первое вхождение обычно поддерживается до нумерованных подстрок номерами от до но некоторые интерпретаторы позволяют работать бо льшим количеством впоследствии пределах данного регулярного выражения можно использовать обозначения от до для проверки на совпадение ранее найденной подстрокой например регулярное выражение найдёт строку или но пропустит строку также ранее найденные подстро ки можно использовать при замене по регулярному выражению таком случае замещающий текст вставляются те же обозначения что пределах самого выражения группировка без обратной связи если группа используется только для группировки её результат дальнейшем не потребуется то можно использовать группировку вида под результат такой группировки не выделяется отдельная область памяти соответственно ей не назначается номер это положительно влияет на скорость выполнения выражения но понижает удобочитаемость атомарная группировка атомарная группировка вида также как группировка без обратной связи не создаёт обратных связей отличие от неё такая группировка запрещает возвращаться назад по строке если часть шаблона уже найдена пример соответствие создаваемые группы нет но не вариант найден остальные проигнорированы нет не найдётся все заняты нет возврата внутрь группы атомарная группировка выполняется ещё быстрее чем группировка без обратной связи сохраняет процессорное время при выполнении остального выражения так как запрещает проверку любых других вариантов внутри группы когда один вариант уже найден это очень полезно при оптимизации групп со множеством различных вариантов это аналогично ревнивой квантификации модификаторы модификаторы действуют момента вхождения до конца регулярного выражения или модификатора некоторые интерпретаторы могут применить модификатор ко всему выражению не момента его вхождения синтаксис описание включает выражения регистру символов выключает включает режим соответствия точки символам переноса строки возврата каретки выключает символы вызывают соответствие только после до символов новой строки началом концом текста включает режим без учёта пробелов между частями регулярного выражения позволяет использовать для комментариев выключает группы модификаторы можно объединять одну группу такая группа включает режим выключает режим если использование модификаторов требуется только пределах группы то нужный шаблон указывается внутри группы после модификаторов но перед двоеточием например найдёт но не комментарии для добавления комментариев регулярное выражение можно использовать группы комментарии вида такая группа интерпретатором полностью игнорируется не проверяется на вхождение текст например выражение соответствует строке просмотр вперёд назад большинстве реализаций регулярных выражений есть способ производить поиск фрагмента текста просматривая но не включая найденное окружающий текст который расположен до или после искомого фрагмента текста просмотр отрицанием используется реже следит за тем чтобы указанные соответствия напротив не встречались до или после искомого текстового фрагмента представление вид просмотра пример соответствие позитивный просмотр вперёд негативный просмотр вперёд отрицанием позитивный просмотр назад негативный просмотр назад отрицанием поиск по условию во многих реализациях регулярных выражений существует возможность выбирать по какому пути пойдёт проверка том или ином месте регулярного выражения на основании уже найденных значений представление пояснение пример соответствие если операция просмотра успешна то далее выполняется часть иначе выполняется часть выражении может использоваться любая из четырёх операций просмотра следует учитывать что операция просмотра нулевой ширины поэтому части случае позитивного или случае негативного просмотра должны включать себя описание шаблона из операции просмотра если группа вернула значение то поиск по условию выполняется по шаблону иначе по шаблону флаги некоторых языках например javascript реализованы флаги которые расширяют функции регэкспа флаги указываются после регулярного выражения порядок флагов значения не имеет типичные флаги глобальный поиск обрабатываются все совпадения шаблоном поиска регистр букв не имеет значения многострочный поиск текст трактуется как одна строка этом случае метасимволу точка соответствует любой одиночный символ включая символ новой строки unicode трактовка выражение может содержать специальные паттерны характерные для уникода lu заглавные буквы например флаг указывается после паттерна например вот так разновидности регулярных выражений базовые регулярные выражения posix bre традиционные регулярные выражения unix синтаксис базовых регулярных выражений на данный момент определён posix как устаревший но он до сих пор широко распространён из соображений обратной совместимости многие unix утилиты используют такие регулярные выражения по умолчанию данную версию включены метасимволы действует только начале выражения действует только конце выражения первоначальный вариант для первоначальный вариант для где номер от до особенности звёздочка должна следовать после выражения единичному символу пример выражение следует считать неправильным некоторых случаях оно соответствует нулю или более повторений строки других оно соответствует строке внутри символьного класса специальные значения символов основном игнорируются особые случаи чтобы добавить символ набор его следует поместить туда не первым чтобы добавить символ набор его следует поместить туда первым или последним например шаблон dns имени куда могут входить буквы цифры минус точка разделитель любой символ кроме минуса цифры чтобы добавить символ или набор его следует поместить туда первым например соответствует или расширенные регулярные выражения posix ere синтаксис основном аналогичен традиционному отменено использование обратной косой черты для метасимволов обратная косая черта перед метасимволом отменяет его специальное значение см представление специальных символов отвергнута теоретически нерегулярная конструкция добавлены метасимволы регулярные выражения совместимые perl perl совместимые регулярные выражения pcre имеют более богатый синтаксис чем даже posix ere по этой причине очень многие приложения используют именно perl совместимый синтаксис регулярных выражений регулярные выражения совместимые unicode unicode это набор символов целью которого является определение всех символов символов со всех человеческих языков живых мертвых регулярные выражения рассчитанные на множество языков таким образом не привязываются конкретным наборам символов описывают их согласно принятых правил так например выражение для нахождения заглавных английских букв unicode будет выглядеть так lu некоторые выражения regexp unicode представление краткая форма полная форма буквы letter любые буквы любого языка ll буквы нижнего регистра строчные из тех что имеют прописной вариант написания lu буквы верхнего регистра прописные для тех что имеют строчный вариант написания lt прописная буква которая появляется начала слова из строчных букв cased_letter буква которая имеет как прописной так строчный варианты написания lm modifier_letter специальные символы которые используются как буквы lo other_letter символ или идиограмма которая не имеет прописных строчных вариантов написания специальные символы mark символы вставленные для комбинирования другими символами например акценты умляуты оборачивающие скобки mn символ вставленный для комбинирования другими символами не занимая дополнительной ширины mc символы вставленные для комбинирования другими символами занимая дополнительную ширину как во многих восточных языках me enclosing_mark символы которые оборачивают символ например круг квадрат пробелы разделители separator любые виды пробелов или невидимых разделителей zs space_separator пробельные символы которые невидимы но имеют ширину zl line_separator символ разделения виде линии zp знак параграфа математические символы symbol математические символы символы валюты символы псевдографики рамки sm math_symbol любые математические символы sc currency_symbol любые символы валют sk modifier_symbol комбинированный символ пометка как комбинация самого символа символа отметки so other_symbol различные символы не математические не символы валют или их комбинации цифровые символы number любые виды цифровых символов любых языках nd цифры от нуля до девятки любых языках nl letter_number число которое может выглядеть как буквы например как римские числа no other_number число представленное как верхний или нижний индекс или число которое не состоит из цифр исключая числа из идеографических скриптов знаки пунктуации punctuation любой вид пунктуационных знаков pd любой вид дефисов или тире ps любой вид открывающих скобок pe любой вид закрывающих скобок pi любой вид открывающих кавычек pf любой вид закрывающих кавычек pc пунктуационные символы такие как знаки подчёркивания или соединения слов po любые виды пунктуационных символов что не являются точками скобками кавычками или соединителями управляющие символы other невидимые управляющие символы не используемые позиции cc control ascii или latin управляющие символы cf format невидимые индикаторы форматирования co private_use любые позиции для личного использования cs surrogate половина суррогатных пар кодировке utf cn unassigned любые позиции которых не назначены символы нечёткие регулярные выражения некоторых случаях регулярные выражения удобно применить для анализа текстовых фрагментов на естественном языке то есть написанных людьми возможно содержащих опечатки либо нестандартные варианты употреблений слов например если проводить опрос допустим на веб сайте какой станцией метро вы пользуетесь может оказаться что невский проспект посетители могут указать как невский невск просп нев проспект наб канала грибоедова канал грибоедова это название второго выхода ст невский проспект здесь обычные регулярные выражения неприменимы первую очередь из за того что входящие образцы слова могут совпадать не очень точно нечётко но тем не менее было бы удобно описывать регулярными выражениями структурные зависимости между элементами образца например нашем случае указать что совпадение может быть образцом невский проспект или канал грибоедова притом проспект может быть сокращено до пр или отсутствовать перед канал может находиться сокращение наб эта задача сродни полнотекстовому поиску отличаясь том что здесь короткий фрагмент должен сравниваться набором образцов при полнотекстовом поиске наоборот образец обычно один то время как фрагмент текста очень большой или задаче разрешения лексической многозначности которая однако не позволяет задать структурирующие отношения между элементами образца существует небольшое количество библиотек реализующих механизм регулярных выражений возможностью нечёткого сравнения tre бесплатная библиотека на использующая синтаксис регулярных выражений похожий на posix стабильный проект frej open source библиотека на java использующая lisp образный синтаксис лишённая многих возможностей обычных регулярных выражений но сосредоточенная на различного рода автоматических заменах фрагментов текста бета версия реализации nfa конечные автоматы используют жадный алгоритм отката проверяя все возможные расширения регулярного выражения определённом порядке выбирая первое подходящее значение nfa может обрабатывать подвыражения обратные ссылки но из за алгоритма отката традиционный nfa может проверять одно то же место несколько раз что отрицательно сказывается на скорости работы поскольку традиционный nfa принимает первое найденное соответствие он может не найти самое длинное из вхождений этого требует стандарт posix существуют модификации nfa выполняющие это требование gnu sed именно такой механизм регулярных выражений используется например perl tcl net dfa конечные автоматы работают линейно по времени поскольку не используют откаты никогда не проверяют какую либо часть текста дважды они могут гарантированно найти самую длинную строку из возможных dfa содержит только конечное состояние следовательно не обрабатывает обратных ссылок также не поддерживает конструкций явным расширением то есть не способен обработать подвыражения dfa используется например lex egrep см также шаблон поиска примечания литература ссылки шпаргалка по регулярным выражениям справочник ресурсы по регулярным выражениям учебник детальное описание синтаксиса примерами сравнение различных интерпретаторов прочее msdn знакомство регулярными выражениями реализация механизма обработки регулярных выражений на языке теория методика построения регулярных выражений проблема самообразования онлайн генератор регулярных выражений на php для новичков конструктор регулярных выражений подсветкой синтаксиса tre бесплатная переносимая библиотека для нечёткого сравнения помощью регулярных выражений frej fuzzy regular expressions for java нечёткие регулярные выражения для java на sourceforge net категория категория формальные языки категория интерфейс командной строки категория сопоставление образцом категория теория автоматов категория концепции языков