imap протокол прикладного уровня для доступа электронной почте базируется на транспортном протоколе tcp использует порт imap предоставляет пользователю обширные возможности для работы почтовыми ящиками находящимися на центральном сервере почтовая программа использующая этот протокол получает доступ хранилищу корреспонденции на сервере так как будто эта корреспонденция расположена на компьютере получателя электронными письмами можно манипулировать компьютера пользователя клиента без постоянной пересылки сервера обратно файлов полным содержанием писем для отправки писем используется обычно протокол smtp так как собственная команда отправки протокола imap называемая append считается неудачной небезопасной цель разработки протокола imap протокол imap представляет собой основном альтернативу pop зачаточными способностями по отправке pop имеет ряд недостатков наиболее серьёзный из них отсутствие возможностей по управлению перемещением хранением сообщений на сервере сообщения как правило загружаются почтового сервера все сразу после чего они сервера удаляются то есть отсутствует возможность выбирать сообщения для получения для решения проблем связанных этой особенностью pop вашингтонском университете был разработан новый протокол предполагающий возможность получения пользователями электронной почты из одного почтового ящика из различных мест при этом сообщения не распределяются между точками получения пользователю предоставляется возможность управлять сообщениями его почтовом ящике дополнительными функциями по обслуживанию почтовых ящиков на сервере версии протокола imap original imap спецификация отсутствует imap rfc rfc imap rfc imap bis спецификация существует только черновом варианте года imap переименованный imap bis imap rev rfc rfc преимущества по сравнению pop при использовании pop клиент подключается серверу только на промежуток времени необходимый для загрузки новых сообщений при использовании imap соединение не разрывается пока интерфейс активен сообщения загружаются только по требованию клиента это позволяет уменьшить время отклика для пользователей чьих ящиках имеется много сообщений большого объёма протокол pop требует чтобы текущий клиент был единственным подключенным ящику imap позволяет одновременный доступ нескольких клиентов ящику предоставляет клиенту возможность отслеживать изменения вносимые другими клиентами подключенными одновременно ним благодаря системе флагов определенной imap клиент может отслеживать состояние сообщения прочитано отправлен ответ удалено данные флагах хранятся на сервере клиенты imap могут создавать переименовывать удалять ящики перемещать сообщения между ящиками кроме того можно использовать расширение imap access control list acl extension rfc для управления правами доступа ящикам поиск сообщений происходит на стороне сервера imap имеет явный механизм расширения сообщения их атрибуты imap работает только сообщениями не требует каких либо пакетов со специальными заголовками каждое сообщение имеет несколько связанных ним атрибутов эти атрибуты могут быть определены индивидуально или совместно другими атрибутами uid каждому сообщению ставится соответствие битный код который при использовании совместно уникальным идентификатором образует битовую гарантирующую однозначную идентификацию сообщения почтовом ящике чем позже сообщение пришло тем больше его uid uid ассоциируется почтовым ящиком посылается виде кода uidvalidity отклика ok на фазе выбора почтового ящика если uid из предыдущей сессии по какой то причине не может быть использован uid должен быть инкрементирован uid сообщения не должно изменяться пределах сессии его не следует изменять от сессии сессии однако если невозможно сохранить uid сообщения последующей сессии каждая следующая сессия должна иметь новый уникальный код идентификатора который должен быть больше чем любой uid использованный ранее порядковый номер сообщения порядковый номер сообщения почтовом ящике начинается каждое сообщение начиная со второго имеет порядковый номер ровно на больше чем предшествующее ему течение сессии допустимо изменение порядкового номера сообщения например когда сообщение удаляется из почтового ящика номера всех последующих сообщений изменяются флаги сообщения этот атрибут представляет собой список из нуля или более именованных лексем соотнесённых данным сообщением флаг устанавливается путём его добавления этому списку обнуляется путём его удаления imap существует два типа флагов флаг может быть постоянным или действующим только на время данной сессии системным флагом является флаг имя которого определено спецификации протокола все системные флаги начинаются символа настоящее время определены следующие системные флаги seen сообщение прочитано answered на сообщение отправлен ответ flagged сообщение отмечено как важное deleted сообщение отмечено как удаленное draft сообщение отмечено как черновик recent недавнее сообщение впервые появилось ящике ходе текущей сессии внутренние дата время сообщения на сервере время дата получения сообщения случае доставки сообщения посредством протокола smtp дата время доставки конечному адресату для сообщений доставленных командой копирования внутренняя дата время отправителя сообщения при использовании команды append дата время заданные параметрами команды прочие атрибуты размер сообщения число октетов сообщении структура конверта сообщения структура тела сообщения взаимодействие клиента сервера соединение imap подразумевает установление связи между клиентом сервером клиент посылает серверу команды сервер клиенту данные уведомления статусе выполнения запроса все сообщения как клиента так сервера имеют форму строк завершающихся специальной любая процедура начинается команды клиента любая команда клиента начинается префикса идентификатора обычно короткая буквенно цифровая строка например называемого меткой tag для каждой команды клиент генерирует свою метку возможны два случая когда строка отправленная клиентом не представляет собой законченную команду первом аргумент команды снабжается кодом определяющим число октетов строке во втором аргументы команды требуют отклика со стороны сервера обоих случаях сервер посылает запрос продолжения команды начинающийся символа клиент должен завершить отправку одной команды прежде чем отправить другую протокольный приемник сервера читает строку команды пришедшей от клиента осуществляет её разбор выделяет параметры передает серверу данные по завершении команды сервер посылает отклик данные передаваемые сервером клиенту также статусные отклики которые не указывают на завершение выполнения команды имеют префикс называются непомеченными откликами данные могут быть отправлены сервером ответ на команду клиента или по собственной инициативе формат данных не зависит от причины отправки отклик указывает на удачное неудачное выполнение операции он использует ту же метку что команда клиента запустившая процедуру таким образом если осуществляется более чем одна команда метка сервера указывает на команду вызвавшую данный отклик имеется три вида отклика завершения сервера ok успешное выполнение no неудача bad протокольная ошибка например не узнана команда или зафиксирована синтаксическая ошибка протокольный приемник клиента imap читает строку отклика от сервера предпринимает действия соответствии первым символом или клиент должен быть готов принять любой отклик сервера любое время данные сервера должны быть записаны так чтобы клиент мог их непосредственно использовать не посылая серверу уточняющих запросов состояния сервера imap сервер imap находится одном из четырёх состояний большинство команд можно использовать только определенных состояниях состоянии без аутентификации клиент должен предоставить имя пароль прежде чем ему станет доступно большинство команд переход это состояние производится при установлении соединения без предварительной аутентификации состоянии аутентификации клиент идентифицирован должен выбрать почтовый ящик после чего ему станут доступны команды для работы сообщениями переход это состояние происходит при установлении соединение предварительной аутентификацией когда выданы все необходимые данные или при ошибочном выборе почтового ящика состояние выбора система попадает когда успешно осуществлен выбор почтового ящика состояние выхода система попадает при прерывании соединения результате запроса клиента или вследствие независимого решения сервера файл imap modes gif соединение без предварительной аутентификации соединение предварительной аутентификацией соединение отвергнуто успешное завершение команды login или authenticate успешное завершение команды select или examine выполнение команды close или неудачная команда select или examine выполнение команды logout закрытие сервера или прерывание соединения команды протокола imap login позволяет клиенту при регистрации на сервере imap использовать идентификатор пользователя пароль обычном текстовом виде это не самый лучший метод но иногда это единственная возможность подключиться серверу authenticate позволяет клиенту использовать при регистрации на сервере imap альтернативные методы проверки подлинности индивидуальная проверка подлинности пользователей не является обязательной поддерживается не всеми серверами imap тому же реализации такой проверки могут различаться зависимости от сервера когда клиент выдает команду authenticate сервер отвечает на неё строкой вызова кодировке base далее клиент должен отправить ответ на вызов сервера проверке подлинности также закодированный base если на сервере не поддерживается метод проверки подлинности предложенный клиентом он включает свой ответ слово no после этого клиент должен продолжить переговоры по согласованию метода проверки подлинности если все попытки определить метод проверки подлинности потерпели неудачу то клиент предпринимает попытку на сервере посредством команды login close закрывает почтовый ящик когда почтовый ящик закрыт помощью этой команды то сообщения помеченные флагом deleted удаляются из него не имеет параметров logout завершает сеанс для текущего идентификатора пользователя create создаёт новый почтовый ящик имя местоположение новых почтовых ящиков определяются соответствии общими спецификациями сервера delete применяется почтовым ящикам сервер imap при получении этой команды попытается удалить почтовый ящик именем указанным качестве аргумента команды сообщения удаляются вместе ящиками восстановлению не подлежат rename изменяет имя почтового ящика эта команда имеет два параметра имя почтового ящика который требуется переименовать новое имя почтового ящика subscribe добавляет почтовый ящик список активных ящиков клиента этой команде используется только один параметр имя почтового ящика который нужно внести список почтовый ящик не обязательно должен существовать чтобы его можно было добавить список активных ящиков это позволяет добавлять список активных ящиков ящики которые ещё не созданы или удалять их если они пусты unsubscribe удаляет почтовые ящики из списка активных ней так же используется один параметр имя почтового ящика который удаляется из списка активных ящиков клиента при этом сам по себе почтовый ящик не удаляется list получить список всех почтовых ящиков клиента имеет два параметра lsub отличие от команды list используется для получения списка ящиков командой subscribe параметры такие же как list status формирует запрос текущем состоянии почтового ящика первым параметром для этой команды является имя почтового ящика которому она применяется второй параметр это список критериев по которым клиент хочет получить информацию команда status может использоваться для получения информации состоянии почтового ящика без его открытия помощью команд select или examine пользователь может получить информацию по критериям messages общее число сообщений почтовом ящике recent число сообщений флагом recent uidnext идентификатор uid который будет назначен новому сообщению uidvalidity уникальный идентификатор почтового ящика unseen число сообщений без флага seen append добавляет сообщение конец указанного почтового ящика качестве аргументов указываются имя ящика флаги сообщения не обязательно метка времени не обязательно само сообщение заголовок тело имеются следующие флаги сообщений seen прочитано answered написан ответ flagged срочное deleted помечено для удаления draft черновик recent новое сообщение оно поступило почтовый ящик после окончания прошлого сеанса если команде указаны флаги то они устанавливаются для добавляемого сообщения любом случае для сообщения устанавливается флаг recent если команде задана метка времени то это время будет установлено качестве времени создания сообщения противном случае за время создания принимается текущее время поскольку сообщение состоит не из одной строки используются литералы пример append saved messages seen ready for literal data date mon feb pst from fred foobar subject afternoon meeting to mooch owatagu siam edu message id hello joe do you think we can meet at tomorrow ok append completed расширение multiappend описанное rfc позволяет одной командой добавлять почтовый ящик несколько сообщений check устанавливает контрольную точку почтовом ящике любые операции такие например как запись данных из памяти сервера на его жёсткий диск должны выполняться при соответствующем состоянии почтового ящика именно для проверки целостности почтового ящика после дисковых других подобных им операций применяется команда check эта команда используется без параметров expunge удаляет из почтового ящика все сообщения помеченные флагом deleted при этом почтовый ящик не закрывается ответ сервера на команду expunge представляет собой отчёт новом состоянии почтового ящика search поиск сообщений по критериям активном почтовом ящике последующим отображением результатов виде номера сообщения возможен поиск сообщений теле которых имеется определённая текстовая строка или имеющих определённый флаг или полученных до определённой даты fetch получить текст почтового сообщения команда применяется только для отображения сообщений отличие от pop клиент imap не сохраняет копию сообщения на клиентском пк store изменяет информацию сообщении copy копирует сообщения из одного почтового ящика другой uid используется связке командами fetch copy store или search её помощью этих командах можно использовать реальные номера uid вместо чисел из диапазона номеров сообщений capability запрос сервера imap информации его возможностях noop команда ничего не делает она может применяться для поддержки активности во время сеанса для того чтобы сеанс не прекратился по таймеру интервала ожидания ответ сервера на команду noop всегда должен быть положительным так как сервер часто ответе возвращает состояние выполнения той или иной команды то noop вполне можно использовать как триггер для периодического запроса состоянии сервера ссылки rfc internet message access protocol rev the imap connection howto configuring kmail with gmail imap and disconnected imap http citforum ru nets semenov imap shtml категория протоколы прикладного уровня категория электронная почта категория год науке