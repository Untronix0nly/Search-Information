вывод типов возможность компилятора самому логически вывести тип значения выражения впервые механизм вывода типов был представлен языке ml где компилятор всегда выводит наиболее общий полиморфный тип для всякого выражения это не только сокращает размер исходного кода повышает его лаконичность но нередко повышает повторное использование кода вывод типов характерен для функциональных языков хотя со временем он был частично реализован объектно ориентированных языках visual basic net vala go java где ограничивается возможностью опустить тип идентификатора определении инициализацией см синтаксический сахар например var hello world тип переменной от string выведен из инициализатора алгоритмы алгоритм хиндли милнера алгоритм хи ндли ми лнера механизм вывода типов выражений реализуемый языках основанных на системе типов хиндли милнера таких как ml первый язык этого семейства standard ml ocaml haskell fortress boo язык nemerle использует этот алгоритм рядом необходимых изменений механизм вывода типов основан на возможности автоматически полностью или частично выводить тип выражения полученного при помощи вычисления некоторого выражения так как этот процесс систематически производится во время трансляции программы транслятор часто может вывести тип переменной или функции без явного указания типов этих объектов во многих случаях можно опускать явные декларации типов это можно делать для достаточно простых объектов либо для языков простым синтаксисом например языке haskell реализован достаточно мощный механизм вывода типов поэтому указание типов функций этом языке не требуется программист может указать тип функции явно для того чтобы ограничить её использование только для конкретных типов данных либо для более оформления исходного кода для того чтобы получить информацию для корректного вывода типа выражения условиях отсутствия явной декларации типа этого выражения транслятор либо собирает такую информацию из явных деклараций типов подвыражений переменных функций входящих изучаемое выражение либо использует неявную информацию типах атомарных значений такой алгоритм не всегда помогает определить тип выражения особенно случаях использования функций высших порядков полиморфизма достаточно сложной природы поэтому сложных случаях когда есть необходимость избежать рекомендуется явно указывать тип выражений сама модель типизации основана на алгоритме вывода типов выражений который имеет своим источником механизм получения типов выражений используемый типизированном исчислении который был предложен карри фейсом далее уже роджер хиндли расширил сам алгоритм доказал что он выводит наиболее общий тип выражения робин милнер независимо от хиндли доказал свойства эквивалентного алгоритма наконец луис дамас окончательно показал что алгоритм милнера является законченным может использоваться для полиморфных типов связи этим алгоритм хиндли милнера иногда называют также алгоритмом дамаса милнера система типов определяется модели хиндли милнера следующим образом примитивные типы являются типами выражений параметрические переменные типов являются типами выражений если типы выражений то тип является типом выражений символ является типом выражений выражения типы которых вычисляются определяются довольно стандартным образом константы являются выражениями переменные являются выражениями если выражения то выражение если переменная выражение то выражение говорят что тип является экземпляром типа когда имеется некое преобразование такое что при этом обычно полагается что на преобразования типов накладываются ограничения заключающиеся том что сам алгоритм вывода типов состоит из двух шагов генерация системы уравнений последующее решение этих уравнений построение системы уравнений построение системы уравнений основано на следующих правилах том случае если связывание находится том случае если где том случае если является расширением связыванием этих правилах под символом понимается набор связываний переменных их типами решение системы уравнений решение построенной системы уравнений основано на алгоритме унификации это достаточно простой алгоритм имеется некоторая функция которая принимает на вход уравнение типов возвращает подстановку которая делает левую правую части уравнения одинаковыми унифицирует их подстановка это просто проекция переменных типов на сами типы такие подстановки могут вычисляться различными способами которые зависят от конкретной реализации алгоритма хиндли милнера см также утиная типизация приведение типа примечания комментарии источники ссылки реализация алгоритма хиндли милнера на perl archived mail message by roger hindley explains history of type inference polymorphic type inference by michael schwartzbach gives an overview of polymorphic type inference principal type schemes for functional programs re typeset copy of the damas and milner paper which described the soundness and completeness proofs tutorial and complete implementation in standard ml the tutorial includes some of the logical history of type systems as well as detailed description of the algorithm as implemented some typographic errors in the original damas milner paper are corrected basic typechecking paper by luca cardelli describes algorithm includes implementation in modula implementation of hindley milner type inference in scala by andrew forrest retrieved july what is hindley milner and why is it cool explains hindley milner examples in scala http fprog ru issue roman dushkin hindley milner модель типизации хиндли милнера пример её реализации на языке haskell категория типы данных