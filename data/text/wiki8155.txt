транза кция группа операций базой данных которая представляет собой логическую единицу работы данными транзакция может быть выполнена либо целиком успешно соблюдая целостность данных независимо от параллельно идущих других транзакций либо не выполнена вообще тогда она не должна произвести никакого эффекта транзакции обрабатываются транзакционными системами процессе работы которых создаётся история транзакций различают обычные параллельные распределённые транзакции распределённые транзакции подразумевают использование более чем одной транзакционной системы требуют намного более сложной логики например two phase commit двухфазный протокол фиксации транзакции также некоторых системах реализованы автономные транзакции или под транзакции которые являются автономной частью родительской транзакции пример транзакции пример необходимо перевести банковского счёта номер на счёт номер сумму денежных единиц этого можно достичь примеру приведённой действий прочесть баланс на счету номер уменьшить баланс на денежных единиц сохранить новый баланс счёта номер прочесть баланс на счету номер увеличить баланс на денежных единиц сохранить новый баланс счёта номер эти действия представляют собой логическую единицу работы перевод суммы между счетами таким образом являются транзакцией если прервать данную транзакцию примеру середине не аннулировать все изменения легко оставить владельца счёта номер без единиц тогда как владелец счета номер их не получит свойства транзакций одним из наиболее наборов требований транзакциям транзакционным системам является набор acid atomicity consistency isolation durability требования acid были основном сформулированы конце годов джимом греем вместе тем существуют системы ослабленными транзакционными свойствами уровни изоляции транзакций идеале транзакции разных пользователей должны выполняться так чтобы создавалась иллюзия что пользователь текущей транзакции единственный однако реальности по соображениям для выполнения некоторых специальных задач субд предоставляют различные уровни изоляции транзакций уровни описаны порядке увеличения изолированности транзакций соответственно надёжности работы данными чтение данных грязное чтение read uncommitted dirty read чтение изменений как своей транзакции так параллельных транзакций нет гарантии что данные изменённые другими транзакциями не будут любой момент изменены результате их отката поэтому такое чтение является потенциальным источником ошибок невозможны потерянные изменения lost changes возможны грязное чтение неповторяемое чтение фантомы чтение подтверждённых данных read committed чтение всех изменений своей транзакции зафиксированных изменений параллельных транзакций потерянные изменения грязное чтение не допускается возможны неповторяемое чтение фантомы повторяемое чтение repeatable read snapshot чтение всех изменений своей транзакции любые изменения внесённые параллельными транзакциями после начала своей недоступны потерянные изменения грязное неповторяемое чтение невозможны возможны фантомы сериализуемый serializable сериализуемые транзакции результат параллельного выполнения сериализуемой транзакции другими транзакциями должен быть логически эквивалентен результату их какого либо выполнения проблемы синхронизации не возникают чем выше уровень изоляции тем больше требуется ресурсов чтобы его обеспечить соответственно повышение изолированности может приводить снижению скорости выполнения параллельных транзакций что является платой за повышение надёжности субд уровень изоляции транзакций можно выбрать как для всех транзакций сразу так для одной конкретной транзакции по умолчанию большинстве баз данных используется уровень read committed уровень используется основном для отслеживания изменений длительных транзакций или для чтения редко изменяемых данных уровни используются при повышенных требованиях изолированности транзакций реализация полноценная реализация уровней изоляции свойств acid представляет собой нетривиальную задачу обработка поступающих данных приводит большому количеству маленьких изменений включая обновление как самих таблиц так индексов эти изменения потенциально могут потерпеть неудачу закончилось место на диске операция занимает слишком много времени timeout система должна случае неудачи корректно вернуть базу данных состояние до транзакции первые коммерческие субд примеру ibm db пользовались исключительно блокировкой доступа данным для обеспечения свойств acid но большое количество блокировок приводит существенному уменьшению есть два популярных семейства решений этой проблемы которые снижают количество блокировок журнализация изменений write ahead logging wal механизм теневых страниц shadow paging обоих случаях блокировки должны быть расставлены на всю информацию которая обновляется зависимости от уровня изоляции имплементации блокировки записи также расставляются на информацию которая была прочитана транзакцией при упреждающей журнализации используемой sybase ms sql server до версии все изменения записываются журнал только после успешного завершения базу данных это позволяет субд вернуться рабочее состояние после неожиданного падения системы теневые страницы содержат копии тех страниц базы данных на начало транзакции которых происходят изменения эти копии активизируются после успешного завершения хотя теневые страницы легче реализуются упреждающая журнализация более эффективна дальнейшее развитие технологий управления базами данных привело появлению технологий идея контроля над параллельным доступом помощью временных меток timestamp based concurrency control была развита привела появлению многоверсионной архитектуры mvcc эти технологии не нуждаются ни журнализации изменений ни теневых страницах архитектура реализованная oracle выше записывает старые версии страниц специальный сегмент отката но они все ещё доступны для чтения если транзакция при чтении попадает на страницу временная метка которой новее начала чтения данные берутся из сегмента отката то есть используется старая версия для поддержки такой работы ведётся журнал транзакций но отличие от упреждающей журнализации он не содержит данных работа ним состоит из трёх логических шагов записать намерение произвести некоторые операции выполнить задание копируя оригиналы изменяемых страниц сегмент отката записать что всё сделано без ошибок журнал транзакций сочетании сегментом отката область которой хранится копия всех изменяемых ходе транзакции данных гарантирует целостность данных случае сбоя запускается процедура восстановления которая просматривает отдельные его записи следующим образом если повреждена запись то сбой произошёл во время проставления отметки журнале значит ничего важного не потерялось игнорируем эту ошибку если все записи помечены как успешно выполненные то сбой произошёл между транзакциями здесь также нет потерь если журнале есть незавершённая транзакция то сбой произошёл во время записи на диск этом случае мы восстанавливаем старую версию данных из сегмента отката firebird вообще не имеет ни журнала изменений ни сегмента отката реализует mvcc записывая новые версии строк таблиц прямо активное пространство данных так же поступает ms sql теоретически это даёт максимальную эффективность при параллельной работе данными но ценой является необходимость сборки мусора то есть удаления старых уже не нужных версий данных см также транзакционная система acid атомарные операции программная транзакционная память mvcc примечания категория субд