компьютерная программа целом или её отдельная процедура называется реентера бельной от повторно входимый если она разработана таким образом что одна та же копия инструкций программы памяти может быть совместно использована несколькими пользователями или процессами при этом второй пользователь может вызвать реентерабельный код до того как ним завершит работу первый пользователь это как минимум не должно привести ошибке при корректной реализации не должно вызвать потери вычислений то есть не должно появиться необходимости выполнять уже выполненные фрагменты кода тесно связана безопасностью функции многопоточной среде thread safety тем не менее это разные понятия обеспечение является ключевым моментом при многозадачных систем частности операционных систем для обеспечения необходимо выполнение нескольких условий никакая часть вызываемого кода не должна вызываемая процедура не должна сохранять информацию между вызовами если процедура изменяет какие либо данные то они должны быть уникальными для каждого пользователя процедура не должна возвращать указатели на объекты общие для разных пользователей общем случае для обеспечения необходимо чтобы вызывающий процесс или функция каждый раз передавал вызываемому процессу все необходимые данные таким образом функция которая зависит только от своих параметров не использует глобальные статические переменные вызывает только реентерабельные функции будет реентерабельной если функция использует глобальные или статические переменные необходимо обеспечить чтобы каждый пользователь хранил свою локальную копию этих переменных пример следующем фрагменте кода функции не являются int g_var int g_var g_var return g_var int return здесь зависит от глобальной переменной g_var поэтому если два процесса вызывают одно то же время результат непредсказуем поэтому не реентерабельна но не реентерабельна поскольку она использует функцию следующем фрагменте кода функция accum также не является реентерабельной int accum int static int return здесь accum функция накапливающая значение за которое отвечает статическая переменная если accum будет вызвана разными процессами то результат также будет непредсказуем как предыдущем примере является общей для всех вызывающих её процессов также потеря может встречаться тогда когда выражении используется больше одного раза одна та же переменная define sqr void func void int sqr этом случае макрос sqr будет работать некорректно если при каждом обращении аргументу он изменяется ссылки определение writing reentrant and thread safe code категория